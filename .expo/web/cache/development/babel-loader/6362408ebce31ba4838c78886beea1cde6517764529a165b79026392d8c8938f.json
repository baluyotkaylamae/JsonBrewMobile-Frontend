{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useEffect } from 'react';\nimport { useFocusWithin } from '@react-aria/interactions';\nvar visibleOverlays = [];\nexport function useOverlay(props, ref) {\n  var onClose = props.onClose,\n    shouldCloseOnBlur = props.shouldCloseOnBlur,\n    isOpen = props.isOpen,\n    _props$isKeyboardDism = props.isKeyboardDismissDisabled,\n    isKeyboardDismissDisabled = _props$isKeyboardDism === void 0 ? false : _props$isKeyboardDism;\n  useEffect(function () {\n    if (isOpen) {\n      visibleOverlays.push(ref);\n    }\n    return function () {\n      var index = visibleOverlays.indexOf(ref);\n      if (index >= 0) {\n        visibleOverlays.splice(index, 1);\n      }\n    };\n  }, [isOpen, ref]);\n  var onHide = function onHide() {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n  var onKeyDown = function onKeyDown(e) {\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\n      e.preventDefault();\n      onHide();\n    }\n  };\n  var _useFocusWithin = useFocusWithin({\n      isDisabled: !shouldCloseOnBlur,\n      onBlurWithin: function onBlurWithin() {\n        onClose && onClose();\n      }\n    }),\n    focusWithinProps = _useFocusWithin.focusWithinProps;\n  return {\n    overlayProps: _objectSpread({\n      onKeyDown: onKeyDown\n    }, focusWithinProps)\n  };\n}","map":{"version":3,"names":["useEffect","useFocusWithin","visibleOverlays","useOverlay","props","ref","onClose","shouldCloseOnBlur","isOpen","_props$isKeyboardDism","isKeyboardDismissDisabled","push","index","indexOf","splice","onHide","length","onKeyDown","e","key","preventDefault","_useFocusWithin","isDisabled","onBlurWithin","focusWithinProps","overlayProps","_objectSpread"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\@react-native-aria\\overlays\\src\\useOverlay.web.ts"],"sourcesContent":["import { HTMLAttributes, RefObject, useEffect } from 'react';\r\nimport { useFocusWithin } from '@react-aria/interactions';\r\n\r\ninterface OverlayProps {\r\n  /** Whether the overlay is currently open. */\r\n  isOpen?: boolean;\r\n\r\n  /** Handler that is called when the overlay should close. */\r\n  onClose?: () => void;\r\n\r\n  /**\r\n   * Whether to close the overlay when the user interacts outside it.\r\n   * @default false\r\n   */\r\n  isDismissable?: boolean;\r\n\r\n  /** Whether the overlay should close when focus is lost or moves outside it. */\r\n  shouldCloseOnBlur?: boolean;\r\n\r\n  /**\r\n   * Whether pressing the escape key to close the overlay should be disabled.\r\n   * @default false\r\n   */\r\n  isKeyboardDismissDisabled?: boolean;\r\n\r\n  /**\r\n   * When user interacts with the argument element outside of the overlay ref,\r\n   * return true if onClose should be called.  This gives you a chance to filter\r\n   * out interaction with elements that should not dismiss the overlay.\r\n   * By default, onClose will always be called on interaction outside the overlay ref.\r\n   */\r\n  shouldCloseOnInteractOutside?: (element: HTMLElement) => boolean;\r\n}\r\n\r\ninterface OverlayAria {\r\n  /** Props to apply to the overlay container element. */\r\n  overlayProps: HTMLAttributes<HTMLElement>;\r\n}\r\n\r\nconst visibleOverlays: RefObject<HTMLElement>[] = [];\r\n\r\n/**\r\n * Provides the behavior for overlays such as dialogs, popovers, and menus.\r\n * Hides the overlay when the user interacts outside it, when the Escape key is pressed,\r\n * or optionally, on blur. Only the top-most overlay will close at once.\r\n */\r\nexport function useOverlay(\r\n  props: OverlayProps,\r\n  ref: RefObject<HTMLElement>\r\n): OverlayAria {\r\n  let {\r\n    onClose,\r\n    shouldCloseOnBlur,\r\n    isOpen,\r\n    isKeyboardDismissDisabled = false,\r\n  } = props;\r\n\r\n  // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      visibleOverlays.push(ref);\r\n    }\r\n\r\n    return () => {\r\n      let index = visibleOverlays.indexOf(ref);\r\n      if (index >= 0) {\r\n        visibleOverlays.splice(index, 1);\r\n      }\r\n    };\r\n  }, [isOpen, ref]);\r\n\r\n  // Only hide the overlay when it is the topmost visible overlay in the stack.\r\n  let onHide = () => {\r\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  // Handle the escape key\r\n  let onKeyDown = (e: any) => {\r\n    if (e.key === 'Escape' && !isKeyboardDismissDisabled) {\r\n      e.preventDefault();\r\n      onHide();\r\n    }\r\n  };\r\n\r\n  // Handle clicking outside the overlay to close it\r\n\r\n  let { focusWithinProps } = useFocusWithin({\r\n    isDisabled: !shouldCloseOnBlur,\r\n    onBlurWithin: () => {\r\n      onClose && onClose();\r\n    },\r\n  });\r\n\r\n  return {\r\n    overlayProps: {\r\n      onKeyDown,\r\n      ...focusWithinProps,\r\n    },\r\n  };\r\n}\r\n"],"mappings":";;;AAAA,SAAoCA,SAAS,QAAQ,OAAO;AAC5D,SAASC,cAAc,QAAQ,0BAA0B;AAsCzD,IAAMC,eAAyC,GAAG,EAAE;AAOpD,OAAO,SAASC,UAAUA,CACxBC,KAAmB,EACnBC,GAA2B,EACd;EACb,IACEC,OAAO,GAILF,KAAK,CAJPE,OAAO;IACPC,iBAAiB,GAGfH,KAAK,CAHPG,iBAAiB;IACjBC,MAAM,GAEJJ,KAAK,CAFPI,MAAM;IAAAC,qBAAA,GAEJL,KAAK,CADPM,yBAAyB;IAAzBA,yBAAyB,GAAAD,qBAAA,cAAG,QAAAA,qBAAA;EAI9BT,SAAS,CAAC,YAAM;IACd,IAAIQ,MAAM,EAAE;MACVN,eAAe,CAACS,IAAI,CAACN,GAAG,CAAC;IAC3B;IAEA,OAAO,YAAM;MACX,IAAIO,KAAK,GAAGV,eAAe,CAACW,OAAO,CAACR,GAAG,CAAC;MACxC,IAAIO,KAAK,IAAI,CAAC,EAAE;QACdV,eAAe,CAACY,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAClC;IACF,CAAC;EACH,CAAC,EAAE,CAACJ,MAAM,EAAEH,GAAG,CAAC,CAAC;EAGjB,IAAIU,MAAM,GAAG,SAATA,MAAMA,CAAA,EAAS;IACjB,IAAIb,eAAe,CAACA,eAAe,CAACc,MAAM,GAAG,CAAC,CAAC,KAAKX,GAAG,IAAIC,OAAO,EAAE;MAClEA,OAAO,CAAC,CAAC;IACX;EACF,CAAC;EAGD,IAAIW,SAAS,GAAI,SAAbA,SAASA,CAAIC,CAAM,EAAK;IAC1B,IAAIA,CAAC,CAACC,GAAG,KAAK,QAAQ,IAAI,CAACT,yBAAyB,EAAE;MACpDQ,CAAC,CAACE,cAAc,CAAC,CAAC;MAClBL,MAAM,CAAC,CAAC;IACV;EACF,CAAC;EAID,IAAAM,eAAA,GAA2BpB,cAAc,CAAC;MACxCqB,UAAU,EAAE,CAACf,iBAAiB;MAC9BgB,YAAY,EAAE,SAAAA,aAAA,EAAM;QAClBjB,OAAO,IAAIA,OAAO,CAAC,CAAC;MACtB;IACF,CAAC,CAAC;IALIkB,gBAAA,GAAAH,eAAA,CAAAG,gBAAA;EAON,OAAO;IACLC,YAAY,EAAAC,aAAA;MACVT,SAAS,EAATA;IAAS,GACNO,gBAAA;EAEP,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}