{"ast":null,"code":"import { useEffect } from 'react';\nexport var onCloseMap = new WeakMap();\nexport function useCloseOnScroll(opts) {\n  var triggerRef = opts.triggerRef,\n    isOpen = opts.isOpen,\n    onClose = opts.onClose;\n  useEffect(function () {\n    if (!isOpen) {\n      return;\n    }\n    var onScroll = function onScroll(e) {\n      var target = e.target;\n      if (!triggerRef.current || !target.contains(triggerRef.current)) {\n        return;\n      }\n      var onCloseHandler = onClose || onCloseMap.get(triggerRef.current);\n      if (onCloseHandler) {\n        onCloseHandler();\n      }\n    };\n    window.addEventListener('scroll', onScroll, true);\n    return function () {\n      window.removeEventListener('scroll', onScroll, true);\n    };\n  }, [isOpen, onClose, triggerRef]);\n}","map":{"version":3,"names":["useEffect","onCloseMap","WeakMap","useCloseOnScroll","opts","triggerRef","isOpen","onClose","onScroll","e","target","current","contains","onCloseHandler","get","window","addEventListener","removeEventListener"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\@react-native-aria\\overlays\\src\\web\\overlays\\src\\useCloseOnScroll.ts"],"sourcesContent":["//@ts-nocheck\r\n/*\r\n * Copyright 2020 Adobe. All rights reserved.\r\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License. You may obtain a copy\r\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software distributed under\r\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\n * OF ANY KIND, either express or implied. See the License for the specific language\r\n * governing permissions and limitations under the License.\r\n */\r\n\r\nimport { RefObject, useEffect } from 'react';\r\n\r\n// This behavior moved from useOverlayTrigger to useOverlayPosition.\r\n// For backward compatibility, where useOverlayTrigger handled hiding the popover on close,\r\n// it sets a close function here mapped from the trigger element. This way we can avoid\r\n// forcing users to pass an onClose function to useOverlayPosition which could be considered\r\n// a breaking change.\r\nexport const onCloseMap: WeakMap<HTMLElement, () => void> = new WeakMap();\r\n\r\ninterface CloseOnScrollOptions {\r\n  triggerRef: RefObject<HTMLElement>;\r\n  isOpen?: boolean;\r\n  onClose?: () => void;\r\n}\r\n\r\n/** @private */\r\nexport function useCloseOnScroll(opts: CloseOnScrollOptions) {\r\n  let { triggerRef, isOpen, onClose } = opts;\r\n\r\n  useEffect(() => {\r\n    if (!isOpen) {\r\n      return;\r\n    }\r\n\r\n    let onScroll = (e: MouseEvent) => {\r\n      // Ignore if scrolling an scrollable region outside the trigger's tree.\r\n      let target = e.target as HTMLElement;\r\n      if (!triggerRef.current || !target.contains(triggerRef.current)) {\r\n        return;\r\n      }\r\n\r\n      let onCloseHandler = onClose || onCloseMap.get(triggerRef.current);\r\n      if (onCloseHandler) {\r\n        onCloseHandler();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', onScroll, true);\r\n    return () => {\r\n      window.removeEventListener('scroll', onScroll, true);\r\n    };\r\n  }, [isOpen, onClose, triggerRef]);\r\n}\r\n"],"mappings":"AAaA,SAAoBA,SAAS,QAAQ,OAAO;AAO5C,OAAO,IAAMC,UAA4C,GAAG,IAAIC,OAAO,CAAC,CAAC;AASzE,OAAO,SAASC,gBAAgBA,CAACC,IAA0B,EAAE;EAC3D,IAAMC,UAAU,GAAsBD,IAAI,CAApCC,UAAU;IAAEC,MAAM,GAAcF,IAAI,CAAxBE,MAAM;IAAEC,OAAA,GAAYH,IAAI,CAAhBG,OAAA;EAE1BP,SAAS,CAAC,YAAM;IACd,IAAI,CAACM,MAAM,EAAE;MACX;IACF;IAEA,IAAIE,QAAQ,GAAI,SAAZA,QAAQA,CAAIC,CAAa,EAAK;MAEhC,IAAIC,MAAM,GAAGD,CAAC,CAACC,MAAqB;MACpC,IAAI,CAACL,UAAU,CAACM,OAAO,IAAI,CAACD,MAAM,CAACE,QAAQ,CAACP,UAAU,CAACM,OAAO,CAAC,EAAE;QAC/D;MACF;MAEA,IAAIE,cAAc,GAAGN,OAAO,IAAIN,UAAU,CAACa,GAAG,CAACT,UAAU,CAACM,OAAO,CAAC;MAClE,IAAIE,cAAc,EAAE;QAClBA,cAAc,CAAC,CAAC;MAClB;IACF,CAAC;IAEDE,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAER,QAAQ,EAAE,IAAI,CAAC;IACjD,OAAO,YAAM;MACXO,MAAM,CAACE,mBAAmB,CAAC,QAAQ,EAAET,QAAQ,EAAE,IAAI,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACF,MAAM,EAAEC,OAAO,EAAEF,UAAU,CAAC,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}