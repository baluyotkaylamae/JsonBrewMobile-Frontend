{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nexport function SceneView(_ref) {\n  var children = _ref.children,\n    navigationState = _ref.navigationState,\n    lazy = _ref.lazy,\n    layout = _ref.layout,\n    index = _ref.index,\n    lazyPreloadDistance = _ref.lazyPreloadDistance,\n    addEnterListener = _ref.addEnterListener,\n    style = _ref.style;\n  var _React$useState = React.useState(Math.abs(navigationState.index - index) > lazyPreloadDistance),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isLoading = _React$useState2[0],\n    setIsLoading = _React$useState2[1];\n  if (isLoading && Math.abs(navigationState.index - index) <= lazyPreloadDistance) {\n    setIsLoading(false);\n  }\n  React.useEffect(function () {\n    var handleEnter = function handleEnter(value) {\n      if (value === index) {\n        setIsLoading(function (prevState) {\n          if (prevState) {\n            return false;\n          }\n          return prevState;\n        });\n      }\n    };\n    var unsubscribe;\n    var timer;\n    if (lazy && isLoading) {\n      unsubscribe = addEnterListener(handleEnter);\n    } else if (isLoading) {\n      timer = setTimeout(function () {\n        return setIsLoading(false);\n      }, 0);\n    }\n    return function () {\n      var _unsubscribe;\n      (_unsubscribe = unsubscribe) === null || _unsubscribe === void 0 ? void 0 : _unsubscribe();\n      clearTimeout(timer);\n    };\n  }, [addEnterListener, index, isLoading, lazy]);\n  var focused = navigationState.index === index;\n  return React.createElement(View, {\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    style: [styles.route, layout.width ? {\n      width: layout.width\n    } : focused ? StyleSheet.absoluteFill : null, style]\n  }, focused || layout.width ? children({\n    loading: isLoading\n  }) : null);\n}\nvar styles = StyleSheet.create({\n  route: {\n    flex: 1,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"names":["React","StyleSheet","View","SceneView","_ref","children","navigationState","lazy","layout","index","lazyPreloadDistance","addEnterListener","style","_React$useState","useState","Math","abs","_React$useState2","_slicedToArray","isLoading","setIsLoading","useEffect","handleEnter","value","prevState","unsubscribe","timer","setTimeout","_unsubscribe","clearTimeout","focused","createElement","accessibilityElementsHidden","importantForAccessibility","styles","route","width","absoluteFill","loading","create","flex","overflow"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\react-native-tab-view\\src\\SceneView.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\r\n\r\nimport type {\r\n  EventEmitterProps,\r\n  NavigationState,\r\n  Route,\r\n  SceneRendererProps,\r\n} from './types';\r\n\r\ntype Props<T extends Route> = SceneRendererProps &\r\n  EventEmitterProps & {\r\n    navigationState: NavigationState<T>;\r\n    lazy: boolean;\r\n    lazyPreloadDistance: number;\r\n    index: number;\r\n    children: (props: { loading: boolean }) => React.ReactNode;\r\n    style?: StyleProp<ViewStyle>;\r\n  };\r\n\r\nexport function SceneView<T extends Route>({\r\n  children,\r\n  navigationState,\r\n  lazy,\r\n  layout,\r\n  index,\r\n  lazyPreloadDistance,\r\n  addEnterListener,\r\n  style,\r\n}: Props<T>) {\r\n  const [isLoading, setIsLoading] = React.useState(\r\n    Math.abs(navigationState.index - index) > lazyPreloadDistance\r\n  );\r\n\r\n  if (\r\n    isLoading &&\r\n    Math.abs(navigationState.index - index) <= lazyPreloadDistance\r\n  ) {\r\n    // Always render the route when it becomes focused\r\n    setIsLoading(false);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const handleEnter = (value: number) => {\r\n      // If we're entering the current route, we need to load it\r\n      if (value === index) {\r\n        setIsLoading((prevState) => {\r\n          if (prevState) {\r\n            return false;\r\n          }\r\n          return prevState;\r\n        });\r\n      }\r\n    };\r\n\r\n    let unsubscribe: (() => void) | undefined;\r\n    let timer: number;\r\n\r\n    if (lazy && isLoading) {\r\n      // If lazy mode is enabled, listen to when we enter screens\r\n      unsubscribe = addEnterListener(handleEnter);\r\n    } else if (isLoading) {\r\n      // If lazy mode is not enabled, render the scene with a delay if not loaded already\r\n      // This improves the initial startup time as the scene is no longer blocking\r\n      timer = setTimeout(() => setIsLoading(false), 0);\r\n    }\r\n\r\n    return () => {\r\n      unsubscribe?.();\r\n      clearTimeout(timer);\r\n    };\r\n  }, [addEnterListener, index, isLoading, lazy]);\r\n\r\n  const focused = navigationState.index === index;\r\n\r\n  return (\r\n    <View\r\n      accessibilityElementsHidden={!focused}\r\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\r\n      style={[\r\n        styles.route,\r\n        // If we don't have the layout yet, make the focused screen fill the container\r\n        // This avoids delay before we are able to render pages side by side\r\n        layout.width\r\n          ? { width: layout.width }\r\n          : focused\r\n          ? StyleSheet.absoluteFill\r\n          : null,\r\n        style,\r\n      ]}\r\n    >\r\n      {\r\n        // Only render the route only if it's either focused or layout is available\r\n        // When layout is not available, we must not render unfocused routes\r\n        // so that the focused route can fill the screen\r\n        focused || layout.width ? children({ loading: isLoading }) : null\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  route: {\r\n    flex: 1,\r\n    overflow: 'hidden',\r\n  },\r\n});\r\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAoB9B,OAAO,SAASC,SAASA,CAAAC,IAAA,EASZ;EAAA,IARXC,QAAQ,GAQCD,IAAA,CARTC,QAAQ;IACRC,eAAe,GAONF,IAAA,CAPTE,eAAe;IACfC,IAAI,GAMKH,IAAA,CANTG,IAAI;IACJC,MAAM,GAKGJ,IAAA,CALTI,MAAM;IACNC,KAAK,GAIIL,IAAA,CAJTK,KAAK;IACLC,mBAAmB,GAGVN,IAAA,CAHTM,mBAAmB;IACnBC,gBAAgB,GAEPP,IAAA,CAFTO,gBAAgB;IAChBC,KAAA,GACSR,IAAA,CADTQ,KAAA;EAEA,IAAAC,eAAA,GAAkCb,KAAK,CAACc,QAAQ,CAC9CC,IAAI,CAACC,GAAG,CAACV,eAAe,CAACG,KAAK,GAAGA,KAAK,CAAC,GAAGC,mBAAmB,CAC9D;IAAAO,gBAAA,GAAAC,cAAA,CAAAL,eAAA;IAFMM,SAAS,GAAAF,gBAAA;IAAEG,YAAY,GAAAH,gBAAA;EAI9B,IACEE,SAAS,IACTJ,IAAI,CAACC,GAAG,CAACV,eAAe,CAACG,KAAK,GAAGA,KAAK,CAAC,IAAIC,mBAAmB,EAC9D;IAEAU,YAAY,CAAC,KAAK,CAAC;EACrB;EAEApB,KAAK,CAACqB,SAAS,CAAC,YAAM;IACpB,IAAMC,WAAW,GAAI,SAAfA,WAAWA,CAAIC,KAAa,EAAK;MAErC,IAAIA,KAAK,KAAKd,KAAK,EAAE;QACnBW,YAAY,CAAE,UAAAI,SAAS,EAAK;UAC1B,IAAIA,SAAS,EAAE;YACb,OAAO,KAAK;UACd;UACA,OAAOA,SAAS;QAClB,CAAC,CAAC;MACJ;IACF,CAAC;IAED,IAAIC,WAAqC;IACzC,IAAIC,KAAa;IAEjB,IAAInB,IAAI,IAAIY,SAAS,EAAE;MAErBM,WAAW,GAAGd,gBAAgB,CAACW,WAAW,CAAC;IAC7C,CAAC,MAAM,IAAIH,SAAS,EAAE;MAGpBO,KAAK,GAAGC,UAAU,CAAC;QAAA,OAAMP,YAAY,CAAC,KAAK,CAAC;MAAA,GAAE,CAAC,CAAC;IAClD;IAEA,OAAO,YAAM;MAAA,IAAAQ,YAAA;MACX,CAAAA,YAAA,GAAAH,WAAW,cAAAG,YAAA,uBAAXA,YAAA,EAAe;MACfC,YAAY,CAACH,KAAK,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACf,gBAAgB,EAAEF,KAAK,EAAEU,SAAS,EAAEZ,IAAI,CAAC,CAAC;EAE9C,IAAMuB,OAAO,GAAGxB,eAAe,CAACG,KAAK,KAAKA,KAAK;EAE/C,OACET,KAAA,CAAA+B,aAAA,CAAC7B,IAAI;IACH8B,2BAA2B,EAAE,CAACF,OAAQ;IACtCG,yBAAyB,EAAEH,OAAO,GAAG,MAAM,GAAG,qBAAsB;IACpElB,KAAK,EAAE,CACLsB,MAAM,CAACC,KAAK,EAGZ3B,MAAM,CAAC4B,KAAK,GACR;MAAEA,KAAK,EAAE5B,MAAM,CAAC4B;IAAM,CAAC,GACvBN,OAAO,GACP7B,UAAU,CAACoC,YAAY,GACvB,IAAI,EACRzB,KAAK;EACL,GAMAkB,OAAO,IAAItB,MAAM,CAAC4B,KAAK,GAAG/B,QAAQ,CAAC;IAAEiC,OAAO,EAAEnB;EAAU,CAAC,CAAC,GAAG,IAAI,CAE9D;AAEX;AAEA,IAAMe,MAAM,GAAGjC,UAAU,CAACsC,MAAM,CAAC;EAC/BJ,KAAK,EAAE;IACLK,IAAI,EAAE,CAAC;IACPC,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}