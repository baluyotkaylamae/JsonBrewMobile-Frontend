{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\nexport var SessionUrlProvider = function () {\n  function SessionUrlProvider() {\n    _classCallCheck(this, SessionUrlProvider);\n  }\n  _createClass(SessionUrlProvider, [{\n    key: \"getDefaultReturnUrl\",\n    value: function getDefaultReturnUrl(urlPath, options) {\n      var _options$scheme;\n      var queryParams = SessionUrlProvider.getHostAddressQueryParams();\n      var path = SessionUrlProvider.SESSION_PATH;\n      if (urlPath) {\n        path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n      }\n      return Linking.createURL(path, {\n        scheme: (_options$scheme = options == null ? void 0 : options.scheme) != null ? _options$scheme : Linking.resolveScheme({\n          isSilent: true\n        }),\n        queryParams: queryParams,\n        isTripleSlashed: options == null ? void 0 : options.isTripleSlashed\n      });\n    }\n  }, {\n    key: \"getStartUrl\",\n    value: function getStartUrl(authUrl, returnUrl, projectNameForProxy) {\n      if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n        return '';\n      }\n      var queryString = new URLSearchParams({\n        authUrl: authUrl,\n        returnUrl: returnUrl\n      });\n      return `${this.getRedirectUrl({\n        projectNameForProxy: projectNameForProxy\n      })}/start?${queryString}`;\n    }\n  }, {\n    key: \"getRedirectUrl\",\n    value: function getRedirectUrl(options) {\n      var _Constants$expoConfig;\n      if (Platform.OS === 'web') {\n        if (Platform.isDOMAvailable) {\n          return [window.location.origin, options.urlPath].filter(Boolean).join('/');\n        } else {\n          return '';\n        }\n      }\n      var legacyExpoProjectFullName = options.projectNameForProxy || ((_Constants$expoConfig = Constants.expoConfig) == null ? void 0 : _Constants$expoConfig.originalFullName);\n      if (!legacyExpoProjectFullName) {\n        var nextSteps = '';\n        if (__DEV__) {\n          if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n            nextSteps = ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n          } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n            nextSteps = ' Please report this as a bug with the contents of `expo config --type public`.';\n          }\n        }\n        if (Constants.manifest2) {\n          nextSteps = ' Prefer AuthRequest in combination with an Expo Development Client build of your application.' + ' To continue using the AuthSession proxy, specify the project full name (@owner/slug) using the projectNameForProxy option.';\n        }\n        throw new Error('Cannot use the AuthSession proxy because the project full name is not defined.' + nextSteps);\n      }\n      var redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectFullName}`;\n      if (__DEV__) {\n        SessionUrlProvider.warnIfAnonymous(legacyExpoProjectFullName, redirectUrl);\n      }\n      return redirectUrl;\n    }\n  }], [{\n    key: \"getHostAddressQueryParams\",\n    value: function getHostAddressQueryParams() {\n      var _Constants$expoConfig2, _hostUri;\n      var hostUri = (_Constants$expoConfig2 = Constants.expoConfig) == null ? void 0 : _Constants$expoConfig2.hostUri;\n      if (!hostUri && (ExecutionEnvironment.StoreClient === Constants.executionEnvironment || Linking.resolveScheme({}))) {\n        if (!Constants.linkingUri) {\n          hostUri = '';\n        } else {\n          hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n        }\n      }\n      if (!hostUri) {\n        return undefined;\n      }\n      var uriParts = (_hostUri = hostUri) == null ? void 0 : _hostUri.split('?');\n      try {\n        return Object.fromEntries(new URLSearchParams(uriParts == null ? void 0 : uriParts[1]));\n      } catch (_unused) {}\n      return undefined;\n    }\n  }, {\n    key: \"warnIfAnonymous\",\n    value: function warnIfAnonymous(id, url) {\n      if (id.startsWith('@anonymous/')) {\n        console.warn(`You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`);\n      }\n    }\n  }, {\n    key: \"removeScheme\",\n    value: function removeScheme(url) {\n      return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n    }\n  }, {\n    key: \"removeLeadingSlash\",\n    value: function removeLeadingSlash(url) {\n      return url.replace(/^\\//, '');\n    }\n  }]);\n  return SessionUrlProvider;\n}();\nSessionUrlProvider.BASE_URL = `https://auth.expo.io`;\nSessionUrlProvider.SESSION_PATH = 'expo-auth-session';\nexport default new SessionUrlProvider();","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","Platform","SessionUrlProvider","_classCallCheck","_createClass","key","value","getDefaultReturnUrl","urlPath","options","_options$scheme","queryParams","getHostAddressQueryParams","path","SESSION_PATH","removeLeadingSlash","filter","Boolean","join","createURL","scheme","resolveScheme","isSilent","isTripleSlashed","getStartUrl","authUrl","returnUrl","projectNameForProxy","OS","isDOMAvailable","queryString","URLSearchParams","getRedirectUrl","_Constants$expoConfig","window","location","origin","legacyExpoProjectFullName","expoConfig","originalFullName","nextSteps","__DEV__","executionEnvironment","Bare","StoreClient","manifest2","Error","redirectUrl","BASE_URL","warnIfAnonymous","_Constants$expoConfig2","_hostUri","hostUri","linkingUri","removeScheme","replace","undefined","uriParts","split","Object","fromEntries","_unused","id","url","startsWith","console","warn"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\expo-auth-session\\src\\SessionUrlProvider.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Linking from 'expo-linking';\nimport { Platform } from 'expo-modules-core';\n\nexport class SessionUrlProvider {\n  private static readonly BASE_URL = `https://auth.expo.io`;\n  private static readonly SESSION_PATH = 'expo-auth-session';\n\n  getDefaultReturnUrl(\n    urlPath?: string,\n    options?: Omit<Linking.CreateURLOptions, 'queryParams'>\n  ): string {\n    const queryParams = SessionUrlProvider.getHostAddressQueryParams();\n    let path = SessionUrlProvider.SESSION_PATH;\n    if (urlPath) {\n      path = [path, SessionUrlProvider.removeLeadingSlash(urlPath)].filter(Boolean).join('/');\n    }\n\n    return Linking.createURL(path, {\n      // The redirect URL doesn't matter for the proxy as long as it's valid, so silence warnings if needed.\n      scheme: options?.scheme ?? Linking.resolveScheme({ isSilent: true }),\n      queryParams,\n      isTripleSlashed: options?.isTripleSlashed,\n    });\n  }\n\n  getStartUrl(authUrl: string, returnUrl: string, projectNameForProxy: string | undefined): string {\n    if (Platform.OS === 'web' && !Platform.isDOMAvailable) {\n      // Return nothing in SSR envs\n      return '';\n    }\n    const queryString = new URLSearchParams({\n      authUrl,\n      returnUrl,\n    });\n\n    return `${this.getRedirectUrl({ projectNameForProxy })}/start?${queryString}`;\n  }\n\n  getRedirectUrl(options: { projectNameForProxy?: string; urlPath?: string }): string {\n    if (Platform.OS === 'web') {\n      if (Platform.isDOMAvailable) {\n        return [window.location.origin, options.urlPath].filter(Boolean).join('/');\n      } else {\n        // Return nothing in SSR envs\n        return '';\n      }\n    }\n\n    const legacyExpoProjectFullName =\n      options.projectNameForProxy || Constants.expoConfig?.originalFullName;\n\n    if (!legacyExpoProjectFullName) {\n      let nextSteps = '';\n      if (__DEV__) {\n        if (Constants.executionEnvironment === ExecutionEnvironment.Bare) {\n          nextSteps =\n            ' Please ensure you have the latest version of expo-constants installed and rebuild your native app. You can verify that originalFullName is defined by running `expo config --type public` and inspecting the output.';\n        } else if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n          nextSteps =\n            ' Please report this as a bug with the contents of `expo config --type public`.';\n        }\n      }\n\n      if (Constants.manifest2) {\n        nextSteps =\n          ' Prefer AuthRequest in combination with an Expo Development Client build of your application.' +\n          ' To continue using the AuthSession proxy, specify the project full name (@owner/slug) using the projectNameForProxy option.';\n      }\n\n      throw new Error(\n        'Cannot use the AuthSession proxy because the project full name is not defined.' + nextSteps\n      );\n    }\n\n    const redirectUrl = `${SessionUrlProvider.BASE_URL}/${legacyExpoProjectFullName}`;\n    if (__DEV__) {\n      SessionUrlProvider.warnIfAnonymous(legacyExpoProjectFullName, redirectUrl);\n      // TODO: Verify with the dev server that the manifest is up to date.\n    }\n    return redirectUrl;\n  }\n\n  private static getHostAddressQueryParams(): Record<string, string> | undefined {\n    let hostUri: string | undefined = Constants.expoConfig?.hostUri;\n    if (\n      !hostUri &&\n      (ExecutionEnvironment.StoreClient === Constants.executionEnvironment ||\n        Linking.resolveScheme({}))\n    ) {\n      if (!Constants.linkingUri) {\n        hostUri = '';\n      } else {\n        // we're probably not using up-to-date xdl, so just fake it for now\n        // we have to remove the /--/ on the end since this will be inserted again later\n        hostUri = SessionUrlProvider.removeScheme(Constants.linkingUri).replace(/\\/--(\\/.*)?$/, '');\n      }\n    }\n\n    if (!hostUri) {\n      return undefined;\n    }\n\n    const uriParts = hostUri?.split('?');\n    try {\n      return Object.fromEntries(\n        // @ts-ignore: [Symbol.iterator] is indeed, available on every platform.\n        new URLSearchParams(uriParts?.[1])\n      );\n    } catch {}\n\n    return undefined;\n  }\n\n  private static warnIfAnonymous(id, url): void {\n    if (id.startsWith('@anonymous/')) {\n      console.warn(\n        `You are not currently signed in to Expo on your development machine. As a result, the redirect URL for AuthSession will be \"${url}\". If you are using an OAuth provider that requires adding redirect URLs to an allow list, we recommend that you do not add this URL -- instead, you should sign in to Expo to acquire a unique redirect URL. Additionally, if you do decide to publish this app using Expo, you will need to register an account to do it.`\n      );\n    }\n  }\n\n  private static removeScheme(url: string) {\n    return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n  }\n\n  private static removeLeadingSlash(url: string) {\n    return url.replace(/^\\//, '');\n  }\n}\n\nexport default new SessionUrlProvider();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}