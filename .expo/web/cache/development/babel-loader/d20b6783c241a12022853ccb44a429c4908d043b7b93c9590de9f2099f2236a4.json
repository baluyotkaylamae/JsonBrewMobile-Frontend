{"ast":null,"code":"'use strict';\n\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _excluded = [\"useSectionList\", \"renderListView\"];\nvar _jsxFileName = \"C:\\\\JsonMobile\\\\frontend\\\\node_modules\\\\react-native-swipe-list-view\\\\components\\\\SwipeListView.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport SwipeRow from './SwipeRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar SwipeListView = function (_PureComponent) {\n  _inherits(SwipeListView, _PureComponent);\n  function SwipeListView(props) {\n    var _this;\n    _classCallCheck(this, SwipeListView);\n    _this = _callSuper(this, SwipeListView, [props]);\n    _this._renderItem = function (rowData) {\n      return _this.renderItem(rowData, _this._rows);\n    };\n    _this._onRef = function (c) {\n      return _this.setRefs(c);\n    };\n    _this._rows = {};\n    _this.openCellKey = null;\n    _this.listViewProps = {};\n    if (Platform.OS === 'ios') {\n      _this.yScrollOffset = 0;\n      _this.layoutHeight = 0;\n      _this.listViewProps = {\n        onLayout: function onLayout(e) {\n          return _this.onLayout(e);\n        },\n        onContentSizeChange: function onContentSizeChange(w, h) {\n          return _this.onContentSizeChange(w, h);\n        }\n      };\n    }\n    _this._onScroll = _this.onScroll.bind(_assertThisInitialized(_this));\n    if (_this.props.onScroll && typeof _this.props.onScroll === 'object') {\n      _this.props.onScroll.__addListener(_this._onScroll);\n      _this._onScroll = _this.props.onScroll;\n    }\n    return _this;\n  }\n  _createClass(SwipeListView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.refreshing) {\n        this.safeCloseOpenRow();\n      }\n    }\n  }, {\n    key: \"setScrollEnabled\",\n    value: function setScrollEnabled(enable) {\n      if (this.props.scrollEnabled === false) {\n        return;\n      }\n      if (this._listView && this._listView.setNativeProps) {\n        this._listView.setNativeProps({\n          scrollEnabled: enable\n        });\n      } else if (this._listView && this._listView.getScrollResponder) {\n        var scrollResponder = this._listView.getScrollResponder();\n        scrollResponder.setNativeProps && scrollResponder.setNativeProps({\n          scrollEnabled: enable\n        });\n      }\n      this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\n    }\n  }, {\n    key: \"safeCloseOpenRow\",\n    value: function safeCloseOpenRow() {\n      var rowRef = this._rows[this.openCellKey];\n      if (rowRef && rowRef.closeRow) {\n        this._rows[this.openCellKey].closeRow();\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureBegan\",\n    value: function rowSwipeGestureBegan(key) {\n      if (this.props.closeOnRowBeginSwipe && this.openCellKey && this.openCellKey !== key) {\n        this.safeCloseOpenRow();\n      }\n      if (this.props.swipeGestureBegan) {\n        this.props.swipeGestureBegan(key);\n      }\n    }\n  }, {\n    key: \"rowSwipeGestureEnded\",\n    value: function rowSwipeGestureEnded(key, data) {\n      if (this.props.swipeGestureEnded) {\n        this.props.swipeGestureEnded(key, data);\n      }\n    }\n  }, {\n    key: \"onRowOpen\",\n    value: function onRowOpen(key, toValue) {\n      if (this.openCellKey && this.openCellKey !== key && this.props.closeOnRowOpen && !this.props.closeOnRowBeginSwipe) {\n        this.safeCloseOpenRow();\n      }\n      this.openCellKey = key;\n      this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.openCellKey) {\n        if (this.props.closeOnRowPress) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n    }\n  }, {\n    key: \"onScroll\",\n    value: function onScroll(e) {\n      if (Platform.OS === 'ios') {\n        this.yScrollOffset = e.nativeEvent.contentOffset.y;\n      }\n      if (this.openCellKey) {\n        if (this.props.closeOnScroll) {\n          this.safeCloseOpenRow();\n          this.openCellKey = null;\n        }\n      }\n      typeof this.props.onScroll === 'function' && this.props.onScroll(e);\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      this.layoutHeight = e.nativeEvent.layout.height;\n      this.props.onLayout && this.props.onLayout(e);\n    }\n  }, {\n    key: \"onContentSizeChange\",\n    value: function onContentSizeChange(w, h) {\n      var height = h - this.layoutHeight;\n      if (this.yScrollOffset >= height && height > 0) {\n        if (this._listView instanceof FlatList) {\n          this._listView && this._listView.scrollToEnd();\n        } else if (this._listView instanceof SectionList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        } else if (this._listView instanceof Animated.FlatList) {\n          this._listView.scrollToEnd && this._listView.scrollToEnd();\n        }\n      }\n      this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\n    }\n  }, {\n    key: \"setRefs\",\n    value: function setRefs(ref) {\n      this._listView = ref;\n      if (typeof this.props.listViewRef === 'function') {\n        this.props.listViewRef && this.props.listViewRef(ref);\n      } else if (typeof this.props.listViewRef === 'object') {\n        if (Object.keys(this.props.listViewRef).includes('current')) {\n          this.props.listViewRef.current = ref;\n        }\n      }\n    }\n  }, {\n    key: \"closeAllOpenRows\",\n    value: function closeAllOpenRows() {\n      var _this2 = this;\n      Object.keys(this._rows).forEach(function (rowKey) {\n        var row = _this2._rows[rowKey];\n        if (row) {\n          var rowTranslateX = Math.round(row.currentTranslateX || 0);\n          if (row.closeRow && rowTranslateX !== 0) {\n            row.closeRow();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"manuallyOpenAllRows\",\n    value: function manuallyOpenAllRows(toValue) {\n      var _this3 = this;\n      Object.keys(this._rows).forEach(function (rowKey) {\n        var row = _this3._rows[rowKey];\n        if (row && row.manuallySwipeRow) {\n          row.manuallySwipeRow(toValue);\n        }\n      });\n    }\n  }, {\n    key: \"renderCell\",\n    value: function renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\n      var _this4 = this;\n      if (!HiddenComponent) {\n        return React.cloneElement(VisibleComponent, _objectSpread(_objectSpread({}, VisibleComponent.props), {}, {\n          ref: function ref(row) {\n            return _this4._rows[key] = row;\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this4.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this4.onRowPress();\n          },\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this4.setScrollEnabled(enable);\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this4.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this4.rowSwipeGestureEnded(key, data);\n          }\n        }));\n      } else {\n        return _jsxDEV(SwipeRow, {\n          onSwipeValueChange: this.props.onSwipeValueChange ? function (data) {\n            return _this4.props.onSwipeValueChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          ref: function ref(row) {\n            return _this4._rows[key] = row;\n          },\n          swipeGestureBegan: function swipeGestureBegan() {\n            return _this4.rowSwipeGestureBegan(key);\n          },\n          swipeGestureEnded: function swipeGestureEnded(_, data) {\n            return _this4.rowSwipeGestureEnded(key, data);\n          },\n          onRowOpen: function onRowOpen(toValue) {\n            return _this4.onRowOpen(key, toValue);\n          },\n          onRowDidOpen: function onRowDidOpen(toValue) {\n            return _this4.props.onRowDidOpen && _this4.props.onRowDidOpen(key, _this4._rows, toValue);\n          },\n          onRowClose: function onRowClose() {\n            return _this4.props.onRowClose && _this4.props.onRowClose(key, _this4._rows);\n          },\n          onRowDidClose: function onRowDidClose() {\n            return _this4.props.onRowDidClose && _this4.props.onRowDidClose(key, _this4._rows);\n          },\n          onRowPress: function onRowPress() {\n            return _this4.onRowPress(key);\n          },\n          leftActivationValue: item.leftActivationValue || this.props.leftActivationValue,\n          rightActivationValue: item.rightActivationValue || this.props.rightActivationValue,\n          leftActionValue: item.leftActionValue || this.props.leftActionValue || 0,\n          rightActionValue: item.rightActionValue || this.props.rightActionValue || 0,\n          initialLeftActionState: item.initialLeftActionState || this.props.initialLeftActionState,\n          initialRightActionState: item.initialRightActionState || this.props.initialRightActionState,\n          onLeftAction: function onLeftAction() {\n            return item.onLeftAction || _this4.props.onLeftAction && _this4.props.onLeftAction(key, _this4._rows);\n          },\n          onRightAction: function onRightAction() {\n            return item.onRightAction || _this4.props.onRightAction && _this4.props.onRightAction(key, _this4._rows);\n          },\n          onLeftActionStatusChange: this.props.onLeftActionStatusChange ? function (data) {\n            return _this4.props.onLeftActionStatusChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          onRightActionStatusChange: this.props.onRightActionStatusChange ? function (data) {\n            return _this4.props.onRightActionStatusChange(_objectSpread(_objectSpread({}, data), {}, {\n              key: key\n            }));\n          } : null,\n          shouldItemUpdate: this.props.shouldItemUpdate ? function (currentItem, newItem) {\n            return _this4.props.shouldItemUpdate(currentItem, newItem);\n          } : null,\n          setScrollEnabled: function setScrollEnabled(enable) {\n            return _this4.setScrollEnabled(enable);\n          },\n          leftOpenValue: item.leftOpenValue || this.props.leftOpenValue,\n          rightOpenValue: item.rightOpenValue || this.props.rightOpenValue,\n          closeOnRowPress: item.closeOnRowPress || this.props.closeOnRowPress,\n          disableLeftSwipe: item.disableLeftSwipe || this.props.disableLeftSwipe,\n          disableRightSwipe: item.disableRightSwipe || this.props.disableRightSwipe,\n          stopLeftSwipe: item.stopLeftSwipe || this.props.stopLeftSwipe,\n          stopRightSwipe: item.stopRightSwipe || this.props.stopRightSwipe,\n          recalculateHiddenLayout: this.props.recalculateHiddenLayout,\n          disableHiddenLayoutCalculation: this.props.disableHiddenLayoutCalculation,\n          style: this.props.swipeRowStyle,\n          preview: shouldPreviewRow,\n          previewDuration: this.props.previewDuration,\n          previewOpenDelay: this.props.previewOpenDelay,\n          previewOpenValue: this.props.previewOpenValue,\n          previewRepeat: this.props.previewRepeat,\n          previewRepeatDelay: this.props.previewRepeatDelay,\n          tension: this.props.tension,\n          restSpeedThreshold: this.props.restSpeedThreshold,\n          restDisplacementThreshold: this.props.restDisplacementThreshold,\n          friction: this.props.friction,\n          directionalDistanceChangeThreshold: this.props.directionalDistanceChangeThreshold,\n          swipeToOpenPercent: this.props.swipeToOpenPercent,\n          swipeToOpenVelocityContribution: this.props.swipeToOpenVelocityContribution,\n          swipeToClosePercent: this.props.swipeToClosePercent,\n          item: item,\n          useNativeDriver: this.props.useNativeDriver,\n          onPreviewEnd: this.props.onPreviewEnd,\n          children: [HiddenComponent, VisibleComponent]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this);\n      }\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(rowData, secId, rowId, rowMap) {\n      var key = `${secId}${rowId}`;\n      var Component = this.props.renderRow(rowData, secId, rowId, rowMap);\n      var HiddenComponent = this.props.renderHiddenRow && this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\n      var previewRowId = this.props.dataSource && this.props.dataSource.getRowIDForFlatIndex(this.props.previewRowIndex || 0);\n      var shouldPreviewRow = (this.props.previewFirstRow || this.props.previewRowIndex) && rowId === previewRowId;\n      return this.renderCell(Component, HiddenComponent, key, rowData, shouldPreviewRow);\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(rowData, rowMap) {\n      var Component = this.props.renderItem(rowData, rowMap);\n      var HiddenComponent = this.props.renderHiddenItem && this.props.renderHiddenItem(rowData, rowMap);\n      var item = rowData.item,\n        index = rowData.index;\n      var key = item.key;\n      if (this.props.keyExtractor) {\n        key = this.props.keyExtractor(item, index);\n      }\n      var shouldPreviewRow = typeof key !== 'undefined' && this.props.previewRowKey === key;\n      return this.renderCell(Component, HiddenComponent, key, item, shouldPreviewRow);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        useSectionList = _this$props.useSectionList,\n        renderListView = _this$props.renderListView,\n        props = _objectWithoutProperties(_this$props, _excluded);\n      if (renderListView) {\n        var useRenderRow = !!this.props.renderRow;\n        return renderListView(props, this.setRefs.bind(this), this.onScroll.bind(this), useRenderRow ? this.renderRow.bind(this, this._rows) : this.renderItem.bind(this));\n      }\n      if (useSectionList) {\n        var _ListComponent = this.props.useAnimatedList ? Animated.SectionList : SectionList;\n        return _jsxDEV(_ListComponent, _objectSpread(_objectSpread(_objectSpread({}, props), this.listViewProps), {}, {\n          ref: this._onRef,\n          onScroll: this._onScroll,\n          renderItem: this._renderItem\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 17\n        }, this);\n      }\n      var ListComponent = this.props.useAnimatedList ? Animated.FlatList : FlatList;\n      return _jsxDEV(ListComponent, _objectSpread(_objectSpread(_objectSpread({}, props), this.listViewProps), {}, {\n        ref: this._onRef,\n        onScroll: this._onScroll,\n        renderItem: this._renderItem\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n  return SwipeListView;\n}(PureComponent);\nSwipeListView.propTypes = {\n  renderListView: PropTypes.func,\n  renderItem: PropTypes.func,\n  renderHiddenItem: PropTypes.func,\n  leftOpenValue: PropTypes.number,\n  rightOpenValue: PropTypes.number,\n  leftActivationValue: PropTypes.number,\n  rightActivationValue: PropTypes.number,\n  leftActionValue: PropTypes.number,\n  rightActionValue: PropTypes.number,\n  initialLeftActionState: PropTypes.bool,\n  initialRightActionState: PropTypes.bool,\n  stopLeftSwipe: PropTypes.number,\n  stopRightSwipe: PropTypes.number,\n  closeOnScroll: PropTypes.bool,\n  closeOnRowPress: PropTypes.bool,\n  closeOnRowBeginSwipe: PropTypes.bool,\n  closeOnRowOpen: PropTypes.bool,\n  disableLeftSwipe: PropTypes.bool,\n  disableRightSwipe: PropTypes.bool,\n  recalculateHiddenLayout: PropTypes.bool,\n  disableHiddenLayoutCalculation: PropTypes.bool,\n  swipeGestureBegan: PropTypes.func,\n  swipeGestureEnded: PropTypes.func,\n  onRowOpen: PropTypes.func,\n  onRowDidOpen: PropTypes.func,\n  onRowClose: PropTypes.func,\n  onRowDidClose: PropTypes.func,\n  onLeftAction: PropTypes.func,\n  onRightAction: PropTypes.func,\n  onLeftActionStatusChange: PropTypes.func,\n  onRightActionStatusChange: PropTypes.func,\n  onScrollEnabled: PropTypes.func,\n  onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  swipeRowStyle: PropTypes.object,\n  listViewRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  previewRowKey: PropTypes.string,\n  previewFirstRow: PropTypes.bool,\n  previewRowIndex: PropTypes.number,\n  previewDuration: PropTypes.number,\n  previewRepeat: PropTypes.bool,\n  previewRepeatDelay: PropTypes.number,\n  previewOpenDelay: PropTypes.number,\n  previewOpenValue: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  restSpeedThreshold: PropTypes.number,\n  restDisplacementThreshold: PropTypes.number,\n  directionalDistanceChangeThreshold: PropTypes.number,\n  swipeToOpenPercent: PropTypes.number,\n  swipeToOpenVelocityContribution: PropTypes.number,\n  swipeToClosePercent: PropTypes.number,\n  shouldItemUpdate: PropTypes.func,\n  onSwipeValueChange: PropTypes.func,\n  useNativeDriver: PropTypes.bool,\n  useAnimatedList: PropTypes.bool,\n  keyExtractor: PropTypes.func,\n  onPreviewEnd: PropTypes.func\n};\nSwipeListView.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowBeginSwipe: false,\n  closeOnScroll: true,\n  closeOnRowPress: true,\n  closeOnRowOpen: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  previewFirstRow: false,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000,\n  useAnimatedList: false\n};\nexport default SwipeListView;","map":{"version":3,"names":["_objectWithoutProperties","_defineProperty","_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","_excluded","_jsxFileName","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_callSuper","_isNativeReflectConstruct","Reflect","construct","constructor","Boolean","prototype","valueOf","call","React","PureComponent","PropTypes","Animated","FlatList","Platform","SectionList","SwipeRow","jsxDEV","_jsxDEV","SwipeListView","_PureComponent","props","_this","_renderItem","rowData","renderItem","_rows","_onRef","c","setRefs","openCellKey","listViewProps","OS","yScrollOffset","layoutHeight","onLayout","onContentSizeChange","w","h","_onScroll","onScroll","bind","__addListener","key","value","componentDidUpdate","refreshing","safeCloseOpenRow","setScrollEnabled","enable","scrollEnabled","_listView","setNativeProps","getScrollResponder","scrollResponder","onScrollEnabled","rowRef","closeRow","rowSwipeGestureBegan","closeOnRowBeginSwipe","swipeGestureBegan","rowSwipeGestureEnded","data","swipeGestureEnded","onRowOpen","toValue","closeOnRowOpen","onRowPress","closeOnRowPress","nativeEvent","contentOffset","y","closeOnScroll","layout","height","scrollToEnd","ref","listViewRef","includes","current","closeAllOpenRows","_this2","rowKey","row","rowTranslateX","Math","round","currentTranslateX","manuallyOpenAllRows","_this3","manuallySwipeRow","renderCell","VisibleComponent","HiddenComponent","item","shouldPreviewRow","_this4","cloneElement","onRowDidOpen","onRowClose","onRowDidClose","_","onSwipeValueChange","leftActivationValue","rightActivationValue","leftActionValue","rightActionValue","initialLeftActionState","initialRightActionState","onLeftAction","onRightAction","onLeftActionStatusChange","onRightActionStatusChange","shouldItemUpdate","currentItem","newItem","leftOpenValue","rightOpenValue","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","recalculateHiddenLayout","disableHiddenLayoutCalculation","style","swipeRowStyle","preview","previewDuration","previewOpenDelay","previewOpenValue","previewRepeat","previewRepeatDelay","tension","restSpeedThreshold","restDisplacementThreshold","friction","directionalDistanceChangeThreshold","swipeToOpenPercent","swipeToOpenVelocityContribution","swipeToClosePercent","useNativeDriver","onPreviewEnd","children","fileName","lineNumber","columnNumber","renderRow","secId","rowId","rowMap","Component","renderHiddenRow","previewRowId","dataSource","getRowIDForFlatIndex","previewRowIndex","previewFirstRow","renderHiddenItem","index","keyExtractor","previewRowKey","render","_this$props","useSectionList","renderListView","useRenderRow","ListComponent","useAnimatedList","_ListComponent","propTypes","func","number","bool","oneOfType","object","string","defaultProps"],"sources":["C:/JsonMobile/frontend/node_modules/react-native-swipe-list-view/components/SwipeListView.js"],"sourcesContent":["'use strict';\r\n\r\nimport React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animated, FlatList, Platform, SectionList } from 'react-native';\r\n\r\nimport SwipeRow from './SwipeRow';\r\n\r\n/**\r\n * ListView that renders SwipeRows.\r\n */\r\nclass SwipeListView extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this._rows = {};\r\n        this.openCellKey = null;\r\n        this.listViewProps = {};\r\n        if (Platform.OS === 'ios') {\r\n            // Keep track of scroll offset and layout changes on iOS to be able to handle\r\n            // https://github.com/jemise111/react-native-swipe-list-view/issues/109\r\n            this.yScrollOffset = 0;\r\n            this.layoutHeight = 0;\r\n            this.listViewProps = {\r\n                onLayout: e => this.onLayout(e),\r\n                onContentSizeChange: (w, h) => this.onContentSizeChange(w, h),\r\n            };\r\n        }\r\n        this._onScroll = this.onScroll.bind(this);\r\n        if (this.props.onScroll && typeof this.props.onScroll === 'object') {\r\n            // Animated.event\r\n            this.props.onScroll.__addListener(this._onScroll);\r\n            this._onScroll = this.props.onScroll;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.refreshing) {\r\n            this.safeCloseOpenRow();\r\n        }\r\n    }\r\n\r\n    setScrollEnabled(enable) {\r\n        if (this.props.scrollEnabled === false) {\r\n            return;\r\n        }\r\n        // Due to multiple issues reported across different versions of RN\r\n        // We do this in the safest way possible...\r\n        if (this._listView && this._listView.setNativeProps) {\r\n            this._listView.setNativeProps({ scrollEnabled: enable });\r\n        } else if (this._listView && this._listView.getScrollResponder) {\r\n            const scrollResponder = this._listView.getScrollResponder();\r\n            scrollResponder.setNativeProps &&\r\n                scrollResponder.setNativeProps({ scrollEnabled: enable });\r\n        }\r\n        this.props.onScrollEnabled && this.props.onScrollEnabled(enable);\r\n    }\r\n\r\n    safeCloseOpenRow() {\r\n        const rowRef = this._rows[this.openCellKey];\r\n        if (rowRef && rowRef.closeRow) {\r\n            this._rows[this.openCellKey].closeRow();\r\n        }\r\n    }\r\n\r\n    rowSwipeGestureBegan(key) {\r\n        if (\r\n            this.props.closeOnRowBeginSwipe &&\r\n            this.openCellKey &&\r\n            this.openCellKey !== key\r\n        ) {\r\n            this.safeCloseOpenRow();\r\n        }\r\n\r\n        if (this.props.swipeGestureBegan) {\r\n            this.props.swipeGestureBegan(key);\r\n        }\r\n    }\r\n\r\n    rowSwipeGestureEnded(key, data) {\r\n        if (this.props.swipeGestureEnded) {\r\n            this.props.swipeGestureEnded(key, data);\r\n        }\r\n    }\r\n\r\n    onRowOpen(key, toValue) {\r\n        if (\r\n            this.openCellKey &&\r\n            this.openCellKey !== key &&\r\n            this.props.closeOnRowOpen &&\r\n            !this.props.closeOnRowBeginSwipe\r\n        ) {\r\n            this.safeCloseOpenRow();\r\n        }\r\n        this.openCellKey = key;\r\n        this.props.onRowOpen && this.props.onRowOpen(key, this._rows, toValue);\r\n    }\r\n\r\n    onRowPress() {\r\n        if (this.openCellKey) {\r\n            if (this.props.closeOnRowPress) {\r\n                this.safeCloseOpenRow();\r\n                this.openCellKey = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    onScroll(e) {\r\n        if (Platform.OS === 'ios') {\r\n            this.yScrollOffset = e.nativeEvent.contentOffset.y;\r\n        }\r\n        if (this.openCellKey) {\r\n            if (this.props.closeOnScroll) {\r\n                this.safeCloseOpenRow();\r\n                this.openCellKey = null;\r\n            }\r\n        }\r\n        typeof this.props.onScroll === 'function' && this.props.onScroll(e);\r\n    }\r\n\r\n    onLayout(e) {\r\n        this.layoutHeight = e.nativeEvent.layout.height;\r\n        this.props.onLayout && this.props.onLayout(e);\r\n    }\r\n\r\n    // When deleting rows on iOS, the list may end up being over-scrolled,\r\n    // which will prevent swiping any of the remaining rows. This triggers a scrollToEnd\r\n    // when that happens, which will make sure the list is kept in bounds.\r\n    // See: https://github.com/jemise111/react-native-swipe-list-view/issues/109\r\n    onContentSizeChange(w, h) {\r\n        const height = h - this.layoutHeight;\r\n        if (this.yScrollOffset >= height && height > 0) {\r\n            if (this._listView instanceof FlatList) {\r\n                this._listView && this._listView.scrollToEnd();\r\n            } else if (this._listView instanceof SectionList) {\r\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\r\n            } else if (this._listView instanceof Animated.FlatList) {\r\n                this._listView.scrollToEnd && this._listView.scrollToEnd();\r\n            }\r\n        }\r\n        this.props.onContentSizeChange && this.props.onContentSizeChange(w, h);\r\n    }\r\n\r\n    setRefs(ref) {\r\n        this._listView = ref;\r\n        if (typeof this.props.listViewRef === 'function') {\r\n            this.props.listViewRef && this.props.listViewRef(ref);\r\n        } else if (typeof this.props.listViewRef === 'object') {\r\n            if (Object.keys(this.props.listViewRef).includes('current')) {\r\n                this.props.listViewRef.current = ref;\r\n            }\r\n        }\r\n    }\r\n\r\n    closeAllOpenRows() {\r\n        Object.keys(this._rows).forEach(rowKey => {\r\n            const row = this._rows[rowKey];\r\n            if (row) {\r\n                const rowTranslateX = Math.round(row.currentTranslateX || 0);\r\n                if (row.closeRow && rowTranslateX !== 0) {\r\n                    row.closeRow();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    manuallyOpenAllRows(toValue) {\r\n        Object.keys(this._rows).forEach(rowKey => {\r\n            const row = this._rows[rowKey];\r\n            if (row && row.manuallySwipeRow) {\r\n                row.manuallySwipeRow(toValue);\r\n            }\r\n        });\r\n    }\r\n\r\n    renderCell(VisibleComponent, HiddenComponent, key, item, shouldPreviewRow) {\r\n        if (!HiddenComponent) {\r\n            return React.cloneElement(VisibleComponent, {\r\n                ...VisibleComponent.props,\r\n                ref: row => (this._rows[key] = row),\r\n                onRowOpen: toValue => this.onRowOpen(key, toValue),\r\n                onRowDidOpen: toValue =>\r\n                    this.props.onRowDidOpen &&\r\n                    this.props.onRowDidOpen(key, this._rows, toValue),\r\n                onRowClose: () =>\r\n                    this.props.onRowClose &&\r\n                    this.props.onRowClose(key, this._rows),\r\n                onRowDidClose: () =>\r\n                    this.props.onRowDidClose &&\r\n                    this.props.onRowDidClose(key, this._rows),\r\n                onRowPress: () => this.onRowPress(),\r\n                setScrollEnabled: enable => this.setScrollEnabled(enable),\r\n                swipeGestureBegan: () => this.rowSwipeGestureBegan(key),\r\n                swipeGestureEnded: (_, data) =>\r\n                    this.rowSwipeGestureEnded(key, data),\r\n            });\r\n        } else {\r\n            return (\r\n                <SwipeRow\r\n                    onSwipeValueChange={\r\n                        this.props.onSwipeValueChange\r\n                            ? data =>\r\n                                  this.props.onSwipeValueChange({\r\n                                      ...data,\r\n                                      key,\r\n                                  })\r\n                            : null\r\n                    }\r\n                    ref={row => (this._rows[key] = row)}\r\n                    swipeGestureBegan={() => this.rowSwipeGestureBegan(key)}\r\n                    swipeGestureEnded={(_, data) =>\r\n                        this.rowSwipeGestureEnded(key, data)\r\n                    }\r\n                    onRowOpen={toValue => this.onRowOpen(key, toValue)}\r\n                    onRowDidOpen={toValue =>\r\n                        this.props.onRowDidOpen &&\r\n                        this.props.onRowDidOpen(key, this._rows, toValue)\r\n                    }\r\n                    onRowClose={() =>\r\n                        this.props.onRowClose &&\r\n                        this.props.onRowClose(key, this._rows)\r\n                    }\r\n                    onRowDidClose={() =>\r\n                        this.props.onRowDidClose &&\r\n                        this.props.onRowDidClose(key, this._rows)\r\n                    }\r\n                    onRowPress={() => this.onRowPress(key)}\r\n                    leftActivationValue={\r\n                        item.leftActivationValue ||\r\n                        this.props.leftActivationValue\r\n                    }\r\n                    rightActivationValue={\r\n                        item.rightActivationValue ||\r\n                        this.props.rightActivationValue\r\n                    }\r\n                    leftActionValue={\r\n                        item.leftActionValue || this.props.leftActionValue || 0\r\n                    }\r\n                    rightActionValue={\r\n                        item.rightActionValue ||\r\n                        this.props.rightActionValue ||\r\n                        0\r\n                    }\r\n                    initialLeftActionState={\r\n                        item.initialLeftActionState ||\r\n                        this.props.initialLeftActionState\r\n                    }\r\n                    initialRightActionState={\r\n                        item.initialRightActionState ||\r\n                        this.props.initialRightActionState\r\n                    }\r\n                    onLeftAction={() =>\r\n                        item.onLeftAction ||\r\n                        (this.props.onLeftAction &&\r\n                            this.props.onLeftAction(key, this._rows))\r\n                    }\r\n                    onRightAction={() =>\r\n                        item.onRightAction ||\r\n                        (this.props.onRightAction &&\r\n                            this.props.onRightAction(key, this._rows))\r\n                    }\r\n                    onLeftActionStatusChange={\r\n                        this.props.onLeftActionStatusChange\r\n                            ? data =>\r\n                                  this.props.onLeftActionStatusChange({\r\n                                      ...data,\r\n                                      key,\r\n                                  })\r\n                            : null\r\n                    }\r\n                    onRightActionStatusChange={\r\n                        this.props.onRightActionStatusChange\r\n                            ? data =>\r\n                                  this.props.onRightActionStatusChange({\r\n                                      ...data,\r\n                                      key,\r\n                                  })\r\n                            : null\r\n                    }\r\n                    shouldItemUpdate={\r\n                        this.props.shouldItemUpdate\r\n                            ? (currentItem, newItem) =>\r\n                                  this.props.shouldItemUpdate(\r\n                                      currentItem,\r\n                                      newItem\r\n                                  )\r\n                            : null\r\n                    }\r\n                    setScrollEnabled={enable => this.setScrollEnabled(enable)}\r\n                    leftOpenValue={\r\n                        item.leftOpenValue || this.props.leftOpenValue\r\n                    }\r\n                    rightOpenValue={\r\n                        item.rightOpenValue || this.props.rightOpenValue\r\n                    }\r\n                    closeOnRowPress={\r\n                        item.closeOnRowPress || this.props.closeOnRowPress\r\n                    }\r\n                    disableLeftSwipe={\r\n                        item.disableLeftSwipe || this.props.disableLeftSwipe\r\n                    }\r\n                    disableRightSwipe={\r\n                        item.disableRightSwipe || this.props.disableRightSwipe\r\n                    }\r\n                    stopLeftSwipe={\r\n                        item.stopLeftSwipe || this.props.stopLeftSwipe\r\n                    }\r\n                    stopRightSwipe={\r\n                        item.stopRightSwipe || this.props.stopRightSwipe\r\n                    }\r\n                    recalculateHiddenLayout={this.props.recalculateHiddenLayout}\r\n                    disableHiddenLayoutCalculation={\r\n                        this.props.disableHiddenLayoutCalculation\r\n                    }\r\n                    style={this.props.swipeRowStyle}\r\n                    preview={shouldPreviewRow}\r\n                    previewDuration={this.props.previewDuration}\r\n                    previewOpenDelay={this.props.previewOpenDelay}\r\n                    previewOpenValue={this.props.previewOpenValue}\r\n                    previewRepeat={this.props.previewRepeat}\r\n                    previewRepeatDelay={this.props.previewRepeatDelay}\r\n                    tension={this.props.tension}\r\n                    restSpeedThreshold={this.props.restSpeedThreshold}\r\n                    restDisplacementThreshold={\r\n                        this.props.restDisplacementThreshold\r\n                    }\r\n                    friction={this.props.friction}\r\n                    directionalDistanceChangeThreshold={\r\n                        this.props.directionalDistanceChangeThreshold\r\n                    }\r\n                    swipeToOpenPercent={this.props.swipeToOpenPercent}\r\n                    swipeToOpenVelocityContribution={\r\n                        this.props.swipeToOpenVelocityContribution\r\n                    }\r\n                    swipeToClosePercent={this.props.swipeToClosePercent}\r\n                    item={item} // used for should item update comparisons\r\n                    useNativeDriver={this.props.useNativeDriver}\r\n                    onPreviewEnd={this.props.onPreviewEnd}\r\n                >\r\n                    {HiddenComponent}\r\n                    {VisibleComponent}\r\n                </SwipeRow>\r\n            );\r\n        }\r\n    }\r\n\r\n    // In most use cases this is no longer used. Only in the case we are passed renderListView={true}\r\n    // there may be legacy code that passes a this.props.renderRow func so we keep this for legacy purposes\r\n    renderRow(rowData, secId, rowId, rowMap) {\r\n        const key = `${secId}${rowId}`;\r\n        const Component = this.props.renderRow(rowData, secId, rowId, rowMap);\r\n        const HiddenComponent =\r\n            this.props.renderHiddenRow &&\r\n            this.props.renderHiddenRow(rowData, secId, rowId, rowMap);\r\n        const previewRowId =\r\n            this.props.dataSource &&\r\n            this.props.dataSource.getRowIDForFlatIndex(\r\n                this.props.previewRowIndex || 0\r\n            );\r\n        const shouldPreviewRow =\r\n            (this.props.previewFirstRow || this.props.previewRowIndex) &&\r\n            rowId === previewRowId;\r\n\r\n        return this.renderCell(\r\n            Component,\r\n            HiddenComponent,\r\n            key,\r\n            rowData,\r\n            shouldPreviewRow\r\n        );\r\n    }\r\n\r\n    renderItem(rowData, rowMap) {\r\n        const Component = this.props.renderItem(rowData, rowMap);\r\n        const HiddenComponent =\r\n            this.props.renderHiddenItem &&\r\n            this.props.renderHiddenItem(rowData, rowMap);\r\n        const { item, index } = rowData;\r\n        let { key } = item;\r\n        if (this.props.keyExtractor) {\r\n            key = this.props.keyExtractor(item, index);\r\n        }\r\n\r\n        const shouldPreviewRow =\r\n            typeof key !== 'undefined' && this.props.previewRowKey === key;\r\n\r\n        return this.renderCell(\r\n            Component,\r\n            HiddenComponent,\r\n            key,\r\n            item,\r\n            shouldPreviewRow\r\n        );\r\n    }\r\n\r\n    _renderItem = rowData => this.renderItem(rowData, this._rows);\r\n\r\n    _onRef = c => this.setRefs(c);\r\n\r\n    render() {\r\n        const { useSectionList, renderListView, ...props } = this.props;\r\n\r\n        if (renderListView) {\r\n            // Ideally renderRow should be deprecated. We do this check for\r\n            // legacy purposes to not break certain renderListView cases\r\n            const useRenderRow = !!this.props.renderRow;\r\n            return renderListView(\r\n                props,\r\n                this.setRefs.bind(this),\r\n                this.onScroll.bind(this),\r\n                useRenderRow\r\n                    ? this.renderRow.bind(this, this._rows)\r\n                    : this.renderItem.bind(this)\r\n            );\r\n        }\r\n\r\n        if (useSectionList) {\r\n            const ListComponent = this.props.useAnimatedList\r\n                ? Animated.SectionList\r\n                : SectionList;\r\n            return (\r\n                <ListComponent\r\n                    {...props}\r\n                    {...this.listViewProps}\r\n                    ref={this._onRef}\r\n                    onScroll={this._onScroll}\r\n                    renderItem={this._renderItem}\r\n                />\r\n            );\r\n        }\r\n        const ListComponent = this.props.useAnimatedList\r\n            ? Animated.FlatList\r\n            : FlatList;\r\n        return (\r\n            <ListComponent\r\n                {...props}\r\n                {...this.listViewProps}\r\n                ref={this._onRef}\r\n                onScroll={this._onScroll}\r\n                renderItem={this._renderItem}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nSwipeListView.propTypes = {\r\n    /**\r\n     * To render a custom ListView component, if you don't want to use ReactNative one.\r\n     * Note: This will call `renderRow`, not `renderItem`\r\n     */\r\n    renderListView: PropTypes.func,\r\n    /**\r\n     * How to render a row in a FlatList. Should return a valid React Element.\r\n     */\r\n    renderItem: PropTypes.func,\r\n    /**\r\n     * How to render a hidden row in a FlatList (renders behind the row). Should return a valid React Element.\r\n     * This is required unless renderItem is passing a SwipeRow.\r\n     */\r\n    renderHiddenItem: PropTypes.func,\r\n    /**\r\n     * TranslateX value for opening the row to the left (positive number)\r\n     */\r\n    leftOpenValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for opening the row to the right (negative number)\r\n     */\r\n    rightOpenValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for firing onLeftActionStatusChange (positive number)\r\n     */\r\n    leftActivationValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for firing onRightActionStatusChange (negative number)\r\n     */\r\n    rightActivationValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for left action to which the row will be shifted after gesture release\r\n     */\r\n    leftActionValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for right action to which the row will be shifted after gesture release\r\n     */\r\n    rightActionValue: PropTypes.number,\r\n    /**\r\n     * Initial value for left action state (default is false)\r\n     */\r\n    initialLeftActionState: PropTypes.bool,\r\n    /**\r\n     * Initial value for right action state (default is false)\r\n     */\r\n    initialRightActionState: PropTypes.bool,\r\n    /**\r\n     * TranslateX value for stop the row to the left (positive number)\r\n     */\r\n    stopLeftSwipe: PropTypes.number,\r\n    /**\r\n     * TranslateX value for stop the row to the right (negative number)\r\n     */\r\n    stopRightSwipe: PropTypes.number,\r\n    /**\r\n     * Should open rows be closed when the listView begins scrolling\r\n     */\r\n    closeOnScroll: PropTypes.bool,\r\n    /**\r\n     * Should open rows be closed when a row is pressed\r\n     */\r\n    closeOnRowPress: PropTypes.bool,\r\n    /**\r\n     * Should open rows be closed when a row begins to swipe open\r\n     */\r\n    closeOnRowBeginSwipe: PropTypes.bool,\r\n    /**\r\n     * Should open rows be closed when another row is opened\r\n     */\r\n    closeOnRowOpen: PropTypes.bool,\r\n    /**\r\n     * Disable ability to swipe rows left\r\n     */\r\n    disableLeftSwipe: PropTypes.bool,\r\n    /**\r\n     * Disable ability to swipe rows right\r\n     */\r\n    disableRightSwipe: PropTypes.bool,\r\n    /**\r\n     * Enable hidden row onLayout calculations to run always.\r\n     *\r\n     * By default, hidden row size calculations are only done on the first onLayout event\r\n     * for performance reasons.\r\n     * Passing ```true``` here will cause calculations to run on every onLayout event.\r\n     * You may want to do this if your rows' sizes can change.\r\n     * One case is a SwipeListView with rows of different heights and an options to delete rows.\r\n     */\r\n    recalculateHiddenLayout: PropTypes.bool,\r\n    /**\r\n     * Disable hidden row onLayout calculations\r\n     *\r\n     * Instead, {width: '100%', height: '100%'} will be used.\r\n     * Improves performance by avoiding component updates, while still working with orientation changes.\r\n     */\r\n    disableHiddenLayoutCalculation: PropTypes.bool,\r\n    /**\r\n     * Called when a swipe row is animating swipe\r\n     */\r\n    swipeGestureBegan: PropTypes.func,\r\n    /**\r\n     * Called when user has ended their swipe gesture\r\n     */\r\n    swipeGestureEnded: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row is animating open\r\n     */\r\n    onRowOpen: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row has animated open\r\n     */\r\n    onRowDidOpen: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row is animating closed\r\n     */\r\n    onRowClose: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row has animated closed\r\n     */\r\n    onRowDidClose: PropTypes.func,\r\n    /**\r\n     * Called when row shifted to leftActivationValue\r\n     */\r\n    onLeftAction: PropTypes.func,\r\n    /**\r\n     * Called when row shifted to rightActivationValue\r\n     */\r\n    onRightAction: PropTypes.func,\r\n    /**\r\n     * Called once when swipe value crosses the leftActivationValue\r\n     */\r\n    onLeftActionStatusChange: PropTypes.func,\r\n    /**\r\n     * Called once when swipe value crosses the rightActivationValue\r\n     */\r\n    onRightActionStatusChange: PropTypes.func,\r\n    /**\r\n     * Called when scrolling on the SwipeListView has been enabled/disabled\r\n     */\r\n    onScrollEnabled: PropTypes.func,\r\n    /**\r\n     * Called when a scroll event is emitted\r\n     */\r\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    /**\r\n     * Styles for the parent wrapper View of the SwipeRow\r\n     */\r\n    swipeRowStyle: PropTypes.object,\r\n    /**\r\n     * Called when the FlatList ref is set and passes a ref to the FlatList\r\n     * e.g. listViewRef={ ref => this._swipeListViewRef = ref }\r\n     */\r\n    listViewRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n    /**\r\n     * Should the row with this key do a slide out preview to show that the list is swipeable\r\n     */\r\n    previewRowKey: PropTypes.string,\r\n    /**\r\n     * [DEPRECATED] Should the first SwipeRow do a slide out preview to show that the list is swipeable\r\n     */\r\n    previewFirstRow: PropTypes.bool,\r\n    /**\r\n     * [DEPRECATED] Should the specified rowId do a slide out preview to show that the list is swipeable\r\n     * Note: This ID will be passed to this function to get the correct row index\r\n     * https://facebook.github.io/react-native/docs/listviewdatasource.html#getrowidforflatindex\r\n     */\r\n    previewRowIndex: PropTypes.number,\r\n    /**\r\n     * Duration of the slide out preview animation (milliseconds)\r\n     */\r\n    previewDuration: PropTypes.number,\r\n    /**\r\n     * Should the animation repeat until false is provided\r\n     */\r\n    previewRepeat: PropTypes.bool,\r\n    /**\r\n     * Time between each full completed animation in milliseconds\r\n     * Default: 1000 (1 second)\r\n     */\r\n    previewRepeatDelay: PropTypes.number,\r\n    /**\r\n     * Delay of the slide out preview animation (milliseconds) // default 700ms\r\n     */\r\n    previewOpenDelay: PropTypes.number,\r\n    /**\r\n     * TranslateX value for the slide out preview animation\r\n     * Default: 0.5 * props.rightOpenValue\r\n     */\r\n    previewOpenValue: PropTypes.number,\r\n    /**\r\n     * Friction for the open / close animation\r\n     */\r\n    friction: PropTypes.number,\r\n    /**\r\n     * Tension for the open / close animation\r\n     */\r\n    tension: PropTypes.number,\r\n    /**\r\n     * RestSpeedThreshold for the open / close animation\r\n     */\r\n    restSpeedThreshold: PropTypes.number,\r\n    /**\r\n     * RestDisplacementThreshold for the open / close animation\r\n     */\r\n    restDisplacementThreshold: PropTypes.number,\r\n    /**\r\n     * The dx value used to detect when a user has begun a swipe gesture\r\n     */\r\n    directionalDistanceChangeThreshold: PropTypes.number,\r\n    /**\r\n     * What % of the left/right openValue does the user need to swipe\r\n     * past to trigger the row opening.\r\n     */\r\n    swipeToOpenPercent: PropTypes.number,\r\n    /**\r\n     * Describes how much the ending velocity of the gesture affects whether the swipe will result in the item being closed or open.\r\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\r\n     * and it'll just take into consideration the swipeToOpenPercent.\r\n     */\r\n    swipeToOpenVelocityContribution: PropTypes.number,\r\n    /**\r\n     * What % of the left/right openValue does the user need to swipe\r\n     * past to trigger the row closing.\r\n     */\r\n    swipeToClosePercent: PropTypes.number,\r\n    /**\r\n     * callback to determine whether component should update (currentItem, newItem)\r\n     */\r\n    shouldItemUpdate: PropTypes.func,\r\n    /**\r\n     * Callback invoked any time the swipe value of a SwipeRow is changed\r\n     */\r\n    onSwipeValueChange: PropTypes.func,\r\n    /**\r\n     * useNativeDriver: true for all animations where possible\r\n     */\r\n    useNativeDriver: PropTypes.bool,\r\n    /**\r\n     * Use Animated.Flatlist or Animated.Sectionlist\r\n     */\r\n    useAnimatedList: PropTypes.bool,\r\n    /**\r\n     * keyExtractor: function to generate key value for each row in the list\r\n     */\r\n    keyExtractor: PropTypes.func,\r\n    /**\r\n     * Callback that runs after row swipe preview is finished\r\n     */\r\n    onPreviewEnd: PropTypes.func,\r\n};\r\n\r\nSwipeListView.defaultProps = {\r\n    leftOpenValue: 0,\r\n    rightOpenValue: 0,\r\n    closeOnRowBeginSwipe: false,\r\n    closeOnScroll: true,\r\n    closeOnRowPress: true,\r\n    closeOnRowOpen: true,\r\n    disableLeftSwipe: false,\r\n    disableRightSwipe: false,\r\n    recalculateHiddenLayout: false,\r\n    disableHiddenLayoutCalculation: false,\r\n    previewFirstRow: false,\r\n    directionalDistanceChangeThreshold: 2,\r\n    swipeToOpenPercent: 50,\r\n    swipeToOpenVelocityContribution: 0,\r\n    swipeToClosePercent: 50,\r\n    useNativeDriver: true,\r\n    previewRepeat: false,\r\n    previewRepeatDelay: 1000,\r\n    useAnimatedList: false,\r\n};\r\n\r\nexport default SwipeListView;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}