{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"@babel/runtime/helpers/get\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nvar _require = require('./symbols'),\n  isClean = _require.isClean,\n  my = _require.my;\nvar Declaration = require('./declaration');\nvar Comment = require('./comment');\nvar Node = require('./node');\nvar parse, Rule, AtRule, Root;\nfunction cleanSource(nodes) {\n  return nodes.map(function (i) {\n    if (i.nodes) i.nodes = cleanSource(i.nodes);\n    delete i.source;\n    return i;\n  });\n}\nfunction markDirtyUp(node) {\n  node[isClean] = false;\n  if (node.proxyOf.nodes) {\n    for (var i of node.proxyOf.nodes) {\n      markDirtyUp(i);\n    }\n  }\n}\nvar Container = function (_Node) {\n  _inherits(Container, _Node);\n  function Container() {\n    _classCallCheck(this, Container);\n    return _callSuper(this, Container, arguments);\n  }\n  _createClass(Container, [{\n    key: \"append\",\n    value: function append() {\n      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n        children[_key] = arguments[_key];\n      }\n      for (var child of children) {\n        var nodes = this.normalize(child, this.last);\n        for (var node of nodes) this.proxyOf.nodes.push(node);\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"cleanRaws\",\n    value: function cleanRaws(keepBetween) {\n      _get(_getPrototypeOf(Container.prototype), \"cleanRaws\", this).call(this, keepBetween);\n      if (this.nodes) {\n        for (var node of this.nodes) node.cleanRaws(keepBetween);\n      }\n    }\n  }, {\n    key: \"each\",\n    value: function each(callback) {\n      if (!this.proxyOf.nodes) return undefined;\n      var iterator = this.getIterator();\n      var index, result;\n      while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n        index = this.indexes[iterator];\n        result = callback(this.proxyOf.nodes[index], index);\n        if (result === false) break;\n        this.indexes[iterator] += 1;\n      }\n      delete this.indexes[iterator];\n      return result;\n    }\n  }, {\n    key: \"every\",\n    value: function every(condition) {\n      return this.nodes.every(condition);\n    }\n  }, {\n    key: \"getIterator\",\n    value: function getIterator() {\n      if (!this.lastEach) this.lastEach = 0;\n      if (!this.indexes) this.indexes = {};\n      this.lastEach += 1;\n      var iterator = this.lastEach;\n      this.indexes[iterator] = 0;\n      return iterator;\n    }\n  }, {\n    key: \"getProxyProcessor\",\n    value: function getProxyProcessor() {\n      return {\n        get: function get(node, prop) {\n          if (prop === 'proxyOf') {\n            return node;\n          } else if (!node[prop]) {\n            return node[prop];\n          } else if (prop === 'each' || typeof prop === 'string' && prop.startsWith('walk')) {\n            return function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n              return node[prop].apply(node, _toConsumableArray(args.map(function (i) {\n                if (typeof i === 'function') {\n                  return function (child, index) {\n                    return i(child.toProxy(), index);\n                  };\n                } else {\n                  return i;\n                }\n              })));\n            };\n          } else if (prop === 'every' || prop === 'some') {\n            return function (cb) {\n              return node[prop](function (child) {\n                for (var _len3 = arguments.length, other = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n                  other[_key3 - 1] = arguments[_key3];\n                }\n                return cb.apply(void 0, [child.toProxy()].concat(other));\n              });\n            };\n          } else if (prop === 'root') {\n            return function () {\n              return node.root().toProxy();\n            };\n          } else if (prop === 'nodes') {\n            return node.nodes.map(function (i) {\n              return i.toProxy();\n            });\n          } else if (prop === 'first' || prop === 'last') {\n            return node[prop].toProxy();\n          } else {\n            return node[prop];\n          }\n        },\n        set: function set(node, prop, value) {\n          if (node[prop] === value) return true;\n          node[prop] = value;\n          if (prop === 'name' || prop === 'params' || prop === 'selector') {\n            node.markDirty();\n          }\n          return true;\n        }\n      };\n    }\n  }, {\n    key: \"index\",\n    value: function index(child) {\n      if (typeof child === 'number') return child;\n      if (child.proxyOf) child = child.proxyOf;\n      return this.proxyOf.nodes.indexOf(child);\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(exist, add) {\n      var existIndex = this.index(exist);\n      var nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();\n      existIndex = this.index(exist);\n      for (var node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node);\n      var index;\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n        if (existIndex < index) {\n          this.indexes[id] = index + nodes.length;\n        }\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(exist, add) {\n      var existIndex = this.index(exist);\n      var type = existIndex === 0 ? 'prepend' : false;\n      var nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();\n      existIndex = this.index(exist);\n      for (var node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node);\n      var index;\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n        if (existIndex <= index) {\n          this.indexes[id] = index + nodes.length;\n        }\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(nodes, sample) {\n      var _this = this;\n      if (typeof nodes === 'string') {\n        nodes = cleanSource(parse(nodes).nodes);\n      } else if (Array.isArray(nodes)) {\n        nodes = nodes.slice(0);\n        for (var i of nodes) {\n          if (i.parent) i.parent.removeChild(i, 'ignore');\n        }\n      } else if (nodes.type === 'root' && this.type !== 'document') {\n        nodes = nodes.nodes.slice(0);\n        for (var _i of nodes) {\n          if (_i.parent) _i.parent.removeChild(_i, 'ignore');\n        }\n      } else if (nodes.type) {\n        nodes = [nodes];\n      } else if (nodes.prop) {\n        if (typeof nodes.value === 'undefined') {\n          throw new Error('Value field is missed in node creation');\n        } else if (typeof nodes.value !== 'string') {\n          nodes.value = String(nodes.value);\n        }\n        nodes = [new Declaration(nodes)];\n      } else if (nodes.selector) {\n        nodes = [new Rule(nodes)];\n      } else if (nodes.name) {\n        nodes = [new AtRule(nodes)];\n      } else if (nodes.text) {\n        nodes = [new Comment(nodes)];\n      } else {\n        throw new Error('Unknown node type in node creation');\n      }\n      var processed = nodes.map(function (i) {\n        if (!i[my]) Container.rebuild(i);\n        i = i.proxyOf;\n        if (i.parent) i.parent.removeChild(i);\n        if (i[isClean]) markDirtyUp(i);\n        if (typeof i.raws.before === 'undefined') {\n          if (sample && typeof sample.raws.before !== 'undefined') {\n            i.raws.before = sample.raws.before.replace(/\\S/g, '');\n          }\n        }\n        i.parent = _this.proxyOf;\n        return i;\n      });\n      return processed;\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len4 = arguments.length, children = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        children[_key4] = arguments[_key4];\n      }\n      children = children.reverse();\n      for (var child of children) {\n        var nodes = this.normalize(child, this.first, 'prepend').reverse();\n        for (var node of nodes) this.proxyOf.nodes.unshift(node);\n        for (var id in this.indexes) {\n          this.indexes[id] = this.indexes[id] + nodes.length;\n        }\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"push\",\n    value: function push(child) {\n      child.parent = this;\n      this.proxyOf.nodes.push(child);\n      return this;\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      for (var node of this.proxyOf.nodes) node.parent = undefined;\n      this.proxyOf.nodes = [];\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      child = this.index(child);\n      this.proxyOf.nodes[child].parent = undefined;\n      this.proxyOf.nodes.splice(child, 1);\n      var index;\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n        if (index >= child) {\n          this.indexes[id] = index - 1;\n        }\n      }\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"replaceValues\",\n    value: function replaceValues(pattern, opts, callback) {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n      this.walkDecls(function (decl) {\n        if (opts.props && !opts.props.includes(decl.prop)) return;\n        if (opts.fast && !decl.value.includes(opts.fast)) return;\n        decl.value = decl.value.replace(pattern, callback);\n      });\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"some\",\n    value: function some(condition) {\n      return this.nodes.some(condition);\n    }\n  }, {\n    key: \"walk\",\n    value: function walk(callback) {\n      return this.each(function (child, i) {\n        var result;\n        try {\n          result = callback(child, i);\n        } catch (e) {\n          throw child.addToError(e);\n        }\n        if (result !== false && child.walk) {\n          result = child.walk(callback);\n        }\n        return result;\n      });\n    }\n  }, {\n    key: \"walkAtRules\",\n    value: function walkAtRules(name, callback) {\n      if (!callback) {\n        callback = name;\n        return this.walk(function (child, i) {\n          if (child.type === 'atrule') {\n            return callback(child, i);\n          }\n        });\n      }\n      if (name instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'atrule' && name.test(child.name)) {\n            return callback(child, i);\n          }\n        });\n      }\n      return this.walk(function (child, i) {\n        if (child.type === 'atrule' && child.name === name) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkComments\",\n    value: function walkComments(callback) {\n      return this.walk(function (child, i) {\n        if (child.type === 'comment') {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkDecls\",\n    value: function walkDecls(prop, callback) {\n      if (!callback) {\n        callback = prop;\n        return this.walk(function (child, i) {\n          if (child.type === 'decl') {\n            return callback(child, i);\n          }\n        });\n      }\n      if (prop instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'decl' && prop.test(child.prop)) {\n            return callback(child, i);\n          }\n        });\n      }\n      return this.walk(function (child, i) {\n        if (child.type === 'decl' && child.prop === prop) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkRules\",\n    value: function walkRules(selector, callback) {\n      if (!callback) {\n        callback = selector;\n        return this.walk(function (child, i) {\n          if (child.type === 'rule') {\n            return callback(child, i);\n          }\n        });\n      }\n      if (selector instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'rule' && selector.test(child.selector)) {\n            return callback(child, i);\n          }\n        });\n      }\n      return this.walk(function (child, i) {\n        if (child.type === 'rule' && child.selector === selector) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"first\",\n    get: function get() {\n      if (!this.proxyOf.nodes) return undefined;\n      return this.proxyOf.nodes[0];\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      if (!this.proxyOf.nodes) return undefined;\n      return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n    }\n  }]);\n  return Container;\n}(Node);\nContainer.registerParse = function (dependant) {\n  parse = dependant;\n};\nContainer.registerRule = function (dependant) {\n  Rule = dependant;\n};\nContainer.registerAtRule = function (dependant) {\n  AtRule = dependant;\n};\nContainer.registerRoot = function (dependant) {\n  Root = dependant;\n};\nmodule.exports = Container;\nContainer.default = Container;\nContainer.rebuild = function (node) {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype);\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype);\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype);\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype);\n  } else if (node.type === 'root') {\n    Object.setPrototypeOf(node, Root.prototype);\n  }\n  node[my] = true;\n  if (node.nodes) {\n    node.nodes.forEach(function (child) {\n      Container.rebuild(child);\n    });\n  }\n};","map":{"version":3,"names":["_toConsumableArray","require","_classCallCheck","_createClass","_possibleConstructorReturn","_get","_getPrototypeOf","_inherits","_callSuper","t","o","e","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","_require","isClean","my","Declaration","Comment","Node","parse","Rule","AtRule","Root","cleanSource","nodes","map","i","source","markDirtyUp","node","proxyOf","Container","_Node","arguments","key","value","append","_len","length","children","Array","_key","child","normalize","last","push","markDirty","cleanRaws","keepBetween","each","callback","undefined","iterator","getIterator","index","result","indexes","every","condition","lastEach","getProxyProcessor","get","prop","startsWith","_len2","args","_key2","toProxy","cb","_len3","other","_key3","concat","root","set","indexOf","insertAfter","exist","add","existIndex","reverse","splice","id","insertBefore","type","sample","_this","isArray","slice","parent","removeChild","Error","String","selector","name","text","processed","rebuild","raws","before","replace","prepend","_len4","_key4","first","unshift","removeAll","replaceValues","pattern","opts","walkDecls","decl","props","includes","fast","some","walk","addToError","walkAtRules","RegExp","test","walkComments","walkRules","registerParse","dependant","registerRule","registerAtRule","registerRoot","module","exports","default","Object","setPrototypeOf","forEach"],"sources":["C:/JsonMobile/frontend/node_modules/styled-components/node_modules/postcss/lib/container.js"],"sourcesContent":["'use strict'\r\n\r\nlet { isClean, my } = require('./symbols')\r\nlet Declaration = require('./declaration')\r\nlet Comment = require('./comment')\r\nlet Node = require('./node')\r\n\r\nlet parse, Rule, AtRule, Root\r\n\r\nfunction cleanSource(nodes) {\r\n  return nodes.map(i => {\r\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\r\n    delete i.source\r\n    return i\r\n  })\r\n}\r\n\r\nfunction markDirtyUp(node) {\r\n  node[isClean] = false\r\n  if (node.proxyOf.nodes) {\r\n    for (let i of node.proxyOf.nodes) {\r\n      markDirtyUp(i)\r\n    }\r\n  }\r\n}\r\n\r\nclass Container extends Node {\r\n  append(...children) {\r\n    for (let child of children) {\r\n      let nodes = this.normalize(child, this.last)\r\n      for (let node of nodes) this.proxyOf.nodes.push(node)\r\n    }\r\n\r\n    this.markDirty()\r\n\r\n    return this\r\n  }\r\n\r\n  cleanRaws(keepBetween) {\r\n    super.cleanRaws(keepBetween)\r\n    if (this.nodes) {\r\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\r\n    }\r\n  }\r\n\r\n  each(callback) {\r\n    if (!this.proxyOf.nodes) return undefined\r\n    let iterator = this.getIterator()\r\n\r\n    let index, result\r\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\r\n      index = this.indexes[iterator]\r\n      result = callback(this.proxyOf.nodes[index], index)\r\n      if (result === false) break\r\n\r\n      this.indexes[iterator] += 1\r\n    }\r\n\r\n    delete this.indexes[iterator]\r\n    return result\r\n  }\r\n\r\n  every(condition) {\r\n    return this.nodes.every(condition)\r\n  }\r\n\r\n  getIterator() {\r\n    if (!this.lastEach) this.lastEach = 0\r\n    if (!this.indexes) this.indexes = {}\r\n\r\n    this.lastEach += 1\r\n    let iterator = this.lastEach\r\n    this.indexes[iterator] = 0\r\n\r\n    return iterator\r\n  }\r\n\r\n  getProxyProcessor() {\r\n    return {\r\n      get(node, prop) {\r\n        if (prop === 'proxyOf') {\r\n          return node\r\n        } else if (!node[prop]) {\r\n          return node[prop]\r\n        } else if (\r\n          prop === 'each' ||\r\n          (typeof prop === 'string' && prop.startsWith('walk'))\r\n        ) {\r\n          return (...args) => {\r\n            return node[prop](\r\n              ...args.map(i => {\r\n                if (typeof i === 'function') {\r\n                  return (child, index) => i(child.toProxy(), index)\r\n                } else {\r\n                  return i\r\n                }\r\n              })\r\n            )\r\n          }\r\n        } else if (prop === 'every' || prop === 'some') {\r\n          return cb => {\r\n            return node[prop]((child, ...other) =>\r\n              cb(child.toProxy(), ...other)\r\n            )\r\n          }\r\n        } else if (prop === 'root') {\r\n          return () => node.root().toProxy()\r\n        } else if (prop === 'nodes') {\r\n          return node.nodes.map(i => i.toProxy())\r\n        } else if (prop === 'first' || prop === 'last') {\r\n          return node[prop].toProxy()\r\n        } else {\r\n          return node[prop]\r\n        }\r\n      },\r\n\r\n      set(node, prop, value) {\r\n        if (node[prop] === value) return true\r\n        node[prop] = value\r\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\r\n          node.markDirty()\r\n        }\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  index(child) {\r\n    if (typeof child === 'number') return child\r\n    if (child.proxyOf) child = child.proxyOf\r\n    return this.proxyOf.nodes.indexOf(child)\r\n  }\r\n\r\n  insertAfter(exist, add) {\r\n    let existIndex = this.index(exist)\r\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse()\r\n    existIndex = this.index(exist)\r\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node)\r\n\r\n    let index\r\n    for (let id in this.indexes) {\r\n      index = this.indexes[id]\r\n      if (existIndex < index) {\r\n        this.indexes[id] = index + nodes.length\r\n      }\r\n    }\r\n\r\n    this.markDirty()\r\n\r\n    return this\r\n  }\r\n\r\n  insertBefore(exist, add) {\r\n    let existIndex = this.index(exist)\r\n    let type = existIndex === 0 ? 'prepend' : false\r\n    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse()\r\n    existIndex = this.index(exist)\r\n    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node)\r\n\r\n    let index\r\n    for (let id in this.indexes) {\r\n      index = this.indexes[id]\r\n      if (existIndex <= index) {\r\n        this.indexes[id] = index + nodes.length\r\n      }\r\n    }\r\n\r\n    this.markDirty()\r\n\r\n    return this\r\n  }\r\n\r\n  normalize(nodes, sample) {\r\n    if (typeof nodes === 'string') {\r\n      nodes = cleanSource(parse(nodes).nodes)\r\n    } else if (Array.isArray(nodes)) {\r\n      nodes = nodes.slice(0)\r\n      for (let i of nodes) {\r\n        if (i.parent) i.parent.removeChild(i, 'ignore')\r\n      }\r\n    } else if (nodes.type === 'root' && this.type !== 'document') {\r\n      nodes = nodes.nodes.slice(0)\r\n      for (let i of nodes) {\r\n        if (i.parent) i.parent.removeChild(i, 'ignore')\r\n      }\r\n    } else if (nodes.type) {\r\n      nodes = [nodes]\r\n    } else if (nodes.prop) {\r\n      if (typeof nodes.value === 'undefined') {\r\n        throw new Error('Value field is missed in node creation')\r\n      } else if (typeof nodes.value !== 'string') {\r\n        nodes.value = String(nodes.value)\r\n      }\r\n      nodes = [new Declaration(nodes)]\r\n    } else if (nodes.selector) {\r\n      nodes = [new Rule(nodes)]\r\n    } else if (nodes.name) {\r\n      nodes = [new AtRule(nodes)]\r\n    } else if (nodes.text) {\r\n      nodes = [new Comment(nodes)]\r\n    } else {\r\n      throw new Error('Unknown node type in node creation')\r\n    }\r\n\r\n    let processed = nodes.map(i => {\r\n      /* c8 ignore next */\r\n      if (!i[my]) Container.rebuild(i)\r\n      i = i.proxyOf\r\n      if (i.parent) i.parent.removeChild(i)\r\n      if (i[isClean]) markDirtyUp(i)\r\n      if (typeof i.raws.before === 'undefined') {\r\n        if (sample && typeof sample.raws.before !== 'undefined') {\r\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\r\n        }\r\n      }\r\n      i.parent = this.proxyOf\r\n      return i\r\n    })\r\n\r\n    return processed\r\n  }\r\n\r\n  prepend(...children) {\r\n    children = children.reverse()\r\n    for (let child of children) {\r\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\r\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\r\n      for (let id in this.indexes) {\r\n        this.indexes[id] = this.indexes[id] + nodes.length\r\n      }\r\n    }\r\n\r\n    this.markDirty()\r\n\r\n    return this\r\n  }\r\n\r\n  push(child) {\r\n    child.parent = this\r\n    this.proxyOf.nodes.push(child)\r\n    return this\r\n  }\r\n\r\n  removeAll() {\r\n    for (let node of this.proxyOf.nodes) node.parent = undefined\r\n    this.proxyOf.nodes = []\r\n\r\n    this.markDirty()\r\n\r\n    return this\r\n  }\r\n\r\n  removeChild(child) {\r\n    child = this.index(child)\r\n    this.proxyOf.nodes[child].parent = undefined\r\n    this.proxyOf.nodes.splice(child, 1)\r\n\r\n    let index\r\n    for (let id in this.indexes) {\r\n      index = this.indexes[id]\r\n      if (index >= child) {\r\n        this.indexes[id] = index - 1\r\n      }\r\n    }\r\n\r\n    this.markDirty()\r\n\r\n    return this\r\n  }\r\n\r\n  replaceValues(pattern, opts, callback) {\r\n    if (!callback) {\r\n      callback = opts\r\n      opts = {}\r\n    }\r\n\r\n    this.walkDecls(decl => {\r\n      if (opts.props && !opts.props.includes(decl.prop)) return\r\n      if (opts.fast && !decl.value.includes(opts.fast)) return\r\n\r\n      decl.value = decl.value.replace(pattern, callback)\r\n    })\r\n\r\n    this.markDirty()\r\n\r\n    return this\r\n  }\r\n\r\n  some(condition) {\r\n    return this.nodes.some(condition)\r\n  }\r\n\r\n  walk(callback) {\r\n    return this.each((child, i) => {\r\n      let result\r\n      try {\r\n        result = callback(child, i)\r\n      } catch (e) {\r\n        throw child.addToError(e)\r\n      }\r\n      if (result !== false && child.walk) {\r\n        result = child.walk(callback)\r\n      }\r\n\r\n      return result\r\n    })\r\n  }\r\n\r\n  walkAtRules(name, callback) {\r\n    if (!callback) {\r\n      callback = name\r\n      return this.walk((child, i) => {\r\n        if (child.type === 'atrule') {\r\n          return callback(child, i)\r\n        }\r\n      })\r\n    }\r\n    if (name instanceof RegExp) {\r\n      return this.walk((child, i) => {\r\n        if (child.type === 'atrule' && name.test(child.name)) {\r\n          return callback(child, i)\r\n        }\r\n      })\r\n    }\r\n    return this.walk((child, i) => {\r\n      if (child.type === 'atrule' && child.name === name) {\r\n        return callback(child, i)\r\n      }\r\n    })\r\n  }\r\n\r\n  walkComments(callback) {\r\n    return this.walk((child, i) => {\r\n      if (child.type === 'comment') {\r\n        return callback(child, i)\r\n      }\r\n    })\r\n  }\r\n\r\n  walkDecls(prop, callback) {\r\n    if (!callback) {\r\n      callback = prop\r\n      return this.walk((child, i) => {\r\n        if (child.type === 'decl') {\r\n          return callback(child, i)\r\n        }\r\n      })\r\n    }\r\n    if (prop instanceof RegExp) {\r\n      return this.walk((child, i) => {\r\n        if (child.type === 'decl' && prop.test(child.prop)) {\r\n          return callback(child, i)\r\n        }\r\n      })\r\n    }\r\n    return this.walk((child, i) => {\r\n      if (child.type === 'decl' && child.prop === prop) {\r\n        return callback(child, i)\r\n      }\r\n    })\r\n  }\r\n\r\n  walkRules(selector, callback) {\r\n    if (!callback) {\r\n      callback = selector\r\n\r\n      return this.walk((child, i) => {\r\n        if (child.type === 'rule') {\r\n          return callback(child, i)\r\n        }\r\n      })\r\n    }\r\n    if (selector instanceof RegExp) {\r\n      return this.walk((child, i) => {\r\n        if (child.type === 'rule' && selector.test(child.selector)) {\r\n          return callback(child, i)\r\n        }\r\n      })\r\n    }\r\n    return this.walk((child, i) => {\r\n      if (child.type === 'rule' && child.selector === selector) {\r\n        return callback(child, i)\r\n      }\r\n    })\r\n  }\r\n\r\n  get first() {\r\n    if (!this.proxyOf.nodes) return undefined\r\n    return this.proxyOf.nodes[0]\r\n  }\r\n\r\n  get last() {\r\n    if (!this.proxyOf.nodes) return undefined\r\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\r\n  }\r\n}\r\n\r\nContainer.registerParse = dependant => {\r\n  parse = dependant\r\n}\r\n\r\nContainer.registerRule = dependant => {\r\n  Rule = dependant\r\n}\r\n\r\nContainer.registerAtRule = dependant => {\r\n  AtRule = dependant\r\n}\r\n\r\nContainer.registerRoot = dependant => {\r\n  Root = dependant\r\n}\r\n\r\nmodule.exports = Container\r\nContainer.default = Container\r\n\r\n/* c8 ignore start */\r\nContainer.rebuild = node => {\r\n  if (node.type === 'atrule') {\r\n    Object.setPrototypeOf(node, AtRule.prototype)\r\n  } else if (node.type === 'rule') {\r\n    Object.setPrototypeOf(node, Rule.prototype)\r\n  } else if (node.type === 'decl') {\r\n    Object.setPrototypeOf(node, Declaration.prototype)\r\n  } else if (node.type === 'comment') {\r\n    Object.setPrototypeOf(node, Comment.prototype)\r\n  } else if (node.type === 'root') {\r\n    Object.setPrototypeOf(node, Root.prototype)\r\n  }\r\n\r\n  node[my] = true\r\n\r\n  if (node.nodes) {\r\n    node.nodes.forEach(child => {\r\n      Container.rebuild(child)\r\n    })\r\n  }\r\n}\r\n/* c8 ignore stop */\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}