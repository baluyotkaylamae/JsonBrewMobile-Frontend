{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n  _excluded2 = [\"swipeEnabled\", \"lazy\", \"lazyPlaceholder\", \"lazyPreloadDistance\", \"tabBarOptions\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, TabRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport MaterialTopTabView from '../views/MaterialTopTabView';\nfunction MaterialTopTabNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n  var swipeEnabled = restWithDeprecated.swipeEnabled,\n    lazy = restWithDeprecated.lazy,\n    lazyPlaceholder = restWithDeprecated.lazyPlaceholder,\n    lazyPreloadDistance = restWithDeprecated.lazyPreloadDistance,\n    tabBarOptions = restWithDeprecated.tabBarOptions,\n    rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n  var defaultScreenOptions = {};\n  if (tabBarOptions) {\n    Object.assign(defaultScreenOptions, {\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\n      tabBarPressColor: tabBarOptions.pressColor,\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\n      tabBarShowLabel: tabBarOptions.showLabel,\n      tabBarShowIcon: tabBarOptions.showIcon,\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\n      tabBarBounces: tabBarOptions.bounces,\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\n      tabBarIconStyle: tabBarOptions.iconStyle,\n      tabBarLabelStyle: tabBarOptions.labelStyle,\n      tabBarItemStyle: tabBarOptions.tabStyle,\n      tabBarBadge: tabBarOptions.renderBadge,\n      tabBarIndicator: tabBarOptions.renderIndicator,\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\n      tabBarStyle: tabBarOptions.style\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(tabBarOptions, `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(defaultScreenOptions, null, 2)}\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.`);\n  }\n  var deprecatedProps = {\n    swipeEnabled: swipeEnabled,\n    lazy: lazy,\n    lazyPlaceholder: lazyPlaceholder,\n    lazyPreloadDistance: lazyPreloadDistance\n  };\n  Object.entries(deprecatedProps).forEach(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      propName = _ref3[0],\n      propValue = _ref3[1];\n    if (propValue !== undefined) {\n      defaultScreenOptions[propName] = propValue;\n      warnOnce(true, `Material Top Tab Navigator: '${propName}' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#${propName.toLowerCase()} for more details.`);\n    }\n  });\n  var _useNavigationBuilder = useNavigationBuilder(TabRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      backBehavior: backBehavior,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(MaterialTopTabView, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  })));\n}\nexport default createNavigatorFactory(MaterialTopTabNavigator);","map":{"version":3,"names":["createNavigatorFactory","TabRouter","useNavigationBuilder","React","warnOnce","MaterialTopTabView","MaterialTopTabNavigator","_ref","id","initialRouteName","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","_objectWithoutProperties","_excluded","swipeEnabled","lazy","lazyPlaceholder","lazyPreloadDistance","tabBarOptions","rest","_excluded2","defaultScreenOptions","Object","assign","tabBarActiveTintColor","activeTintColor","tabBarInactiveTintColor","inactiveTintColor","tabBarPressColor","pressColor","tabBarPressOpacity","pressOpacity","tabBarShowLabel","showLabel","tabBarShowIcon","showIcon","tabBarAllowFontScaling","allowFontScaling","tabBarBounces","bounces","tabBarScrollEnabled","scrollEnabled","tabBarIconStyle","iconStyle","tabBarLabelStyle","labelStyle","tabBarItemStyle","tabStyle","tabBarBadge","renderBadge","tabBarIndicator","renderIndicator","tabBarIndicatorStyle","indicatorStyle","tabBarIndicatorContainerStyle","indicatorContainerStyle","tabBarContentContainerStyle","contentContainerStyle","tabBarStyle","style","keys","forEach","key","undefined","JSON","stringify","deprecatedProps","entries","_ref2","_ref3","_slicedToArray","propName","propValue","toLowerCase","_useNavigationBuilder","state","descriptors","navigation","NavigationContent","createElement","_extends"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\@react-navigation\\material-top-tabs\\src\\navigators\\createMaterialTopTabNavigator.tsx"],"sourcesContent":["import {\r\n  createNavigatorFactory,\r\n  DefaultNavigatorOptions,\r\n  ParamListBase,\r\n  TabActionHelpers,\r\n  TabNavigationState,\r\n  TabRouter,\r\n  TabRouterOptions,\r\n  useNavigationBuilder,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\nimport warnOnce from 'warn-once';\r\n\r\nimport type {\r\n  MaterialTopTabNavigationConfig,\r\n  MaterialTopTabNavigationEventMap,\r\n  MaterialTopTabNavigationOptions,\r\n} from '../types';\r\nimport MaterialTopTabView from '../views/MaterialTopTabView';\r\n\r\ntype Props = DefaultNavigatorOptions<\r\n  ParamListBase,\r\n  TabNavigationState<ParamListBase>,\r\n  MaterialTopTabNavigationOptions,\r\n  MaterialTopTabNavigationEventMap\r\n> &\r\n  TabRouterOptions &\r\n  MaterialTopTabNavigationConfig;\r\n\r\nfunction MaterialTopTabNavigator({\r\n  id,\r\n  initialRouteName,\r\n  backBehavior,\r\n  children,\r\n  screenListeners,\r\n  screenOptions,\r\n  ...restWithDeprecated\r\n}: Props) {\r\n  const {\r\n    // @ts-expect-error: swipeEnabled is deprecated\r\n    swipeEnabled,\r\n    // @ts-expect-error: lazy is deprecated\r\n    lazy,\r\n    // @ts-expect-error: lazyPlaceholder is deprecated\r\n    lazyPlaceholder,\r\n    // @ts-expect-error: lazyPreloadDistance is deprecated\r\n    lazyPreloadDistance,\r\n    // @ts-expect-error: tabBarOptions is deprecated\r\n    tabBarOptions,\r\n    ...rest\r\n  } = restWithDeprecated;\r\n\r\n  let defaultScreenOptions: MaterialTopTabNavigationOptions = {};\r\n\r\n  if (tabBarOptions) {\r\n    Object.assign(defaultScreenOptions, {\r\n      tabBarActiveTintColor: tabBarOptions.activeTintColor,\r\n      tabBarInactiveTintColor: tabBarOptions.inactiveTintColor,\r\n      tabBarPressColor: tabBarOptions.pressColor,\r\n      tabBarPressOpacity: tabBarOptions.pressOpacity,\r\n      tabBarShowLabel: tabBarOptions.showLabel,\r\n      tabBarShowIcon: tabBarOptions.showIcon,\r\n      tabBarAllowFontScaling: tabBarOptions.allowFontScaling,\r\n      tabBarBounces: tabBarOptions.bounces,\r\n      tabBarScrollEnabled: tabBarOptions.scrollEnabled,\r\n      tabBarIconStyle: tabBarOptions.iconStyle,\r\n      tabBarLabelStyle: tabBarOptions.labelStyle,\r\n      tabBarItemStyle: tabBarOptions.tabStyle,\r\n      tabBarBadge: tabBarOptions.renderBadge,\r\n      tabBarIndicator: tabBarOptions.renderIndicator,\r\n      tabBarIndicatorStyle: tabBarOptions.indicatorStyle,\r\n      tabBarIndicatorContainerStyle: tabBarOptions.indicatorContainerStyle,\r\n      tabBarContentContainerStyle: tabBarOptions.contentContainerStyle,\r\n      tabBarStyle: tabBarOptions.style,\r\n    });\r\n\r\n    (\r\n      Object.keys(\r\n        defaultScreenOptions\r\n      ) as (keyof MaterialTopTabNavigationOptions)[]\r\n    ).forEach((key) => {\r\n      if (defaultScreenOptions[key] === undefined) {\r\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n        delete defaultScreenOptions[key];\r\n      }\r\n    });\r\n\r\n    warnOnce(\r\n      tabBarOptions,\r\n      `Material Top Tab Navigator: 'tabBarOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\r\n        defaultScreenOptions,\r\n        null,\r\n        2\r\n      )}\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#options for more details.`\r\n    );\r\n  }\r\n\r\n  const deprecatedProps = {\r\n    swipeEnabled,\r\n    lazy,\r\n    lazyPlaceholder,\r\n    lazyPreloadDistance,\r\n  } as const;\r\n\r\n  Object.entries(deprecatedProps).forEach(([propName, propValue]) => {\r\n    if (propValue !== undefined) {\r\n      // @ts-expect-error: Object.entries doesn't return strict types\r\n      defaultScreenOptions[propName] = propValue;\r\n\r\n      warnOnce(\r\n        true,\r\n        `Material Top Tab Navigator: '${propName}' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/material-top-tab-navigator#${propName.toLowerCase()} for more details.`\r\n      );\r\n    }\r\n  });\r\n\r\n  const { state, descriptors, navigation, NavigationContent } =\r\n    useNavigationBuilder<\r\n      TabNavigationState<ParamListBase>,\r\n      TabRouterOptions,\r\n      TabActionHelpers<ParamListBase>,\r\n      MaterialTopTabNavigationOptions,\r\n      MaterialTopTabNavigationEventMap\r\n    >(TabRouter, {\r\n      id,\r\n      initialRouteName,\r\n      backBehavior,\r\n      children,\r\n      screenListeners,\r\n      screenOptions,\r\n      defaultScreenOptions,\r\n    });\r\n\r\n  return (\r\n    <NavigationContent>\r\n      <MaterialTopTabView\r\n        {...rest}\r\n        state={state}\r\n        navigation={navigation}\r\n        descriptors={descriptors}\r\n      />\r\n    </NavigationContent>\r\n  );\r\n}\r\n\r\nexport default createNavigatorFactory<\r\n  TabNavigationState<ParamListBase>,\r\n  MaterialTopTabNavigationOptions,\r\n  MaterialTopTabNavigationEventMap,\r\n  typeof MaterialTopTabNavigator\r\n>(MaterialTopTabNavigator);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}