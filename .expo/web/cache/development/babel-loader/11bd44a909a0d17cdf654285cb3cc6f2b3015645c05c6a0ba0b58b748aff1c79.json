{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconColor\", \"containerColor\", \"rippleColor\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"selected\", \"animated\", \"mode\", \"style\", \"theme\", \"testID\", \"loading\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { getIconButtonColor } from './utils';\nimport { useInternalTheme } from '../../core/theming';\nimport { forwardRef } from '../../utils/forwardRef';\nimport ActivityIndicator from '../ActivityIndicator';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nvar PADDING = 8;\nvar IconButton = forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    customContainerColor = _ref.containerColor,\n    customRippleColor = _ref.rippleColor,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 24 : _ref$size,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$animated = _ref.animated,\n    animated = _ref$animated === void 0 ? false : _ref$animated,\n    mode = _ref.mode,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'icon-button' : _ref$testID,\n    _ref$loading = _ref.loading,\n    loading = _ref$loading === void 0 ? false : _ref$loading,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isV3 = theme.isV3;\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var _getIconButtonColor = getIconButtonColor({\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      mode: mode,\n      customIconColor: customIconColor,\n      customContainerColor: customContainerColor,\n      customRippleColor: customRippleColor\n    }),\n    iconColor = _getIconButtonColor.iconColor,\n    rippleColor = _getIconButtonColor.rippleColor,\n    backgroundColor = _getIconButtonColor.backgroundColor,\n    borderColor = _getIconButtonColor.borderColor;\n  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$borderWidth = _ref2.borderWidth,\n    borderWidth = _ref2$borderWidth === void 0 ? isV3 && mode === 'outlined' && !selected ? 1 : 0 : _ref2$borderWidth,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? buttonSize / 2 : _ref2$borderRadius;\n  var borderStyles = {\n    borderWidth: borderWidth,\n    borderRadius: borderRadius,\n    borderColor: borderColor\n  };\n  return React.createElement(Surface, _extends({\n    ref: ref,\n    testID: `${testID}-container`,\n    style: [{\n      backgroundColor: backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: [styles.touchable, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    },\n    testID: testID\n  }, rest), loading ? React.createElement(ActivityIndicator, {\n    size: size,\n    color: iconColor\n  }) : React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n});\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default IconButton;","map":{"version":3,"names":["React","StyleSheet","getIconButtonColor","useInternalTheme","forwardRef","ActivityIndicator","CrossFadeIcon","Icon","Surface","TouchableRipple","PADDING","IconButton","_ref","ref","icon","customIconColor","iconColor","customContainerColor","containerColor","customRippleColor","rippleColor","_ref$size","size","accessibilityLabel","disabled","onPress","_ref$selected","selected","_ref$animated","animated","mode","style","themeOverrides","theme","_ref$testID","testID","_ref$loading","loading","rest","_objectWithoutProperties","_excluded","isV3","IconComponent","_getIconButtonColor","backgroundColor","borderColor","buttonSize","_ref2","flatten","_ref2$borderWidth","borderWidth","_ref2$borderRadius","borderRadius","borderStyles","createElement","_extends","width","height","styles","container","elevation","borderless","centered","touchable","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","hitSlop","supported","top","left","bottom","right","color","source","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\react-native-paper\\src\\components\\IconButton\\IconButton.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  GestureResponderEvent,\r\n  StyleProp,\r\n  StyleSheet,\r\n  ViewStyle,\r\n  View,\r\n  Animated,\r\n  ColorValue,\r\n} from 'react-native';\r\n\r\nimport { getIconButtonColor } from './utils';\r\nimport { useInternalTheme } from '../../core/theming';\r\nimport type { $RemoveChildren, ThemeProp } from '../../types';\r\nimport { forwardRef } from '../../utils/forwardRef';\r\nimport ActivityIndicator from '../ActivityIndicator';\r\nimport CrossFadeIcon from '../CrossFadeIcon';\r\nimport Icon, { IconSource } from '../Icon';\r\nimport Surface from '../Surface';\r\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\r\n\r\nconst PADDING = 8;\r\n\r\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\r\n\r\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\r\n  /**\r\n   * Icon to display.\r\n   */\r\n  icon: IconSource;\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\r\n   */\r\n  mode?: IconButtonMode;\r\n  /**\r\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\r\n   * Color of the icon.\r\n   */\r\n  iconColor?: string;\r\n  /**\r\n   * Background color of the icon container.\r\n   */\r\n  containerColor?: string;\r\n  /**\r\n   * Color of the ripple effect.\r\n   */\r\n  rippleColor?: ColorValue;\r\n  /**\r\n   * @supported Available in v5.x with theme version 3\r\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\r\n   */\r\n  selected?: boolean;\r\n  /**\r\n   * Size of the icon.\r\n   */\r\n  size?: number;\r\n  /**\r\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\r\n   */\r\n  disabled?: boolean;\r\n  /**\r\n   * Whether an icon change is animated.\r\n   */\r\n  animated?: boolean;\r\n  /**\r\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\r\n   */\r\n  accessibilityLabel?: string;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: (e: GestureResponderEvent) => void;\r\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\r\n  ref?: React.RefObject<View>;\r\n  /**\r\n   * TestID used for testing purposes\r\n   */\r\n  testID?: string;\r\n  /**\r\n   * @optional\r\n   */\r\n  theme?: ThemeProp;\r\n  /**\r\n   * Whether to show a loading indicator.\r\n   */\r\n  loading?: boolean;\r\n};\r\n\r\n/**\r\n * An icon button is a button which displays only an icon without a label.\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { IconButton, MD3Colors } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => (\r\n *   <IconButton\r\n *     icon=\"camera\"\r\n *     iconColor={MD3Colors.error50}\r\n *     size={20}\r\n *     onPress={() => console.log('Pressed')}\r\n *   />\r\n * );\r\n *\r\n * export default MyComponent;\r\n * ```\r\n *\r\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/docs/components/TouchableRipple\r\n */\r\nconst IconButton = forwardRef<View, Props>(\r\n  (\r\n    {\r\n      icon,\r\n      iconColor: customIconColor,\r\n      containerColor: customContainerColor,\r\n      rippleColor: customRippleColor,\r\n      size = 24,\r\n      accessibilityLabel,\r\n      disabled,\r\n      onPress,\r\n      selected = false,\r\n      animated = false,\r\n      mode,\r\n      style,\r\n      theme: themeOverrides,\r\n      testID = 'icon-button',\r\n      loading = false,\r\n      ...rest\r\n    }: Props,\r\n    ref\r\n  ) => {\r\n    const theme = useInternalTheme(themeOverrides);\r\n    const { isV3 } = theme;\r\n\r\n    const IconComponent = animated ? CrossFadeIcon : Icon;\r\n\r\n    const { iconColor, rippleColor, backgroundColor, borderColor } =\r\n      getIconButtonColor({\r\n        theme,\r\n        disabled,\r\n        selected,\r\n        mode,\r\n        customIconColor,\r\n        customContainerColor,\r\n        customRippleColor,\r\n      });\r\n\r\n    const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\r\n\r\n    const {\r\n      borderWidth = isV3 && mode === 'outlined' && !selected ? 1 : 0,\r\n      borderRadius = buttonSize / 2,\r\n    } = (StyleSheet.flatten(style) || {}) as ViewStyle;\r\n\r\n    const borderStyles = {\r\n      borderWidth,\r\n      borderRadius,\r\n      borderColor,\r\n    };\r\n\r\n    return (\r\n      <Surface\r\n        ref={ref}\r\n        testID={`${testID}-container`}\r\n        style={[\r\n          {\r\n            backgroundColor,\r\n            width: buttonSize,\r\n            height: buttonSize,\r\n          },\r\n          styles.container,\r\n          borderStyles,\r\n          !isV3 && disabled && styles.disabled,\r\n          style,\r\n        ]}\r\n        {...(isV3 && { elevation: 0 })}\r\n      >\r\n        <TouchableRipple\r\n          borderless\r\n          centered\r\n          onPress={onPress}\r\n          rippleColor={rippleColor}\r\n          accessibilityLabel={accessibilityLabel}\r\n          style={[styles.touchable, { borderRadius }]}\r\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\r\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\r\n          accessibilityComponentType=\"button\"\r\n          accessibilityRole=\"button\"\r\n          accessibilityState={{ disabled }}\r\n          disabled={disabled}\r\n          hitSlop={\r\n            TouchableRipple.supported\r\n              ? { top: 10, left: 10, bottom: 10, right: 10 }\r\n              : { top: 6, left: 6, bottom: 6, right: 6 }\r\n          }\r\n          testID={testID}\r\n          {...rest}\r\n        >\r\n          {loading ? (\r\n            <ActivityIndicator size={size} color={iconColor} />\r\n          ) : (\r\n            <IconComponent color={iconColor} source={icon} size={size} />\r\n          )}\r\n        </TouchableRipple>\r\n      </Surface>\r\n    );\r\n  }\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    overflow: 'hidden',\r\n    margin: 6,\r\n    elevation: 0,\r\n  },\r\n  touchable: {\r\n    flexGrow: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  disabled: {\r\n    opacity: 0.32,\r\n  },\r\n});\r\n\r\nexport default IconButton;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}