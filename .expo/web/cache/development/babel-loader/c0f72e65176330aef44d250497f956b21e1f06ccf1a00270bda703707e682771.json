{"ast":null,"code":"export function getQueryParams(input) {\n  var url = new URL(input, 'https://phony.example');\n  var errorCode = url.searchParams.get('errorCode');\n  url.searchParams.delete('errorCode');\n  var params = Object.fromEntries(url.searchParams);\n  if (url.hash) {\n    new URLSearchParams(url.hash.replace(/^#/, '')).forEach(function (value, key) {\n      params[key] = value;\n    });\n  }\n  return {\n    errorCode: errorCode,\n    params: params\n  };\n}","map":{"version":3,"names":["getQueryParams","input","url","URL","errorCode","searchParams","get","delete","params","Object","fromEntries","hash","URLSearchParams","replace","forEach","value","key"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\expo-auth-session\\src\\QueryParams.ts"],"sourcesContent":["export function getQueryParams(input: string): {\n  errorCode: string | null;\n  params: { [key: string]: string };\n} {\n  const url = new URL(input, 'https://phony.example');\n\n  // Pull errorCode off of params\n  const errorCode = url.searchParams.get('errorCode');\n  url.searchParams.delete('errorCode');\n\n  // Merge search and hash\n  const params = Object.fromEntries(\n    // @ts-ignore: [Symbol.iterator] is indeed, available on every platform.\n    url.searchParams\n  );\n  // Get hash (#abc=example)\n  if (url.hash) {\n    new URLSearchParams(url.hash.replace(/^#/, '')).forEach((value, key) => {\n      params[key] = value;\n    });\n  }\n\n  return {\n    errorCode,\n    params,\n  };\n}\n"],"mappings":"AAAA,OAAM,SAAUA,cAAcA,CAACC,KAAa;EAI1C,IAAMC,GAAG,GAAG,IAAIC,GAAG,CAACF,KAAK,EAAE,uBAAuB,CAAC;EAGnD,IAAMG,SAAS,GAAGF,GAAG,CAACG,YAAY,CAACC,GAAG,CAAC,WAAW,CAAC;EACnDJ,GAAG,CAACG,YAAY,CAACE,MAAM,CAAC,WAAW,CAAC;EAGpC,IAAMC,MAAM,GAAGC,MAAM,CAACC,WAAW,CAE/BR,GAAG,CAACG,YAAY,CACjB;EAED,IAAIH,GAAG,CAACS,IAAI,EAAE;IACZ,IAAIC,eAAe,CAACV,GAAG,CAACS,IAAI,CAACE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAACC,OAAO,CAAC,UAACC,KAAK,EAAEC,GAAG,EAAI;MACrER,MAAM,CAACQ,GAAG,CAAC,GAAGD,KAAK;IACrB,CAAC,CAAC;;EAGJ,OAAO;IACLX,SAAS,EAATA,SAAS;IACTI,MAAM,EAANA;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}