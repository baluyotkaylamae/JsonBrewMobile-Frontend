{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeLinking from './ExpoLinking';\nimport { parse } from './createURL';\nimport { validateURL } from './validateURL';\nexport function addEventListener(type, handler) {\n  return NativeLinking.addEventListener(type, handler);\n}\nexport function parseInitialURLAsync() {\n  return _parseInitialURLAsync.apply(this, arguments);\n}\nfunction _parseInitialURLAsync() {\n  _parseInitialURLAsync = _asyncToGenerator(function* () {\n    var initialUrl = yield NativeLinking.getInitialURL();\n    if (!initialUrl) {\n      return {\n        scheme: null,\n        hostname: null,\n        path: null,\n        queryParams: null\n      };\n    }\n    return parse(initialUrl);\n  });\n  return _parseInitialURLAsync.apply(this, arguments);\n}\nexport function sendIntent(_x, _x2) {\n  return _sendIntent.apply(this, arguments);\n}\nfunction _sendIntent() {\n  _sendIntent = _asyncToGenerator(function* (action, extras) {\n    if (Platform.OS === 'android') {\n      return yield NativeLinking.sendIntent(action, extras);\n    }\n    throw new UnavailabilityError('Linking', 'sendIntent');\n  });\n  return _sendIntent.apply(this, arguments);\n}\nexport function openSettings() {\n  return _openSettings.apply(this, arguments);\n}\nfunction _openSettings() {\n  _openSettings = _asyncToGenerator(function* () {\n    if (Platform.OS === 'web') {\n      throw new UnavailabilityError('Linking', 'openSettings');\n    }\n    if (NativeLinking.openSettings) {\n      return yield NativeLinking.openSettings();\n    }\n    yield openURL('app-settings:');\n  });\n  return _openSettings.apply(this, arguments);\n}\nexport function getInitialURL() {\n  return _getInitialURL.apply(this, arguments);\n}\nfunction _getInitialURL() {\n  _getInitialURL = _asyncToGenerator(function* () {\n    var _yield$NativeLinking$;\n    return (_yield$NativeLinking$ = yield NativeLinking.getInitialURL()) != null ? _yield$NativeLinking$ : null;\n  });\n  return _getInitialURL.apply(this, arguments);\n}\nexport function openURL(_x3) {\n  return _openURL.apply(this, arguments);\n}\nfunction _openURL() {\n  _openURL = _asyncToGenerator(function* (url) {\n    validateURL(url);\n    return yield NativeLinking.openURL(url);\n  });\n  return _openURL.apply(this, arguments);\n}\nexport function canOpenURL(_x4) {\n  return _canOpenURL.apply(this, arguments);\n}\nfunction _canOpenURL() {\n  _canOpenURL = _asyncToGenerator(function* (url) {\n    validateURL(url);\n    return yield NativeLinking.canOpenURL(url);\n  });\n  return _canOpenURL.apply(this, arguments);\n}\nexport function useURL() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    url = _useState2[0],\n    setLink = _useState2[1];\n  function onChange(event) {\n    setLink(event.url);\n  }\n  useEffect(function () {\n    getInitialURL().then(function (url) {\n      return setLink(url);\n    });\n    var subscription = addEventListener('url', onChange);\n    return function () {\n      return subscription.remove();\n    };\n  }, []);\n  return url;\n}\nexport * from './Linking.types';\nexport * from './Schemes';\nexport { parse, createURL } from './createURL';","map":{"version":3,"names":["UnavailabilityError","useEffect","useState","Platform","NativeLinking","parse","validateURL","addEventListener","type","handler","parseInitialURLAsync","_parseInitialURLAsync","apply","arguments","_asyncToGenerator","initialUrl","getInitialURL","scheme","hostname","path","queryParams","sendIntent","_x","_x2","_sendIntent","action","extras","OS","openSettings","_openSettings","openURL","_getInitialURL","_yield$NativeLinking$","_x3","_openURL","url","canOpenURL","_x4","_canOpenURL","useURL","_useState","_useState2","_slicedToArray","setLink","onChange","event","then","subscription","remove","createURL"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\expo-linking\\src\\Linking.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { useEffect, useState } from 'react';\nimport { EmitterSubscription, Platform } from 'react-native';\n\nimport NativeLinking from './ExpoLinking';\nimport { ParsedURL, SendIntentExtras, URLListener } from './Linking.types';\nimport { parse } from './createURL';\nimport { validateURL } from './validateURL';\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @return An EmitterSubscription that has the remove method from EventSubscription\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: 'url', handler: URLListener): EmitterSubscription {\n  return NativeLinking.addEventListener(type, handler);\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await NativeLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [IntentLauncher](./intent-launcher) instead, `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await NativeLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the appâ€™s custom settings, if it has any.\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (NativeLinking.openSettings) {\n    return await NativeLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await NativeLinking.getInitialURL()) ?? null;\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open, eg: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await NativeLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n *\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#linking-from-your-app).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await NativeLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n\n  return url;\n}\n\nexport * from './Linking.types';\nexport * from './Schemes';\nexport { parse, createURL } from './createURL';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}