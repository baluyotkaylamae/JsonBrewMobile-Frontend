{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport function createURL(path) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$queryParams = _ref.queryParams,\n    queryParams = _ref$queryParams === void 0 ? {} : _ref$queryParams;\n  if (typeof window === 'undefined') return '';\n  var url = new URL(path, window.location.origin);\n  Object.entries(queryParams).forEach(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      key = _ref3[0],\n      value = _ref3[1];\n    if (typeof value === 'string') {\n      url.searchParams.set(key, encodeURIComponent(value));\n    } else if (value != null) {\n      url.searchParams.set(key, value);\n    }\n  });\n  return url.toString().replace(/\\/$/, '');\n}\nexport function parse(url) {\n  var parsed;\n  try {\n    parsed = new URL(url);\n  } catch (_unused) {\n    if (typeof window === 'undefined') {\n      return {\n        hostname: null,\n        path: url,\n        queryParams: {},\n        scheme: null\n      };\n    }\n    return {\n      hostname: 'localhost',\n      path: url,\n      queryParams: {},\n      scheme: 'http'\n    };\n  }\n  var queryParams = {};\n  parsed.searchParams.forEach(function (value, key) {\n    queryParams[key] = decodeURIComponent(value);\n  });\n  return {\n    hostname: parsed.hostname || null,\n    path: !parsed.hostname && !parsed.pathname ? null : parsed.pathname === '' ? null : parsed.pathname.replace(/^\\//, ''),\n    queryParams: queryParams,\n    scheme: parsed.protocol.replace(/:$/, '')\n  };\n}","map":{"version":3,"names":["createURL","path","_ref","arguments","length","undefined","_ref$queryParams","queryParams","window","url","URL","location","origin","Object","entries","forEach","_ref2","_ref3","_slicedToArray","key","value","searchParams","set","encodeURIComponent","toString","replace","parse","parsed","_unused","hostname","scheme","decodeURIComponent","pathname","protocol"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\expo-linking\\src\\createURL.web.ts"],"sourcesContent":["import { CreateURLOptions, ParsedURL } from './Linking.types';\n\nexport function createURL(path: string, { queryParams = {} }: CreateURLOptions = {}): string {\n  if (typeof window === 'undefined') return '';\n  const url = new URL(path, window.location.origin);\n  Object.entries(queryParams).forEach(([key, value]) => {\n    if (typeof value === 'string') {\n      url.searchParams.set(key, encodeURIComponent(value));\n    } else if (value != null) {\n      url.searchParams.set(\n        key,\n        // @ts-expect-error: browser supports using array\n        value\n      );\n    }\n  });\n  return url.toString().replace(/\\/$/, '');\n}\n\nexport function parse(url: string): ParsedURL {\n  let parsed: URL;\n  try {\n    parsed = new URL(url);\n  } catch {\n    if (typeof window === 'undefined') {\n      return {\n        hostname: null,\n        path: url,\n        queryParams: {},\n        scheme: null,\n      };\n    }\n    return {\n      hostname: 'localhost',\n      path: url,\n      queryParams: {},\n      scheme: 'http',\n    };\n  }\n  const queryParams: Record<string, string> = {};\n  parsed.searchParams.forEach((value, key) => {\n    queryParams[key] = decodeURIComponent(value);\n  });\n  return {\n    hostname: parsed.hostname || null,\n    // TODO: We should probably update native to follow the default URL behavior closer.\n    path:\n      !parsed.hostname && !parsed.pathname\n        ? null\n        : parsed.pathname === ''\n        ? null\n        : parsed.pathname.replace(/^\\//, ''),\n    queryParams,\n    scheme: parsed.protocol.replace(/:$/, ''),\n  };\n}\n"],"mappings":";AAEA,OAAM,SAAUA,SAASA,CAACC,IAAY,EAA6C;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAF,EAAE;IAAAG,gBAAA,GAAAJ,IAAA,CAAzCK,WAAW;IAAXA,WAAW,GAAAD,gBAAA,cAAG,EAAE,GAAAA,gBAAA;EACxD,IAAI,OAAOE,MAAM,KAAK,WAAW,EAAE,OAAO,EAAE;EAC5C,IAAMC,GAAG,GAAG,IAAIC,GAAG,CAACT,IAAI,EAAEO,MAAM,CAACG,QAAQ,CAACC,MAAM,CAAC;EACjDC,MAAM,CAACC,OAAO,CAACP,WAAW,CAAC,CAACQ,OAAO,CAAC,UAAAC,KAAA,EAAiB;IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,KAAA;MAAfG,GAAG,GAAAF,KAAA;MAAEG,KAAK,GAAAH,KAAA;IAC9C,IAAI,OAAOG,KAAK,KAAK,QAAQ,EAAE;MAC7BX,GAAG,CAACY,YAAY,CAACC,GAAG,CAACH,GAAG,EAAEI,kBAAkB,CAACH,KAAK,CAAC,CAAC;KACrD,MAAM,IAAIA,KAAK,IAAI,IAAI,EAAE;MACxBX,GAAG,CAACY,YAAY,CAACC,GAAG,CAClBH,GAAG,EAEHC,KAAK,CACN;;EAEL,CAAC,CAAC;EACF,OAAOX,GAAG,CAACe,QAAQ,EAAE,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;AAC1C;AAEA,OAAM,SAAUC,KAAKA,CAACjB,GAAW;EAC/B,IAAIkB,MAAW;EACf,IAAI;IACFA,MAAM,GAAG,IAAIjB,GAAG,CAACD,GAAG,CAAC;GACtB,CAAC,OAAAmB,OAAA,EAAM;IACN,IAAI,OAAOpB,MAAM,KAAK,WAAW,EAAE;MACjC,OAAO;QACLqB,QAAQ,EAAE,IAAI;QACd5B,IAAI,EAAEQ,GAAG;QACTF,WAAW,EAAE,EAAE;QACfuB,MAAM,EAAE;OACT;;IAEH,OAAO;MACLD,QAAQ,EAAE,WAAW;MACrB5B,IAAI,EAAEQ,GAAG;MACTF,WAAW,EAAE,EAAE;MACfuB,MAAM,EAAE;KACT;;EAEH,IAAMvB,WAAW,GAA2B,EAAE;EAC9CoB,MAAM,CAACN,YAAY,CAACN,OAAO,CAAC,UAACK,KAAK,EAAED,GAAG,EAAI;IACzCZ,WAAW,CAACY,GAAG,CAAC,GAAGY,kBAAkB,CAACX,KAAK,CAAC;EAC9C,CAAC,CAAC;EACF,OAAO;IACLS,QAAQ,EAAEF,MAAM,CAACE,QAAQ,IAAI,IAAI;IAEjC5B,IAAI,EACF,CAAC0B,MAAM,CAACE,QAAQ,IAAI,CAACF,MAAM,CAACK,QAAQ,GAChC,IAAI,GACJL,MAAM,CAACK,QAAQ,KAAK,EAAE,GACtB,IAAI,GACJL,MAAM,CAACK,QAAQ,CAACP,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IACxClB,WAAW,EAAXA,WAAW;IACXuB,MAAM,EAAEH,MAAM,CAACM,QAAQ,CAACR,OAAO,CAAC,IAAI,EAAE,EAAE;GACzC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}