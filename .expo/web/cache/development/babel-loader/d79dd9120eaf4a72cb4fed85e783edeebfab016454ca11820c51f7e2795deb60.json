{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport DrawerItem from './DrawerItem';\nexport default function DrawerItemList(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors;\n  var buildLink = useLinkBuilder();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var drawerActiveTintColor = focusedOptions.drawerActiveTintColor,\n    drawerInactiveTintColor = focusedOptions.drawerInactiveTintColor,\n    drawerActiveBackgroundColor = focusedOptions.drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor = focusedOptions.drawerInactiveBackgroundColor;\n  return state.routes.map(function (route, i) {\n    var focused = i === state.index;\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (!event.defaultPrevented) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate({\n          name: route.name,\n          merge: true\n        })), {}, {\n          target: state.key\n        }));\n      }\n    };\n    var _descriptors$route$ke = descriptors[route.key].options,\n      title = _descriptors$route$ke.title,\n      drawerLabel = _descriptors$route$ke.drawerLabel,\n      drawerIcon = _descriptors$route$ke.drawerIcon,\n      drawerLabelStyle = _descriptors$route$ke.drawerLabelStyle,\n      drawerItemStyle = _descriptors$route$ke.drawerItemStyle,\n      drawerAllowFontScaling = _descriptors$route$ke.drawerAllowFontScaling;\n    return React.createElement(DrawerItem, {\n      key: route.key,\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      to: buildLink(route.name, route.params),\n      onPress: onPress\n    });\n  });\n}","map":{"version":3,"names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","DrawerItemList","_ref","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","_objectSpread","closeDrawer","navigate","name","merge","_descriptors$route$ke","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","createElement","label","undefined","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","allowFontScaling","labelStyle","style","to","params"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerItemList.tsx"],"sourcesContent":["import {\r\n  CommonActions,\r\n  DrawerActions,\r\n  DrawerNavigationState,\r\n  ParamListBase,\r\n  useLinkBuilder,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\n\r\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\r\nimport DrawerItem from './DrawerItem';\r\n\r\ntype Props = {\r\n  state: DrawerNavigationState<ParamListBase>;\r\n  navigation: DrawerNavigationHelpers;\r\n  descriptors: DrawerDescriptorMap;\r\n};\r\n\r\n/**\r\n * Component that renders the navigation list in the drawer.\r\n */\r\nexport default function DrawerItemList({\r\n  state,\r\n  navigation,\r\n  descriptors,\r\n}: Props) {\r\n  const buildLink = useLinkBuilder();\r\n\r\n  const focusedRoute = state.routes[state.index];\r\n  const focusedDescriptor = descriptors[focusedRoute.key];\r\n  const focusedOptions = focusedDescriptor.options;\r\n\r\n  const {\r\n    drawerActiveTintColor,\r\n    drawerInactiveTintColor,\r\n    drawerActiveBackgroundColor,\r\n    drawerInactiveBackgroundColor,\r\n  } = focusedOptions;\r\n\r\n  return state.routes.map((route, i) => {\r\n    const focused = i === state.index;\r\n\r\n    const onPress = () => {\r\n      const event = navigation.emit({\r\n        type: 'drawerItemPress',\r\n        target: route.key,\r\n        canPreventDefault: true,\r\n      });\r\n\r\n      if (!event.defaultPrevented) {\r\n        navigation.dispatch({\r\n          ...(focused\r\n            ? DrawerActions.closeDrawer()\r\n            : CommonActions.navigate({ name: route.name, merge: true })),\r\n          target: state.key,\r\n        });\r\n      }\r\n    };\r\n\r\n    const {\r\n      title,\r\n      drawerLabel,\r\n      drawerIcon,\r\n      drawerLabelStyle,\r\n      drawerItemStyle,\r\n      drawerAllowFontScaling,\r\n    } = descriptors[route.key].options;\r\n\r\n    return (\r\n      <DrawerItem\r\n        key={route.key}\r\n        label={\r\n          drawerLabel !== undefined\r\n            ? drawerLabel\r\n            : title !== undefined\r\n            ? title\r\n            : route.name\r\n        }\r\n        icon={drawerIcon}\r\n        focused={focused}\r\n        activeTintColor={drawerActiveTintColor}\r\n        inactiveTintColor={drawerInactiveTintColor}\r\n        activeBackgroundColor={drawerActiveBackgroundColor}\r\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\r\n        allowFontScaling={drawerAllowFontScaling}\r\n        labelStyle={drawerLabelStyle}\r\n        style={drawerItemStyle}\r\n        to={buildLink(route.name, route.params)}\r\n        onPress={onPress}\r\n      />\r\n    );\r\n  }) as React.ReactNode as React.ReactElement;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}