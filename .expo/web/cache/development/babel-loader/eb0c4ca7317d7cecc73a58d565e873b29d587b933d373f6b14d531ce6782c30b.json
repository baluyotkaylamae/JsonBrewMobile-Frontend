{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  clockRunning = Animated.clockRunning,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  spring = Animated.spring,\n  abs = Animated.abs,\n  add = Animated.add,\n  and = Animated.and,\n  block = Animated.block,\n  call = Animated.call,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  or = Animated.or,\n  set = Animated.set,\n  sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n  function DrawerView() {\n    var _this;\n    _classCallCheck(this, DrawerView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, DrawerView, [].concat(args));\n    _this.handleEndInteraction = function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    };\n    _this.handleStartInteraction = function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    };\n    _this.getDrawerWidth = function () {\n      var _this$props = _this.props,\n        drawerStyle = _this$props.drawerStyle,\n        dimensions = _this$props.dimensions;\n      var _ref4 = StyleSheet.flatten(drawerStyle) || {},\n        _ref4$width = _ref4.width,\n        width = _ref4$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref4$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    };\n    _this.clock = new Clock();\n    _this.isDrawerTypeFront = new Value(_this.props.drawerType === 'front' ? TRUE : FALSE);\n    _this.isOpen = new Value(_this.props.open ? TRUE : FALSE);\n    _this.nextIsOpen = new Value(UNSET);\n    _this.isSwiping = new Value(FALSE);\n    _this.initialDrawerWidth = _this.getDrawerWidth();\n    _this.gestureState = new Value(GestureState.UNDETERMINED);\n    _this.touchX = new Value(0);\n    _this.velocityX = new Value(0);\n    _this.gestureX = new Value(0);\n    _this.offsetX = new Value(0);\n    _this.position = new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0);\n    _this.containerWidth = new Value(_this.props.dimensions.width);\n    _this.drawerWidth = new Value(_this.initialDrawerWidth);\n    _this.drawerOpacity = new Value(_this.props.drawerType === 'permanent' ? 1 : 0);\n    _this.drawerPosition = new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    _this.touchDistanceFromDrawer = cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0);\n    _this.swipeDistanceThreshold = new Value(_this.props.swipeDistanceThreshold);\n    _this.swipeVelocityThreshold = new Value(_this.props.swipeVelocityThreshold);\n    _this.currentOpenValue = _this.props.open;\n    _this.isStatusBarHidden = false;\n    _this.manuallyTriggerSpring = new Value(FALSE);\n    _this.transitionTo = function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref5 = _slicedToArray(_ref, 1),\n          value = _ref5[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    };\n    _this.dragX = block([onChange(_this.isOpen, call([_this.isOpen], function (_ref2) {\n      var _ref6 = _slicedToArray(_ref2, 1),\n        value = _ref6[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref3) {\n      var _ref7 = _slicedToArray(_ref3, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]);\n    _this.translateX = cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0));\n    _this.progress = cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth)));\n    _this.handleGestureEvent = event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]);\n    _this.handleGestureStateChange = event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]);\n    _this.handleContainerLayout = function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    };\n    _this.handleDrawerLayout = function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    };\n    _this.toggleDrawer = function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n        _this.currentOpenValue = open;\n      }\n    };\n    _this.toggleStatusBar = function (hidden) {\n      var _this$props2 = _this.props,\n        hideStatusBar = _this$props2.hideStatusBarOnOpen,\n        statusBarAnimation = _this$props2.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    };\n    return _this;\n  }\n  _createClass(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        open = _this$props3.open,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n        hideStatusBar = _this$props3.hideStatusBarOnOpen;\n      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        open = _this$props4.open,\n        swipeEnabled = _this$props4.swipeEnabled,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerType = _this$props4.drawerType,\n        swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n        drawerStyle = _this$props4.drawerStyle,\n        overlayStyle = _this$props4.overlayStyle,\n        renderDrawerContent = _this$props4.renderDrawerContent,\n        renderSceneContent = _this$props4.renderSceneContent,\n        gestureHandlerProps = _this$props4.gestureHandlerProps,\n        overlayAccessibilityLabel = _this$props4.overlayAccessibilityLabel;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n      var hitSlop = isRight ? {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(DrawerProgressContext.Provider, {\n        value: progress\n      }, React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: contentTranslateX\n          }]\n        }]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent()), drawerType === 'permanent' ? null : React.createElement(Overlay, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        accessibilityLabel: overlayAccessibilityLabel,\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: drawerType === 'permanent' ? [] : [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ? isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"names":["React","I18nManager","InteractionManager","Keyboard","Platform","StatusBar","StyleSheet","View","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","_React$Component","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","handleEndInteraction","interactionHandle","undefined","clearInteractionHandle","handleStartInteraction","createInteractionHandle","getDrawerWidth","_this$props","props","drawerStyle","dimensions","_ref4","flatten","_ref4$width","width","endsWith","percentage","Number","replace","isFinite","clock","isDrawerTypeFront","drawerType","isOpen","open","nextIsOpen","isSwiping","initialDrawerWidth","gestureState","UNDETERMINED","touchX","velocityX","gestureX","offsetX","position","drawerPosition","containerWidth","drawerWidth","drawerOpacity","touchDistanceFromDrawer","swipeDistanceThreshold","swipeVelocityThreshold","currentOpenValue","isStatusBarHidden","manuallyTriggerSpring","transitionTo","toValue","frameTime","state","time","finished","velocity","_objectSpread","_ref","_ref5","_slicedToArray","value","Boolean","toggleDrawer","dragX","_ref2","_ref6","onOpen","onClose","pendingOpenValue","forceUpdate","_ref3","_ref7","keyboardDismissMode","dismiss","toggleStatusBar","ACTIVE","translateX","progress","handleGestureEvent","nativeEvent","x","translationX","handleGestureStateChange","s","handleContainerLayout","e","setValue","layout","handleDrawerLayout","requestAnimationFrame","hidden","_this$props2","hideStatusBar","hideStatusBarOnOpen","statusBarAnimation","setHidden","_createClass","key","componentDidUpdate","prevProps","_this$props3","componentWillUnmount","render","_this2","_this$props4","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","overlayAccessibilityLabel","isRight","contentTranslateX","drawerTranslateX","getConstants","isRTL","offset","hitSlop","right","left","createElement","Provider","_extends","activeOffsetX","failOffsetY","onGestureEvent","onHandlerStateChange","enabled","onLayout","style","styles","main","flexDirection","content","transform","accessibilityElementsHidden","importantForAccessibility","onPress","accessibilityLabel","Code","exec","removeClippedSubviews","OS","container","opacity","nonPermanent","zIndex","Component","default","create","backgroundColor","maxWidth","top","bottom","flex","select","web","overflow"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\@react-navigation\\drawer\\src\\views\\legacy\\Drawer.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  I18nManager,\r\n  InteractionManager,\r\n  Keyboard,\r\n  LayoutChangeEvent,\r\n  Platform,\r\n  StatusBar,\r\n  StyleSheet,\r\n  View,\r\n} from 'react-native';\r\nimport Animated from 'react-native-reanimated';\r\n\r\nimport type { DrawerProps } from '../../types';\r\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\r\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\r\nimport Overlay from './Overlay';\r\n\r\nconst {\r\n  Clock,\r\n  Value,\r\n  onChange,\r\n  clockRunning,\r\n  startClock,\r\n  stopClock,\r\n  spring,\r\n  abs,\r\n  add,\r\n  and,\r\n  block,\r\n  call,\r\n  cond,\r\n  divide,\r\n  eq,\r\n  event,\r\n  greaterThan,\r\n  lessThan,\r\n  max,\r\n  min,\r\n  multiply,\r\n  neq,\r\n  or,\r\n  set,\r\n  sub,\r\n} = Animated;\r\n\r\nconst TRUE = 1;\r\nconst FALSE = 0;\r\nconst NOOP = 0;\r\nconst UNSET = -1;\r\n\r\nconst DIRECTION_LEFT = 1;\r\nconst DIRECTION_RIGHT = -1;\r\n\r\nconst SWIPE_DISTANCE_MINIMUM = 5;\r\n\r\nconst DEFAULT_DRAWER_WIDTH = '80%';\r\n\r\nconst SPRING_CONFIG = {\r\n  stiffness: 1000,\r\n  damping: 500,\r\n  mass: 3,\r\n  overshootClamping: true,\r\n  restDisplacementThreshold: 0.01,\r\n  restSpeedThreshold: 0.01,\r\n};\r\n\r\nconst ANIMATED_ZERO = new Animated.Value(0);\r\nconst ANIMATED_ONE = new Animated.Value(1);\r\n\r\ntype Binary = 0 | 1;\r\n\r\nexport default class DrawerView extends React.Component<DrawerProps> {\r\n  componentDidUpdate(prevProps: DrawerProps) {\r\n    const {\r\n      open,\r\n      drawerPosition,\r\n      drawerType,\r\n      swipeDistanceThreshold,\r\n      swipeVelocityThreshold,\r\n      hideStatusBarOnOpen: hideStatusBar,\r\n    } = this.props;\r\n\r\n    if (\r\n      // If we're not in the middle of a transition, sync the drawer's open state\r\n      typeof this.pendingOpenValue !== 'boolean' ||\r\n      open !== this.pendingOpenValue\r\n    ) {\r\n      this.toggleDrawer(open);\r\n    }\r\n\r\n    this.pendingOpenValue = undefined;\r\n\r\n    if (open !== prevProps.open && hideStatusBar) {\r\n      this.toggleStatusBar(open);\r\n    }\r\n\r\n    if (prevProps.drawerPosition !== drawerPosition) {\r\n      this.drawerPosition.setValue(\r\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\r\n      );\r\n    }\r\n\r\n    if (prevProps.drawerType !== drawerType) {\r\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\r\n    }\r\n\r\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\r\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\r\n    }\r\n\r\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\r\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.toggleStatusBar(false);\r\n    this.handleEndInteraction();\r\n  }\r\n\r\n  private handleEndInteraction = () => {\r\n    if (this.interactionHandle !== undefined) {\r\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\r\n      this.interactionHandle = undefined;\r\n    }\r\n  };\r\n\r\n  private handleStartInteraction = () => {\r\n    if (this.interactionHandle === undefined) {\r\n      this.interactionHandle = InteractionManager.createInteractionHandle();\r\n    }\r\n  };\r\n\r\n  private getDrawerWidth = (): number => {\r\n    const { drawerStyle, dimensions } = this.props;\r\n    const { width = DEFAULT_DRAWER_WIDTH } =\r\n      StyleSheet.flatten(drawerStyle) || {};\r\n\r\n    if (typeof width === 'string' && width.endsWith('%')) {\r\n      // Try to calculate width if a percentage is given\r\n      const percentage = Number(width.replace(/%$/, ''));\r\n\r\n      if (Number.isFinite(percentage)) {\r\n        return dimensions.width * (percentage / 100);\r\n      }\r\n    }\r\n\r\n    return typeof width === 'number' ? width : 0;\r\n  };\r\n\r\n  private clock = new Clock();\r\n  private interactionHandle: number | undefined;\r\n\r\n  private isDrawerTypeFront = new Value<Binary>(\r\n    this.props.drawerType === 'front' ? TRUE : FALSE\r\n  );\r\n\r\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\r\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\r\n  private isSwiping = new Value<Binary>(FALSE);\r\n\r\n  private initialDrawerWidth = this.getDrawerWidth();\r\n\r\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\r\n  private touchX = new Value<number>(0);\r\n  private velocityX = new Value<number>(0);\r\n  private gestureX = new Value<number>(0);\r\n  private offsetX = new Value<number>(0);\r\n  private position = new Value<number>(\r\n    this.props.open\r\n      ? this.initialDrawerWidth *\r\n        (this.props.drawerPosition === 'right'\r\n          ? DIRECTION_RIGHT\r\n          : DIRECTION_LEFT)\r\n      : 0\r\n  );\r\n\r\n  private containerWidth = new Value<number>(this.props.dimensions.width);\r\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\r\n  private drawerOpacity = new Value<number>(\r\n    this.props.drawerType === 'permanent' ? 1 : 0\r\n  );\r\n  private drawerPosition = new Value<number>(\r\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\r\n  );\r\n\r\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\r\n  //\r\n  // While closing the drawer when user starts gesture outside of its area (in greyed\r\n  // out part of the window), we want the drawer to follow only once finger reaches the\r\n  // edge of the drawer.\r\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\r\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\r\n  // an arrow pointing left\r\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\r\n  //    +---------------+    +---------------+    +---------------+    +---------------+\r\n  //\r\n  // For the above to work properly we define animated value that will keep start position\r\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\r\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\r\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\r\n  // drawer be pulled back as soon as you start the pan.\r\n  //\r\n  // This is used only when drawerType is \"front\"\r\n  private touchDistanceFromDrawer = cond(\r\n    this.isDrawerTypeFront,\r\n    cond(\r\n      eq(this.drawerPosition, DIRECTION_LEFT),\r\n      max(\r\n        // Distance of touch start from left screen edge - Drawer width\r\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\r\n        0\r\n      ),\r\n      min(\r\n        multiply(\r\n          // Distance of drawer from left screen edge - Touch start point\r\n          sub(\r\n            sub(this.containerWidth, this.drawerWidth),\r\n            sub(this.touchX, this.gestureX)\r\n          ),\r\n          DIRECTION_RIGHT\r\n        ),\r\n        0\r\n      )\r\n    ),\r\n    0\r\n  );\r\n\r\n  private swipeDistanceThreshold = new Value<number>(\r\n    this.props.swipeDistanceThreshold\r\n  );\r\n  private swipeVelocityThreshold = new Value<number>(\r\n    this.props.swipeVelocityThreshold\r\n  );\r\n\r\n  private currentOpenValue: boolean = this.props.open;\r\n  private pendingOpenValue: boolean | undefined;\r\n\r\n  private isStatusBarHidden: boolean = false;\r\n\r\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\r\n\r\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\r\n    const toValue = new Value(0);\r\n    const frameTime = new Value(0);\r\n\r\n    const state = {\r\n      position: this.position,\r\n      time: new Value(0),\r\n      finished: new Value(FALSE),\r\n      velocity: new Value(0),\r\n    };\r\n\r\n    return block([\r\n      cond(clockRunning(this.clock), NOOP, [\r\n        // Animation wasn't running before\r\n        // Set the initial values and start the clock\r\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\r\n        set(frameTime, 0),\r\n        set(state.time, 0),\r\n        set(state.finished, FALSE),\r\n        set(state.velocity, this.velocityX),\r\n        set(this.isOpen, isOpen),\r\n        startClock(this.clock),\r\n        call([], this.handleStartInteraction),\r\n        set(this.manuallyTriggerSpring, FALSE),\r\n      ]),\r\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\r\n      cond(state.finished, [\r\n        // Reset gesture and velocity from previous gesture\r\n        set(this.touchX, 0),\r\n        set(this.gestureX, 0),\r\n        set(this.velocityX, 0),\r\n        set(this.offsetX, 0),\r\n        // When the animation finishes, stop the clock\r\n        stopClock(this.clock),\r\n        call([this.isOpen], ([value]: readonly Binary[]) => {\r\n          const open = Boolean(value);\r\n          this.handleEndInteraction();\r\n\r\n          if (open !== this.props.open) {\r\n            // Sync drawer's state after animation finished\r\n            // This shouldn't be necessary, but there seems to be an issue on iOS\r\n            this.toggleDrawer(this.props.open);\r\n          }\r\n        }),\r\n      ]),\r\n    ]);\r\n  };\r\n\r\n  private dragX = block([\r\n    onChange(\r\n      this.isOpen,\r\n      call([this.isOpen], ([value]: readonly Binary[]) => {\r\n        const open = Boolean(value);\r\n\r\n        this.currentOpenValue = open;\r\n\r\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\r\n        if (open !== this.props.open) {\r\n          // If the mode changed, update state\r\n          if (open) {\r\n            this.props.onOpen();\r\n          } else {\r\n            this.props.onClose();\r\n          }\r\n\r\n          this.pendingOpenValue = open;\r\n\r\n          // Force componentDidUpdate to fire, whether user does a setState or not\r\n          // This allows us to detect when the user drops the update and revert back\r\n          // It's necessary to make sure that the state stays in sync\r\n          this.forceUpdate();\r\n        }\r\n      })\r\n    ),\r\n    onChange(\r\n      this.nextIsOpen,\r\n      cond(neq(this.nextIsOpen, UNSET), [\r\n        // Stop any running animations\r\n        cond(clockRunning(this.clock), stopClock(this.clock)),\r\n        // Update the open value to trigger the transition\r\n        set(this.isOpen, this.nextIsOpen),\r\n        set(this.gestureX, 0),\r\n        set(this.nextIsOpen, UNSET),\r\n      ])\r\n    ),\r\n    // This block must be after the this.isOpen listener since we check for current value\r\n    onChange(\r\n      this.isSwiping,\r\n      // Listen to updates for this value only when it changes\r\n      // Without `onChange`, this will fire even if the value didn't change\r\n      // We don't want to call the listeners if the value didn't change\r\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\r\n        const { keyboardDismissMode } = this.props;\r\n\r\n        if (value === TRUE) {\r\n          if (keyboardDismissMode === 'on-drag') {\r\n            Keyboard.dismiss();\r\n          }\r\n\r\n          this.toggleStatusBar(true);\r\n        } else {\r\n          this.toggleStatusBar(this.currentOpenValue);\r\n        }\r\n      })\r\n    ),\r\n    onChange(\r\n      this.gestureState,\r\n      cond(\r\n        eq(this.gestureState, GestureState.ACTIVE),\r\n        call([], this.handleStartInteraction)\r\n      )\r\n    ),\r\n    cond(\r\n      eq(this.gestureState, GestureState.ACTIVE),\r\n      [\r\n        cond(this.isSwiping, NOOP, [\r\n          // We weren't dragging before, set it to true\r\n          set(this.isSwiping, TRUE),\r\n          // Also update the drag offset to the last position\r\n          set(this.offsetX, this.position),\r\n        ]),\r\n        // Update position with previous offset + gesture distance\r\n        set(\r\n          this.position,\r\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\r\n        ),\r\n        // Stop animations while we're dragging\r\n        stopClock(this.clock),\r\n      ],\r\n      [\r\n        set(this.isSwiping, FALSE),\r\n        set(this.touchX, 0),\r\n        this.transitionTo(\r\n          cond(\r\n            this.manuallyTriggerSpring,\r\n            this.isOpen,\r\n            cond(\r\n              or(\r\n                and(\r\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\r\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\r\n                ),\r\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\r\n              ),\r\n              cond(\r\n                eq(this.drawerPosition, DIRECTION_LEFT),\r\n                // If swiped to right, open the drawer, otherwise close it\r\n                greaterThan(\r\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\r\n                  0\r\n                ),\r\n                // If swiped to left, open the drawer, otherwise close it\r\n                lessThan(\r\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\r\n                  0\r\n                )\r\n              ),\r\n              this.isOpen\r\n            )\r\n          )\r\n        ),\r\n      ]\r\n    ),\r\n    this.position,\r\n  ]);\r\n\r\n  private translateX = cond(\r\n    eq(this.drawerPosition, DIRECTION_RIGHT),\r\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\r\n    max(min(this.drawerWidth, this.dragX), 0)\r\n  );\r\n\r\n  private progress = cond(\r\n    // Check if the drawer width is available to avoid division by zero\r\n    eq(this.drawerWidth, 0),\r\n    0,\r\n    abs(divide(this.translateX, this.drawerWidth))\r\n  );\r\n\r\n  private handleGestureEvent = event([\r\n    {\r\n      nativeEvent: {\r\n        x: this.touchX,\r\n        translationX: this.gestureX,\r\n        velocityX: this.velocityX,\r\n      },\r\n    },\r\n  ]);\r\n\r\n  private handleGestureStateChange = event([\r\n    {\r\n      nativeEvent: {\r\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\r\n      },\r\n    },\r\n  ]);\r\n\r\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\r\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\r\n\r\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\r\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\r\n    this.toggleDrawer(this.props.open);\r\n\r\n    // Until layout is available, drawer is hidden with opacity: 0 by default\r\n    // Show it in the next frame when layout is available\r\n    // If we don't delay it until the next frame, there's a visible flicker\r\n    requestAnimationFrame(() =>\r\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\r\n    );\r\n  };\r\n\r\n  private toggleDrawer = (open: boolean) => {\r\n    if (this.currentOpenValue !== open) {\r\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\r\n\r\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\r\n      // However, there's a race condition on Android, so we need to set a bit earlier\r\n      this.currentOpenValue = open;\r\n    }\r\n  };\r\n\r\n  private toggleStatusBar = (hidden: boolean) => {\r\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\r\n      this.props;\r\n\r\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\r\n      this.isStatusBarHidden = hidden;\r\n      StatusBar.setHidden(hidden, statusBarAnimation);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      open,\r\n      swipeEnabled,\r\n      drawerPosition,\r\n      drawerType,\r\n      swipeEdgeWidth,\r\n      drawerStyle,\r\n      overlayStyle,\r\n      renderDrawerContent,\r\n      renderSceneContent,\r\n      gestureHandlerProps,\r\n      overlayAccessibilityLabel,\r\n    } = this.props;\r\n\r\n    const isOpen = drawerType === 'permanent' ? true : open;\r\n    const isRight = drawerPosition === 'right';\r\n\r\n    const contentTranslateX =\r\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\r\n\r\n    const drawerTranslateX =\r\n      drawerType === 'back'\r\n        ? I18nManager.getConstants().isRTL\r\n          ? multiply(\r\n              sub(this.containerWidth, this.drawerWidth),\r\n              isRight ? 1 : -1\r\n            )\r\n          : ANIMATED_ZERO\r\n        : this.translateX;\r\n\r\n    const offset =\r\n      drawerType === 'back'\r\n        ? 0\r\n        : I18nManager.getConstants().isRTL\r\n        ? '100%'\r\n        : multiply(this.drawerWidth, -1);\r\n\r\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\r\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\r\n    const hitSlop = isRight\r\n      ? // Extend hitSlop to the side of the screen when drawer is closed\r\n        // This lets the user drag the drawer from the side of the screen\r\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\r\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\r\n\r\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\r\n\r\n    return (\r\n      <DrawerProgressContext.Provider value={progress}>\r\n        <PanGestureHandler\r\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\r\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\r\n          onGestureEvent={this.handleGestureEvent}\r\n          onHandlerStateChange={this.handleGestureStateChange}\r\n          hitSlop={hitSlop}\r\n          enabled={drawerType !== 'permanent' && swipeEnabled}\r\n          {...gestureHandlerProps}\r\n        >\r\n          <Animated.View\r\n            onLayout={this.handleContainerLayout}\r\n            style={[\r\n              styles.main,\r\n              {\r\n                flexDirection:\r\n                  drawerType === 'permanent' && !isRight\r\n                    ? 'row-reverse'\r\n                    : 'row',\r\n              },\r\n            ]}\r\n          >\r\n            <Animated.View\r\n              style={[\r\n                styles.content,\r\n                {\r\n                  transform:\r\n                    drawerType === 'permanent'\r\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\r\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\r\n                        []\r\n                      : [{ translateX: contentTranslateX }],\r\n                },\r\n              ]}\r\n            >\r\n              <View\r\n                accessibilityElementsHidden={\r\n                  isOpen && drawerType !== 'permanent'\r\n                }\r\n                importantForAccessibility={\r\n                  isOpen && drawerType !== 'permanent'\r\n                    ? 'no-hide-descendants'\r\n                    : 'auto'\r\n                }\r\n                style={styles.content}\r\n              >\r\n                {renderSceneContent()}\r\n              </View>\r\n              {\r\n                // Disable overlay if sidebar is permanent\r\n                drawerType === 'permanent' ? null : (\r\n                  <Overlay\r\n                    progress={progress}\r\n                    onPress={() => this.toggleDrawer(false)}\r\n                    accessibilityLabel={overlayAccessibilityLabel}\r\n                    style={overlayStyle as any}\r\n                    accessibilityElementsHidden={!isOpen}\r\n                    importantForAccessibility={\r\n                      isOpen ? 'auto' : 'no-hide-descendants'\r\n                    }\r\n                  />\r\n                )\r\n              }\r\n            </Animated.View>\r\n            <Animated.Code\r\n              // This is needed to make sure that container width updates with `setValue`\r\n              // Without this, it won't update when not used in styles\r\n              exec={this.containerWidth}\r\n            />\r\n            {drawerType === 'permanent' ? null : (\r\n              <Animated.Code\r\n                exec={block([\r\n                  onChange(this.manuallyTriggerSpring, [\r\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\r\n                      set(this.nextIsOpen, FALSE),\r\n                      call([], () => (this.currentOpenValue = false)),\r\n                    ]),\r\n                  ]),\r\n                ])}\r\n              />\r\n            )}\r\n            <Animated.View\r\n              removeClippedSubviews={Platform.OS !== 'ios'}\r\n              onLayout={this.handleDrawerLayout}\r\n              style={[\r\n                styles.container,\r\n                {\r\n                  transform:\r\n                    drawerType === 'permanent'\r\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\r\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\r\n                        []\r\n                      : [{ translateX: drawerTranslateX }],\r\n                  opacity: this.drawerOpacity,\r\n                },\r\n                drawerType === 'permanent'\r\n                  ? // Without this, the `left`/`right` values don't get reset\r\n                    isRight\r\n                    ? { right: 0 }\r\n                    : { left: 0 }\r\n                  : [\r\n                      styles.nonPermanent,\r\n                      isRight ? { right: offset } : { left: offset },\r\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\r\n                    ],\r\n                drawerStyle as any,\r\n              ]}\r\n            >\r\n              {renderDrawerContent()}\r\n            </Animated.View>\r\n          </Animated.View>\r\n        </PanGestureHandler>\r\n      </DrawerProgressContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    backgroundColor: 'white',\r\n    maxWidth: '100%',\r\n  },\r\n  nonPermanent: {\r\n    position: 'absolute',\r\n    top: 0,\r\n    bottom: 0,\r\n    width: DEFAULT_DRAWER_WIDTH,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    ...Platform.select({\r\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\r\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\r\n      web: null,\r\n      default: { overflow: 'hidden' },\r\n    }),\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}