{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _ref, _rawUpdatesManifest;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { CodedError, NativeModulesProxy } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom } from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\nexport { AppOwnership, ExecutionEnvironment, UserInterfaceIdiom };\nif (!ExponentConstants) {\n  console.warn(\"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\");\n}\nvar rawUpdatesManifest = null;\nif (NativeModulesProxy.ExpoUpdates) {\n  var updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawUpdatesManifest = updatesManifest;\n  }\n}\nvar rawDevLauncherManifest = null;\nif (NativeModules.EXDevLauncher) {\n  var devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawDevLauncherManifest = devLauncherManifest;\n  }\n}\nvar rawAppConfig = null;\nif (ExponentConstants && ExponentConstants.manifest) {\n  var appConfig = ExponentConstants.manifest;\n  if (typeof appConfig === 'string') {\n    rawAppConfig = JSON.parse(appConfig);\n  } else {\n    rawAppConfig = appConfig;\n  }\n}\nvar rawManifest = (_ref = (_rawUpdatesManifest = rawUpdatesManifest) != null ? _rawUpdatesManifest : rawDevLauncherManifest) != null ? _ref : rawAppConfig;\nvar _ref2 = ExponentConstants || {},\n  name = _ref2.name,\n  appOwnership = _ref2.appOwnership,\n  nativeConstants = _objectWithoutProperties(_ref2, [\"name\", \"appOwnership\"]);\nvar warnedAboutManifestField = false;\nvar constants = _objectSpread(_objectSpread({}, nativeConstants), {}, {\n  appOwnership: appOwnership != null ? appOwnership : null\n});\nObject.defineProperties(constants, {\n  installationId: {\n    get: function get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false\n  },\n  __unsafeNoWarnManifest: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n      if (!maybeManifest || !isBareManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  __unsafeNoWarnManifest2: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false\n  },\n  manifest: {\n    get: function get() {\n      if (__DEV__ && !warnedAboutManifestField) {\n        console.warn(`Constants.manifest has been deprecated in favor of Constants.expoConfig.`);\n        warnedAboutManifestField = true;\n      }\n      var maybeManifest = getManifest();\n      if (!maybeManifest || !isBareManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  manifest2: {\n    get: function get() {\n      var maybeManifest = getManifest();\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true\n  },\n  expoConfig: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (NativeModulesProxy.ExpoUpdates && NativeModulesProxy.ExpoUpdates.isEmbeddedLaunch) {\n        return rawAppConfig;\n      }\n      if (isManifest(maybeManifest)) {\n        var _maybeManifest$extra$, _maybeManifest$extra;\n        return (_maybeManifest$extra$ = (_maybeManifest$extra = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra.expoClient) != null ? _maybeManifest$extra$ : null;\n      } else if (isBareManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  expoGoConfig: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (isManifest(maybeManifest)) {\n        var _maybeManifest$extra$2, _maybeManifest$extra2;\n        return (_maybeManifest$extra$2 = (_maybeManifest$extra2 = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra2.expoGo) != null ? _maybeManifest$extra$2 : null;\n      } else if (isBareManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  easConfig: {\n    get: function get() {\n      var maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n      if (isManifest(maybeManifest)) {\n        var _maybeManifest$extra$3, _maybeManifest$extra3;\n        return (_maybeManifest$extra$3 = (_maybeManifest$extra3 = maybeManifest.extra) == null ? void 0 : _maybeManifest$extra3.eas) != null ? _maybeManifest$extra$3 : null;\n      } else if (isBareManifest(maybeManifest)) {\n        return maybeManifest;\n      }\n      return null;\n    },\n    enumerable: true\n  },\n  __rawManifest_TEST: {\n    get: function get() {\n      return rawManifest;\n    },\n    set: function set(value) {\n      rawManifest = value;\n    },\n    enumerable: false\n  }\n});\nfunction isBareManifest(manifest) {\n  return !isManifest(manifest);\n}\nfunction isManifest(manifest) {\n  return 'metadata' in manifest;\n}\nfunction getManifest() {\n  var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  if (!rawManifest) {\n    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (nativeConstants.executionEnvironment === ExecutionEnvironment.Bare && Platform.OS !== 'web') {\n      if (!suppressWarning) {\n        console.warn(`Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`);\n      }\n    } else if (nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient || nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone) {\n      throw new CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', `Constants.manifest is ${invalidManifestType}, must be an object.`);\n    }\n  }\n  return rawManifest;\n}\nexport default constants;","map":{"version":3,"names":["CodedError","NativeModulesProxy","Platform","NativeModules","AppOwnership","ExecutionEnvironment","UserInterfaceIdiom","ExponentConstants","console","warn","rawUpdatesManifest","ExpoUpdates","updatesManifest","manifest","manifestString","JSON","parse","Object","keys","length","rawDevLauncherManifest","EXDevLauncher","devLauncherManifest","rawAppConfig","appConfig","rawManifest","_ref","_rawUpdatesManifest","_ref2","name","appOwnership","nativeConstants","_objectWithoutProperties","warnedAboutManifestField","constants","_objectSpread","defineProperties","installationId","get","enumerable","__unsafeNoWarnManifest","maybeManifest","getManifest","isBareManifest","__unsafeNoWarnManifest2","isManifest","__DEV__","manifest2","expoConfig","isEmbeddedLaunch","_maybeManifest$extra$","_maybeManifest$extra","extra","expoClient","expoGoConfig","_maybeManifest$extra$2","_maybeManifest$extra2","expoGo","easConfig","_maybeManifest$extra$3","_maybeManifest$extra3","eas","__rawManifest_TEST","set","value","suppressWarning","arguments","undefined","invalidManifestType","executionEnvironment","Bare","OS","StoreClient","Standalone"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\expo-constants\\src\\Constants.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n// @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\nimport type { Manifest as DevLauncherManifest } from 'expo-dev-launcher';\nimport type {\n  BareManifest,\n  EASConfig,\n  ExpoGoConfig,\n  NewManifest,\n  // @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\n} from 'expo-manifests';\nimport { CodedError, NativeModulesProxy } from 'expo-modules-core';\n// @ts-ignore -- optional interface, will gracefully degrade to `any` if not installed\nimport type { Manifest as UpdatesManifest } from 'expo-updates';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawUpdatesManifest: UpdatesManifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest: object | undefined;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawUpdatesManifest = updatesManifest as any;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nlet rawDevLauncherManifest: DevLauncherManifest | null = null;\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawDevLauncherManifest = devLauncherManifest as any;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nlet rawAppConfig: ExpoConfig | null = null;\nif (ExponentConstants && ExponentConstants.manifest) {\n  const appConfig: object | string = ExponentConstants.manifest;\n\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof appConfig === 'string') {\n    rawAppConfig = JSON.parse(appConfig);\n  } else {\n    rawAppConfig = appConfig as any;\n  }\n}\n\ntype RawManifest = UpdatesManifest | DevLauncherManifest | ExpoConfig;\nlet rawManifest: RawManifest | null = rawUpdatesManifest ?? rawDevLauncherManifest ?? rawAppConfig;\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutManifestField = false;\n\nconst constants: Constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n};\n\nObject.defineProperties(constants, {\n  installationId: {\n    get() {\n      return nativeConstants.installationId;\n    },\n    enumerable: false,\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  __unsafeNoWarnManifest: {\n    get(): BareManifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isBareManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  __unsafeNoWarnManifest2: {\n    get(): NewManifest | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: false,\n  },\n  manifest: {\n    get(): BareManifest | null {\n      if (__DEV__ && !warnedAboutManifestField) {\n        console.warn(`Constants.manifest has been deprecated in favor of Constants.expoConfig.`);\n        warnedAboutManifestField = true;\n      }\n\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isBareManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  manifest2: {\n    get(): NewManifest | null {\n      const maybeManifest = getManifest();\n      if (!maybeManifest || !isManifest(maybeManifest)) {\n        return null;\n      }\n      return maybeManifest;\n    },\n    enumerable: true,\n  },\n  expoConfig: {\n    get():\n      | (ExpoConfig & {\n          /**\n           * Only present during development using @expo/cli.\n           */\n          hostUri?: string;\n        })\n      | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      // if running an embedded update, maybeManifest is a BareManifest which doesn't have\n      // the expo config. Instead, the embedded expo-constants app.config should be used.\n      if (NativeModulesProxy.ExpoUpdates && NativeModulesProxy.ExpoUpdates.isEmbeddedLaunch) {\n        return rawAppConfig;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoClient ?? null;\n      } else if (isBareManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  expoGoConfig: {\n    get(): ExpoGoConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.expoGo ?? null;\n      } else if (isBareManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  easConfig: {\n    get(): EASConfig | null {\n      const maybeManifest = getManifest(true);\n      if (!maybeManifest) {\n        return null;\n      }\n\n      if (isManifest(maybeManifest)) {\n        return maybeManifest.extra?.eas ?? null;\n      } else if (isBareManifest(maybeManifest)) {\n        return maybeManifest as any;\n      }\n\n      return null;\n    },\n    enumerable: true,\n  },\n  __rawManifest_TEST: {\n    get(): RawManifest | null {\n      return rawManifest;\n    },\n    set(value: RawManifest | null) {\n      rawManifest = value;\n    },\n    enumerable: false,\n  },\n});\n\nfunction isBareManifest(manifest: RawManifest): manifest is BareManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: RawManifest): manifest is NewManifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): RawManifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}