{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"C:\\\\JsonMobile\\\\frontend\\\\node_modules\\\\react-native-keyboard-aware-scroll-view\\\\lib\\\\KeyboardAwareHOC.js\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { isIphoneX } from 'react-native-iphone-x-helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _KAM_DEFAULT_TAB_BAR_HEIGHT = isIphoneX() ? 83 : 49;\nvar _KAM_KEYBOARD_OPENING_TIME = 250;\nvar _KAM_EXTRA_HEIGHT = 75;\nvar supportedKeyboardEvents = ['keyboardWillShow', 'keyboardDidShow', 'keyboardWillHide', 'keyboardDidHide', 'keyboardWillChangeFrame', 'keyboardDidChangeFrame'];\nvar keyboardEventToCallbackName = function keyboardEventToCallbackName(eventName) {\n  return 'on' + eventName[0].toUpperCase() + eventName.substring(1);\n};\nvar keyboardEventPropTypes = supportedKeyboardEvents.reduce(function (acc, eventName) {\n  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, keyboardEventToCallbackName(eventName), PropTypes.func));\n}, {});\nvar keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(function (acc, eventName) {\n  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, keyboardEventToCallbackName(eventName), Function));\n}, {});\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent && (WrappedComponent.displayName || WrappedComponent.name) || 'Component';\n}\nvar ScrollIntoViewDefaultOptions = {\n  enableOnAndroid: false,\n  contentContainerStyle: undefined,\n  enableAutomaticScroll: true,\n  extraHeight: _KAM_EXTRA_HEIGHT,\n  extraScrollHeight: 0,\n  enableResetScrollToCoords: true,\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n  viewIsInsideTabBar: false,\n  refPropName: 'ref',\n  extractNativeRef: function extractNativeRef(ref) {\n    var shouldCallGetNode = !Platform.constants || Platform.constants.reactNativeVersion.major === 0 && Platform.constants.reactNativeVersion.minor < 62;\n    if (ref.getNode && shouldCallGetNode) {\n      return ref.getNode();\n    } else {\n      return ref;\n    }\n  }\n};\nfunction KeyboardAwareHOC(ScrollableComponent) {\n  var _Class;\n  var userOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var hocOptions = _objectSpread(_objectSpread({}, ScrollIntoViewDefaultOptions), userOptions);\n  return _Class = function (_React$Component) {\n    _inherits(_Class, _React$Component);\n    function _Class(props) {\n      var _this;\n      _classCallCheck(this, _Class);\n      _this = _callSuper(this, _Class, [props]);\n      _this.getScrollResponder = function () {\n        return _this._rnkasv_keyboardView && _this._rnkasv_keyboardView.getScrollResponder && _this._rnkasv_keyboardView.getScrollResponder();\n      };\n      _this.scrollToPosition = function (x, y) {\n        var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var responder = _this.getScrollResponder();\n        if (!responder) {\n          return;\n        }\n        if (responder.scrollResponderScrollTo) {\n          responder.scrollResponderScrollTo({\n            x: x,\n            y: y,\n            animated: animated\n          });\n        } else if (responder.scrollTo) {\n          responder.scrollTo({\n            x: x,\n            y: y,\n            animated: animated\n          });\n        }\n      };\n      _this.scrollToEnd = function () {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var responder = _this.getScrollResponder();\n        if (!responder) {\n          return;\n        }\n        if (responder.scrollResponderScrollToEnd) {\n          responder.scrollResponderScrollToEnd({\n            animated: animated\n          });\n        } else if (responder.scrollToEnd) {\n          responder.scrollToEnd({\n            animated: animated\n          });\n        }\n      };\n      _this.scrollForExtraHeightOnAndroid = function (extraHeight) {\n        _this.scrollToPosition(0, _this.position.y + extraHeight, true);\n      };\n      _this.scrollToFocusedInput = function (reactNode, extraHeight, keyboardOpeningTime) {\n        if (extraHeight === undefined) {\n          extraHeight = _this.props.extraHeight || 0;\n        }\n        if (keyboardOpeningTime === undefined) {\n          keyboardOpeningTime = _this.props.keyboardOpeningTime || 0;\n        }\n        setTimeout(function () {\n          if (!_this.mountedComponent) {\n            return;\n          }\n          var responder = _this.getScrollResponder();\n          responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);\n        }, keyboardOpeningTime);\n      };\n      _this.scrollIntoView = function () {\n        var _ref = _asyncToGenerator(function* (element) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          if (!_this._rnkasv_keyboardView || !element) {\n            return;\n          }\n          var _yield$Promise$all = yield Promise.all([_this._measureElement(_this._rnkasv_keyboardView), _this._measureElement(element)]),\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n            parentLayout = _yield$Promise$all2[0],\n            childLayout = _yield$Promise$all2[1];\n          var getScrollPosition = options.getScrollPosition || _this._defaultGetScrollPosition;\n          var _getScrollPosition = getScrollPosition(parentLayout, childLayout, _this.position),\n            x = _getScrollPosition.x,\n            y = _getScrollPosition.y,\n            animated = _getScrollPosition.animated;\n          _this.scrollToPosition(x, y, animated);\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      _this._defaultGetScrollPosition = function (parentLayout, childLayout, contentOffset) {\n        return {\n          x: 0,\n          y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\n          animated: true\n        };\n      };\n      _this._measureElement = function (element) {\n        var node = findNodeHandle(element);\n        return new Promise(function (resolve) {\n          UIManager.measureInWindow(node, function (x, y, width, height) {\n            resolve({\n              x: x,\n              y: y,\n              width: width,\n              height: height\n            });\n          });\n        });\n      };\n      _this._updateKeyboardSpace = function (frames) {\n        if (_this.props.enableAutomaticScroll) {\n          var keyboardSpace = frames.endCoordinates.height + _this.props.extraScrollHeight;\n          if (_this.props.viewIsInsideTabBar) {\n            keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT;\n          }\n          _this.setState({\n            keyboardSpace: keyboardSpace\n          });\n          var currentlyFocusedField = TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField();\n          var responder = _this.getScrollResponder();\n          if (!currentlyFocusedField || !responder) {\n            return;\n          }\n          UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {\n            if (isAncestor) {\n              UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {\n                var textInputBottomPosition = y + height;\n                var keyboardPosition = frames.endCoordinates.screenY;\n                var totalExtraHeight = _this.props.extraScrollHeight + _this.props.extraHeight;\n                if (Platform.OS === 'ios') {\n                  if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {\n                    _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n                  }\n                } else {\n                  if (textInputBottomPosition > keyboardPosition) {\n                    keyboardSpace = keyboardSpace - (textInputBottomPosition - keyboardPosition);\n                    _this.setState({\n                      keyboardSpace: keyboardSpace\n                    });\n                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight);\n                  } else if (textInputBottomPosition > keyboardPosition - totalExtraHeight) {\n                    _this.scrollForExtraHeightOnAndroid(totalExtraHeight - (keyboardPosition - textInputBottomPosition));\n                  }\n                }\n              });\n            }\n          });\n        }\n        if (!_this.props.resetScrollToCoords) {\n          if (!_this.defaultResetScrollToCoords) {\n            _this.defaultResetScrollToCoords = _this.position;\n          }\n        }\n      };\n      _this._resetKeyboardSpace = function () {\n        var keyboardSpace = _this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n        _this.setState({\n          keyboardSpace: keyboardSpace\n        });\n        if (_this.props.enableResetScrollToCoords === false) {\n          _this.defaultResetScrollToCoords = null;\n          return;\n        } else if (_this.props.resetScrollToCoords) {\n          _this.scrollToPosition(_this.props.resetScrollToCoords.x, _this.props.resetScrollToCoords.y, true);\n        } else {\n          if (_this.defaultResetScrollToCoords) {\n            _this.scrollToPosition(_this.defaultResetScrollToCoords.x, _this.defaultResetScrollToCoords.y, true);\n            _this.defaultResetScrollToCoords = null;\n          } else {\n            _this.scrollToPosition(0, 0, true);\n          }\n        }\n      };\n      _this._scrollToFocusedInputWithNodeHandle = function (nodeID, extraHeight, keyboardOpeningTime) {\n        if (extraHeight === undefined) {\n          extraHeight = _this.props.extraHeight;\n        }\n        var reactNode = findNodeHandle(nodeID);\n        _this.scrollToFocusedInput(reactNode, extraHeight + _this.props.extraScrollHeight, keyboardOpeningTime !== undefined ? keyboardOpeningTime : _this.props.keyboardOpeningTime || 0);\n      };\n      _this._handleOnScroll = function (e) {\n        _this.position = e.nativeEvent.contentOffset;\n      };\n      _this._handleRef = function (ref) {\n        _this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref;\n        if (_this.props.innerRef) {\n          _this.props.innerRef(_this._rnkasv_keyboardView);\n        }\n      };\n      _this.update = function () {\n        var currentlyFocusedField = TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField();\n        var responder = _this.getScrollResponder();\n        if (!currentlyFocusedField || !responder) {\n          return;\n        }\n        _this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n      };\n      _this.keyboardWillShowEvent = undefined;\n      _this.keyboardWillHideEvent = undefined;\n      _this.callbacks = {};\n      _this.position = {\n        x: 0,\n        y: 0\n      };\n      _this.defaultResetScrollToCoords = null;\n      var _keyboardSpace = props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n      _this.state = {\n        keyboardSpace: _keyboardSpace\n      };\n      return _this;\n    }\n    _createClass(_Class, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        this.mountedComponent = true;\n        if (Platform.OS === 'ios') {\n          this.keyboardWillShowEvent = Keyboard.addListener('keyboardWillShow', this._updateKeyboardSpace);\n          this.keyboardWillHideEvent = Keyboard.addListener('keyboardWillHide', this._resetKeyboardSpace);\n        } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\n          this.keyboardWillShowEvent = Keyboard.addListener('keyboardDidShow', this._updateKeyboardSpace);\n          this.keyboardWillHideEvent = Keyboard.addListener('keyboardDidHide', this._resetKeyboardSpace);\n        }\n        supportedKeyboardEvents.forEach(function (eventName) {\n          var callbackName = keyboardEventToCallbackName(eventName);\n          if (_this2.props[callbackName]) {\n            _this2.callbacks[eventName] = Keyboard.addListener(eventName, _this2.props[callbackName]);\n          }\n        });\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\n          var keyboardSpace = this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n          if (this.state.keyboardSpace !== keyboardSpace) {\n            this.setState({\n              keyboardSpace: keyboardSpace\n            });\n          }\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mountedComponent = false;\n        this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();\n        this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();\n        Object.values(this.callbacks).forEach(function (callback) {\n          return callback.remove();\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n          enableOnAndroid = _this$props.enableOnAndroid,\n          contentContainerStyle = _this$props.contentContainerStyle,\n          onScroll = _this$props.onScroll;\n        var newContentContainerStyle;\n        if (Platform.OS === 'android' && enableOnAndroid) {\n          newContentContainerStyle = [].concat(contentContainerStyle).concat({\n            paddingBottom: ((contentContainerStyle || {}).paddingBottom || 0) + this.state.keyboardSpace\n          });\n        }\n        var refProps = _defineProperty({}, hocOptions.refPropName, this._handleRef);\n        return _jsxDEV(ScrollableComponent, _objectSpread(_objectSpread(_objectSpread({}, refProps), {}, {\n          keyboardDismissMode: \"interactive\",\n          contentInset: {\n            bottom: this.state.keyboardSpace\n          },\n          automaticallyAdjustContentInsets: false,\n          showsVerticalScrollIndicator: true,\n          scrollEventThrottle: 1\n        }, this.props), {}, {\n          contentContainerStyle: newContentContainerStyle || contentContainerStyle,\n          keyboardSpace: this.state.keyboardSpace,\n          getScrollResponder: this.getScrollResponder,\n          scrollToPosition: this.scrollToPosition,\n          scrollToEnd: this.scrollToEnd,\n          scrollForExtraHeightOnAndroid: this.scrollForExtraHeightOnAndroid,\n          scrollToFocusedInput: this.scrollToFocusedInput,\n          scrollIntoView: this.scrollIntoView,\n          resetKeyboardSpace: this._resetKeyboardSpace,\n          handleOnScroll: this._handleOnScroll,\n          update: this.update,\n          onScroll: Animated.forkEvent(onScroll, this._handleOnScroll)\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 9\n        }, this);\n      }\n    }]);\n    return _Class;\n  }(React.Component), _Class.displayName = `KeyboardAware${getDisplayName(ScrollableComponent)}`, _Class.propTypes = _objectSpread({\n    viewIsInsideTabBar: PropTypes.bool,\n    resetScrollToCoords: PropTypes.shape({\n      x: PropTypes.number.isRequired,\n      y: PropTypes.number.isRequired\n    }),\n    enableResetScrollToCoords: PropTypes.bool,\n    enableAutomaticScroll: PropTypes.bool,\n    extraHeight: PropTypes.number,\n    extraScrollHeight: PropTypes.number,\n    keyboardOpeningTime: PropTypes.number,\n    onScroll: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    update: PropTypes.func,\n    contentContainerStyle: PropTypes.any,\n    enableOnAndroid: PropTypes.bool,\n    innerRef: PropTypes.func\n  }, keyboardEventPropTypes), _Class.defaultProps = {\n    enableAutomaticScroll: hocOptions.enableAutomaticScroll,\n    extraHeight: hocOptions.extraHeight,\n    extraScrollHeight: hocOptions.extraScrollHeight,\n    enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\n    keyboardOpeningTime: hocOptions.keyboardOpeningTime,\n    viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\n    enableOnAndroid: hocOptions.enableOnAndroid\n  }, _Class;\n}\nvar listenToKeyboardEvents = function listenToKeyboardEvents(configOrComp) {\n  if (typeof configOrComp === 'object' && !configOrComp.displayName) {\n    return function (Comp) {\n      return KeyboardAwareHOC(Comp, configOrComp);\n    };\n  } else {\n    return KeyboardAwareHOC(configOrComp);\n  }\n};\nexport default listenToKeyboardEvents;","map":{"version":3,"names":["React","PropTypes","Keyboard","Platform","UIManager","TextInput","findNodeHandle","Animated","isIphoneX","jsxDEV","_jsxDEV","_KAM_DEFAULT_TAB_BAR_HEIGHT","_KAM_KEYBOARD_OPENING_TIME","_KAM_EXTRA_HEIGHT","supportedKeyboardEvents","keyboardEventToCallbackName","eventName","toUpperCase","substring","keyboardEventPropTypes","reduce","acc","_objectSpread","_defineProperty","func","keyboardAwareHOCTypeEvents","Function","getDisplayName","WrappedComponent","displayName","name","ScrollIntoViewDefaultOptions","enableOnAndroid","contentContainerStyle","undefined","enableAutomaticScroll","extraHeight","extraScrollHeight","enableResetScrollToCoords","keyboardOpeningTime","viewIsInsideTabBar","refPropName","extractNativeRef","ref","shouldCallGetNode","constants","reactNativeVersion","major","minor","getNode","KeyboardAwareHOC","ScrollableComponent","_Class","userOptions","arguments","length","hocOptions","_React$Component","_inherits","props","_this","_classCallCheck","_callSuper","getScrollResponder","_rnkasv_keyboardView","scrollToPosition","x","y","animated","responder","scrollResponderScrollTo","scrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollForExtraHeightOnAndroid","position","scrollToFocusedInput","reactNode","setTimeout","mountedComponent","scrollResponderScrollNativeHandleToKeyboard","scrollIntoView","_ref","_asyncToGenerator","element","options","_yield$Promise$all","Promise","all","_measureElement","_yield$Promise$all2","_slicedToArray","parentLayout","childLayout","getScrollPosition","_defaultGetScrollPosition","_getScrollPosition","_x","apply","contentOffset","Math","max","node","resolve","measureInWindow","width","height","_updateKeyboardSpace","frames","keyboardSpace","endCoordinates","setState","currentlyFocusedField","State","currentlyFocusedInput","viewIsDescendantOf","getInnerViewNode","isAncestor","textInputBottomPosition","keyboardPosition","screenY","totalExtraHeight","OS","_scrollToFocusedInputWithNodeHandle","resetScrollToCoords","defaultResetScrollToCoords","_resetKeyboardSpace","nodeID","_handleOnScroll","e","nativeEvent","_handleRef","innerRef","update","keyboardWillShowEvent","keyboardWillHideEvent","callbacks","state","_createClass","key","value","componentDidMount","_this2","addListener","forEach","callbackName","componentDidUpdate","prevProps","componentWillUnmount","remove","Object","values","callback","render","_this$props","onScroll","newContentContainerStyle","concat","paddingBottom","refProps","keyboardDismissMode","contentInset","bottom","automaticallyAdjustContentInsets","showsVerticalScrollIndicator","scrollEventThrottle","resetKeyboardSpace","handleOnScroll","forkEvent","fileName","_jsxFileName","lineNumber","columnNumber","Component","propTypes","bool","shape","number","isRequired","oneOfType","object","any","defaultProps","listenToKeyboardEvents","configOrComp","Comp"],"sources":["C:/JsonMobile/frontend/node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareHOC.js"],"sourcesContent":["/* @flow */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  Keyboard,\r\n  Platform,\r\n  UIManager,\r\n  TextInput,\r\n  findNodeHandle,\r\n  Animated\r\n} from 'react-native'\r\nimport { isIphoneX } from 'react-native-iphone-x-helper'\r\nimport type { KeyboardAwareInterface } from './KeyboardAwareInterface'\r\n\r\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = isIphoneX() ? 83 : 49\r\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\r\nconst _KAM_EXTRA_HEIGHT: number = 75\r\n\r\nconst supportedKeyboardEvents = [\r\n  'keyboardWillShow',\r\n  'keyboardDidShow',\r\n  'keyboardWillHide',\r\n  'keyboardDidHide',\r\n  'keyboardWillChangeFrame',\r\n  'keyboardDidChangeFrame'\r\n]\r\nconst keyboardEventToCallbackName = (eventName: string) =>\r\n  'on' + eventName[0].toUpperCase() + eventName.substring(1)\r\nconst keyboardEventPropTypes = supportedKeyboardEvents.reduce(\r\n  (acc: Object, eventName: string) => ({\r\n    ...acc,\r\n    [keyboardEventToCallbackName(eventName)]: PropTypes.func\r\n  }),\r\n  {}\r\n)\r\nconst keyboardAwareHOCTypeEvents = supportedKeyboardEvents.reduce(\r\n  (acc: Object, eventName: string) => ({\r\n    ...acc,\r\n    [keyboardEventToCallbackName(eventName)]: Function\r\n  }),\r\n  {}\r\n)\r\n\r\nexport type KeyboardAwareHOCProps = {\r\n  viewIsInsideTabBar?: boolean,\r\n  resetScrollToCoords?: {\r\n    x: number,\r\n    y: number\r\n  },\r\n  enableResetScrollToCoords?: boolean,\r\n  enableAutomaticScroll?: boolean,\r\n  extraHeight?: number,\r\n  extraScrollHeight?: number,\r\n  keyboardOpeningTime?: number,\r\n  onScroll?: Function,\r\n  update?: Function,\r\n  contentContainerStyle?: any,\r\n  enableOnAndroid?: boolean,\r\n  innerRef?: Function,\r\n  ...keyboardAwareHOCTypeEvents\r\n}\r\nexport type KeyboardAwareHOCState = {\r\n  keyboardSpace: number\r\n}\r\n\r\nexport type ElementLayout = {\r\n  x: number,\r\n  y: number,\r\n  width: number,\r\n  height: number\r\n}\r\n\r\nexport type ContentOffset = {\r\n  x: number,\r\n  y: number\r\n}\r\n\r\nexport type ScrollPosition = {\r\n  x: number,\r\n  y: number,\r\n  animated: boolean\r\n}\r\n\r\nexport type ScrollIntoViewOptions = ?{\r\n  getScrollPosition?: (\r\n    parentLayout: ElementLayout,\r\n    childLayout: ElementLayout,\r\n    contentOffset: ContentOffset\r\n  ) => ScrollPosition\r\n}\r\n\r\nexport type KeyboardAwareHOCOptions = ?{\r\n  enableOnAndroid: boolean,\r\n  contentContainerStyle: ?Object,\r\n  enableAutomaticScroll: boolean,\r\n  extraHeight: number,\r\n  extraScrollHeight: number,\r\n  enableResetScrollToCoords: boolean,\r\n  keyboardOpeningTime: number,\r\n  viewIsInsideTabBar: boolean,\r\n  refPropName: string,\r\n  extractNativeRef: Function\r\n}\r\n\r\nfunction getDisplayName(WrappedComponent: React$Component) {\r\n  return (\r\n    (WrappedComponent &&\r\n      (WrappedComponent.displayName || WrappedComponent.name)) ||\r\n    'Component'\r\n  )\r\n}\r\n\r\nconst ScrollIntoViewDefaultOptions: KeyboardAwareHOCOptions = {\r\n  enableOnAndroid: false,\r\n  contentContainerStyle: undefined,\r\n  enableAutomaticScroll: true,\r\n  extraHeight: _KAM_EXTRA_HEIGHT,\r\n  extraScrollHeight: 0,\r\n  enableResetScrollToCoords: true,\r\n  keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\r\n  viewIsInsideTabBar: false,\r\n\r\n  // The ref prop name that will be passed to the wrapped component to obtain a ref\r\n  // If your ScrollView is already wrapped, maybe the wrapper permit to get a ref\r\n  // For example, with glamorous-native ScrollView, you should use \"innerRef\"\r\n  refPropName: 'ref',\r\n  // Sometimes the ref you get is a ref to a wrapped view (ex: Animated.ScrollView)\r\n  // We need access to the imperative API of a real native ScrollView so we need extraction logic\r\n  extractNativeRef: (ref: Object) => {\r\n    // getNode() permit to support Animated.ScrollView automatically, but is deprecated since RN 0.62\r\n    // see https://github.com/facebook/react-native/issues/19650\r\n    // see https://stackoverflow.com/questions/42051368/scrollto-is-undefined-on-animated-scrollview/48786374\r\n    // see https://github.com/facebook/react-native/commit/66e72bb4e00aafbcb9f450ed5db261d98f99f82a\r\n    const shouldCallGetNode = !Platform.constants || (Platform.constants.reactNativeVersion.major === 0 && Platform.constants.reactNativeVersion.minor < 62)\r\n    if (ref.getNode && shouldCallGetNode) {\r\n      return ref.getNode()\r\n    } else {\r\n      return ref\r\n    }\r\n  }\r\n}\r\n\r\nfunction KeyboardAwareHOC(\r\n  ScrollableComponent: React$Component,\r\n  userOptions: KeyboardAwareHOCOptions = {}\r\n) {\r\n  const hocOptions: KeyboardAwareHOCOptions = {\r\n    ...ScrollIntoViewDefaultOptions,\r\n    ...userOptions\r\n  }\r\n\r\n  return class\r\n    extends React.Component<KeyboardAwareHOCProps, KeyboardAwareHOCState>\r\n    implements KeyboardAwareInterface {\r\n    _rnkasv_keyboardView: any\r\n    keyboardWillShowEvent: ?Function\r\n    keyboardWillHideEvent: ?Function\r\n    position: ContentOffset\r\n    defaultResetScrollToCoords: ?{ x: number, y: number }\r\n    mountedComponent: boolean\r\n    handleOnScroll: Function\r\n    state: KeyboardAwareHOCState\r\n    static displayName = `KeyboardAware${getDisplayName(ScrollableComponent)}`\r\n\r\n    static propTypes = {\r\n      viewIsInsideTabBar: PropTypes.bool,\r\n      resetScrollToCoords: PropTypes.shape({\r\n        x: PropTypes.number.isRequired,\r\n        y: PropTypes.number.isRequired\r\n      }),\r\n      enableResetScrollToCoords: PropTypes.bool,\r\n      enableAutomaticScroll: PropTypes.bool,\r\n      extraHeight: PropTypes.number,\r\n      extraScrollHeight: PropTypes.number,\r\n      keyboardOpeningTime: PropTypes.number,\r\n      onScroll: PropTypes.oneOfType([\r\n        PropTypes.func, // Normal listener\r\n        PropTypes.object // Animated.event listener\r\n      ]),\r\n      update: PropTypes.func,\r\n      contentContainerStyle: PropTypes.any,\r\n      enableOnAndroid: PropTypes.bool,\r\n      innerRef: PropTypes.func,\r\n      ...keyboardEventPropTypes\r\n    }\r\n\r\n    // HOC options are used to init default props, so that these options can be overriden with component props\r\n    static defaultProps = {\r\n      enableAutomaticScroll: hocOptions.enableAutomaticScroll,\r\n      extraHeight: hocOptions.extraHeight,\r\n      extraScrollHeight: hocOptions.extraScrollHeight,\r\n      enableResetScrollToCoords: hocOptions.enableResetScrollToCoords,\r\n      keyboardOpeningTime: hocOptions.keyboardOpeningTime,\r\n      viewIsInsideTabBar: hocOptions.viewIsInsideTabBar,\r\n      enableOnAndroid: hocOptions.enableOnAndroid\r\n    }\r\n\r\n    constructor(props: KeyboardAwareHOCProps) {\r\n      super(props)\r\n      this.keyboardWillShowEvent = undefined\r\n      this.keyboardWillHideEvent = undefined\r\n      this.callbacks = {}\r\n      this.position = { x: 0, y: 0 }\r\n      this.defaultResetScrollToCoords = null\r\n      const keyboardSpace: number = props.viewIsInsideTabBar\r\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        : 0\r\n      this.state = { keyboardSpace }\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.mountedComponent = true\r\n      // Keyboard events\r\n      if (Platform.OS === 'ios') {\r\n        this.keyboardWillShowEvent = Keyboard.addListener(\r\n          'keyboardWillShow',\r\n          this._updateKeyboardSpace\r\n        )\r\n        this.keyboardWillHideEvent = Keyboard.addListener(\r\n          'keyboardWillHide',\r\n          this._resetKeyboardSpace\r\n        )\r\n      } else if (Platform.OS === 'android' && this.props.enableOnAndroid) {\r\n        this.keyboardWillShowEvent = Keyboard.addListener(\r\n          'keyboardDidShow',\r\n          this._updateKeyboardSpace\r\n        )\r\n        this.keyboardWillHideEvent = Keyboard.addListener(\r\n          'keyboardDidHide',\r\n          this._resetKeyboardSpace\r\n        )\r\n      }\r\n\r\n      supportedKeyboardEvents.forEach((eventName: string) => {\r\n        const callbackName = keyboardEventToCallbackName(eventName)\r\n        if (this.props[callbackName]) {\r\n          this.callbacks[eventName] = Keyboard.addListener(\r\n            eventName,\r\n            this.props[callbackName]\r\n          )\r\n        }\r\n      })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: KeyboardAwareHOCProps) {\r\n      if (this.props.viewIsInsideTabBar !== prevProps.viewIsInsideTabBar) {\r\n        const keyboardSpace: number = this.props.viewIsInsideTabBar\r\n          ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n          : 0\r\n        if (this.state.keyboardSpace !== keyboardSpace) {\r\n          this.setState({ keyboardSpace })\r\n        }\r\n      }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.mountedComponent = false\r\n      this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\r\n      this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\r\n      Object.values(this.callbacks).forEach((callback: Object) =>\r\n        callback.remove()\r\n      )\r\n    }\r\n\r\n    getScrollResponder = () => {\r\n      return (\r\n        this._rnkasv_keyboardView &&\r\n        this._rnkasv_keyboardView.getScrollResponder &&\r\n        this._rnkasv_keyboardView.getScrollResponder()\r\n      )\r\n    }\r\n\r\n    scrollToPosition = (x: number, y: number, animated: boolean = true) => {\r\n      const responder = this.getScrollResponder()\r\n      if (!responder) {\r\n        return\r\n      }\r\n      if (responder.scrollResponderScrollTo) {\r\n        // React Native < 0.65\r\n        responder.scrollResponderScrollTo({ x, y, animated })\r\n      } else if (responder.scrollTo) {\r\n        // React Native >= 0.65\r\n        responder.scrollTo({ x, y, animated })\r\n      }\r\n    }\r\n\r\n    scrollToEnd = (animated?: boolean = true) => {\r\n      const responder = this.getScrollResponder()\r\n      if (!responder) {\r\n        return\r\n      }\r\n      if (responder.scrollResponderScrollToEnd) {\r\n        // React Native < 0.65\r\n        responder.scrollResponderScrollToEnd({ animated })\r\n      } else if (responder.scrollToEnd) {\r\n        // React Native >= 0.65\r\n        responder.scrollToEnd({ animated })\r\n      }\r\n    }\r\n\r\n    scrollForExtraHeightOnAndroid = (extraHeight: number) => {\r\n      this.scrollToPosition(0, this.position.y + extraHeight, true)\r\n    }\r\n\r\n    /**\r\n     * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\r\n     * @param extraHeight: takes an extra height in consideration.\r\n     */\r\n    scrollToFocusedInput = (\r\n      reactNode: any,\r\n      extraHeight?: number,\r\n      keyboardOpeningTime?: number\r\n    ) => {\r\n      if (extraHeight === undefined) {\r\n        extraHeight = this.props.extraHeight || 0\r\n      }\r\n      if (keyboardOpeningTime === undefined) {\r\n        keyboardOpeningTime = this.props.keyboardOpeningTime || 0\r\n      }\r\n      setTimeout(() => {\r\n        if (!this.mountedComponent) {\r\n          return\r\n        }\r\n        const responder = this.getScrollResponder()\r\n        responder &&\r\n          responder.scrollResponderScrollNativeHandleToKeyboard(\r\n            reactNode,\r\n            extraHeight,\r\n            true\r\n          )\r\n      }, keyboardOpeningTime)\r\n    }\r\n\r\n    scrollIntoView = async (\r\n      element: React.Element<*>,\r\n      options: ScrollIntoViewOptions = {}\r\n    ) => {\r\n      if (!this._rnkasv_keyboardView || !element) {\r\n        return\r\n      }\r\n\r\n      const [parentLayout, childLayout] = await Promise.all([\r\n        this._measureElement(this._rnkasv_keyboardView),\r\n        this._measureElement(element)\r\n      ])\r\n\r\n      const getScrollPosition =\r\n        options.getScrollPosition || this._defaultGetScrollPosition\r\n      const { x, y, animated } = getScrollPosition(\r\n        parentLayout,\r\n        childLayout,\r\n        this.position\r\n      )\r\n      this.scrollToPosition(x, y, animated)\r\n    }\r\n\r\n    _defaultGetScrollPosition = (\r\n      parentLayout: ElementLayout,\r\n      childLayout: ElementLayout,\r\n      contentOffset: ContentOffset\r\n    ): ScrollPosition => {\r\n      return {\r\n        x: 0,\r\n        y: Math.max(0, childLayout.y - parentLayout.y + contentOffset.y),\r\n        animated: true\r\n      }\r\n    }\r\n\r\n    _measureElement = (element: React.Element<*>): Promise<ElementLayout> => {\r\n      const node = findNodeHandle(element)\r\n      return new Promise((resolve: ElementLayout => void) => {\r\n        UIManager.measureInWindow(\r\n          node,\r\n          (x: number, y: number, width: number, height: number) => {\r\n            resolve({ x, y, width, height })\r\n          }\r\n        )\r\n      })\r\n    }\r\n\r\n    // Keyboard actions\r\n    _updateKeyboardSpace = (frames: Object) => {\r\n      // Automatically scroll to focused TextInput\r\n      if (this.props.enableAutomaticScroll) {\r\n        let keyboardSpace: number =\r\n          frames.endCoordinates.height + this.props.extraScrollHeight\r\n        if (this.props.viewIsInsideTabBar) {\r\n          keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        }\r\n        this.setState({ keyboardSpace })\r\n        const currentlyFocusedField =  TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField()\r\n        const responder = this.getScrollResponder()\r\n        if (!currentlyFocusedField || !responder) {\r\n          return\r\n        }\r\n        UIManager.viewIsDescendantOf(\r\n          currentlyFocusedField,\r\n          responder.getInnerViewNode(),\r\n          (isAncestor: boolean) => {\r\n            if (isAncestor) {\r\n              // Check if the TextInput will be hidden by the keyboard\r\n              UIManager.measureInWindow(\r\n                currentlyFocusedField,\r\n                (x: number, y: number, width: number, height: number) => {\r\n                  const textInputBottomPosition = y + height\r\n                  const keyboardPosition = frames.endCoordinates.screenY\r\n                  const totalExtraHeight =\r\n                    this.props.extraScrollHeight + this.props.extraHeight\r\n                  if (Platform.OS === 'ios') {\r\n                    if (\r\n                      textInputBottomPosition >\r\n                      keyboardPosition - totalExtraHeight\r\n                    ) {\r\n                      this._scrollToFocusedInputWithNodeHandle(\r\n                        currentlyFocusedField\r\n                      )\r\n                    }\r\n                  } else {\r\n                    // On android, the system would scroll the text input just\r\n                    // above the keyboard so we just neet to scroll the extra\r\n                    // height part\r\n                    if (textInputBottomPosition > keyboardPosition) {\r\n                      // Since the system already scrolled the whole view up\r\n                      // we should reduce that amount\r\n                      keyboardSpace =\r\n                        keyboardSpace -\r\n                        (textInputBottomPosition - keyboardPosition)\r\n                      this.setState({ keyboardSpace })\r\n                      this.scrollForExtraHeightOnAndroid(totalExtraHeight)\r\n                    } else if (\r\n                      textInputBottomPosition >\r\n                      keyboardPosition - totalExtraHeight\r\n                    ) {\r\n                      this.scrollForExtraHeightOnAndroid(\r\n                        totalExtraHeight -\r\n                          (keyboardPosition - textInputBottomPosition)\r\n                      )\r\n                    }\r\n                  }\r\n                }\r\n              )\r\n            }\r\n          }\r\n        )\r\n      }\r\n      if (!this.props.resetScrollToCoords) {\r\n        if (!this.defaultResetScrollToCoords) {\r\n          this.defaultResetScrollToCoords = this.position\r\n        }\r\n      }\r\n    }\r\n\r\n    _resetKeyboardSpace = () => {\r\n      const keyboardSpace: number = this.props.viewIsInsideTabBar\r\n        ? _KAM_DEFAULT_TAB_BAR_HEIGHT\r\n        : 0\r\n      this.setState({ keyboardSpace })\r\n      // Reset scroll position after keyboard dismissal\r\n      if (this.props.enableResetScrollToCoords === false) {\r\n        this.defaultResetScrollToCoords = null\r\n        return\r\n      } else if (this.props.resetScrollToCoords) {\r\n        this.scrollToPosition(\r\n          this.props.resetScrollToCoords.x,\r\n          this.props.resetScrollToCoords.y,\r\n          true\r\n        )\r\n      } else {\r\n        if (this.defaultResetScrollToCoords) {\r\n          this.scrollToPosition(\r\n            this.defaultResetScrollToCoords.x,\r\n            this.defaultResetScrollToCoords.y,\r\n            true\r\n          )\r\n          this.defaultResetScrollToCoords = null\r\n        } else {\r\n          this.scrollToPosition(0, 0, true)\r\n        }\r\n      }\r\n    }\r\n\r\n    _scrollToFocusedInputWithNodeHandle = (\r\n      nodeID: number,\r\n      extraHeight?: number,\r\n      keyboardOpeningTime?: number\r\n    ) => {\r\n      if (extraHeight === undefined) {\r\n        extraHeight = this.props.extraHeight\r\n      }\r\n      const reactNode = findNodeHandle(nodeID)\r\n      this.scrollToFocusedInput(\r\n        reactNode,\r\n        extraHeight + this.props.extraScrollHeight,\r\n        keyboardOpeningTime !== undefined\r\n          ? keyboardOpeningTime\r\n          : this.props.keyboardOpeningTime || 0\r\n      )\r\n    }\r\n\r\n    _handleOnScroll = (\r\n      e: SyntheticEvent<*> & { nativeEvent: { contentOffset: number } }\r\n    ) => {\r\n      this.position = e.nativeEvent.contentOffset\r\n    }\r\n\r\n    _handleRef = (ref: React.Component<*>) => {\r\n      this._rnkasv_keyboardView = ref ? hocOptions.extractNativeRef(ref) : ref\r\n      if (this.props.innerRef) {\r\n        this.props.innerRef(this._rnkasv_keyboardView)\r\n      }\r\n    }\r\n\r\n    update = () => {\r\n      const currentlyFocusedField =  TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField()\r\n      const responder = this.getScrollResponder()\r\n\r\n      if (!currentlyFocusedField || !responder) {\r\n        return\r\n      }\r\n\r\n      this._scrollToFocusedInputWithNodeHandle(currentlyFocusedField)\r\n    }\r\n\r\n    render() {\r\n      const { enableOnAndroid, contentContainerStyle, onScroll } = this.props\r\n      let newContentContainerStyle\r\n      if (Platform.OS === 'android' && enableOnAndroid) {\r\n        newContentContainerStyle = [].concat(contentContainerStyle).concat({\r\n          paddingBottom:\r\n            ((contentContainerStyle || {}).paddingBottom || 0) +\r\n            this.state.keyboardSpace\r\n        })\r\n      }\r\n      const refProps = { [hocOptions.refPropName]: this._handleRef }\r\n      return (\r\n        <ScrollableComponent\r\n          {...refProps}\r\n          keyboardDismissMode='interactive'\r\n          contentInset={{ bottom: this.state.keyboardSpace }}\r\n          automaticallyAdjustContentInsets={false}\r\n          showsVerticalScrollIndicator={true}\r\n          scrollEventThrottle={1}\r\n          {...this.props}\r\n          contentContainerStyle={\r\n            newContentContainerStyle || contentContainerStyle\r\n          }\r\n          keyboardSpace={this.state.keyboardSpace}\r\n          getScrollResponder={this.getScrollResponder}\r\n          scrollToPosition={this.scrollToPosition}\r\n          scrollToEnd={this.scrollToEnd}\r\n          scrollForExtraHeightOnAndroid={this.scrollForExtraHeightOnAndroid}\r\n          scrollToFocusedInput={this.scrollToFocusedInput}\r\n          scrollIntoView={this.scrollIntoView}\r\n          resetKeyboardSpace={this._resetKeyboardSpace}\r\n          handleOnScroll={this._handleOnScroll}\r\n          update={this.update}\r\n          onScroll={Animated.forkEvent(onScroll, this._handleOnScroll)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n// Allow to pass options, without breaking change, and curried for composition\r\n// listenToKeyboardEvents(ScrollView);\r\n// listenToKeyboardEvents(options)(Comp);\r\nconst listenToKeyboardEvents = (configOrComp: any) => {\r\n  if (typeof configOrComp === 'object' && !configOrComp.displayName) {\r\n    return (Comp: Function) => KeyboardAwareHOC(Comp, configOrComp)\r\n  } else {\r\n    return KeyboardAwareHOC(configOrComp)\r\n  }\r\n}\r\n\r\nexport default listenToKeyboardEvents\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}