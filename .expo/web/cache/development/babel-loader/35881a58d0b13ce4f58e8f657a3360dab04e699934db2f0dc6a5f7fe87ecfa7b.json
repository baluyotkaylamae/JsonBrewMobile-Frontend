{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\JsonMobile\\\\frontend\\\\node_modules\\\\react-native-swipe-list-view\\\\components\\\\SwipeRow.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar DEFAULT_PREVIEW_OPEN_DELAY = 700;\nvar PREVIEW_CLOSE_DELAY = 300;\nvar MAX_VELOCITY_CONTRIBUTION = 5;\nvar SCROLL_LOCK_MILLISECONDS = 300;\nvar SwipeRow = function (_Component) {\n  _inherits(SwipeRow, _Component);\n  function SwipeRow(props) {\n    var _this;\n    _classCallCheck(this, SwipeRow);\n    _this = _callSuper(this, SwipeRow, [props]);\n    _this.ensureScrollEnabled = function () {\n      if (!_this.parentScrollEnabled) {\n        _this.parentScrollEnabled = true;\n        _this.props.setScrollEnabled && _this.props.setScrollEnabled(true);\n      }\n    };\n    _this.combinedOnPress = function () {\n      var onPress = _this.props.children[1].props.onPress;\n      _this.onRowPress();\n      onPress && onPress.apply(void 0, arguments);\n    };\n    _this.isOpen = false;\n    _this.leftActionActivated = false;\n    _this.rightActionActivated = false;\n    _this.previousTrackedTranslateX = 0;\n    _this.currentTranslateX = 0;\n    _this.previousTrackedDirection = null;\n    _this.horizontalSwipeGestureBegan = false;\n    _this.swipeInitialX = null;\n    _this.parentScrollEnabled = true;\n    _this.ranPreview = false;\n    _this._ensureScrollEnabledTimer = null;\n    _this.isForceClosing = false;\n    _this.state = {\n      leftActionActivated: false,\n      rightActionActivated: false,\n      leftActionState: _this.props.initialLeftActionState || false,\n      rightActionState: _this.props.initialRightActionState || false,\n      previewRepeatInterval: null,\n      timeBetweenPreviewRepeats: null,\n      dimensionsSet: false,\n      hiddenHeight: _this.props.disableHiddenLayoutCalculation ? '100%' : 0,\n      hiddenWidth: _this.props.disableHiddenLayoutCalculation ? '100%' : 0\n    };\n    _this._translateX = new Animated.Value(0);\n    _this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {\n        return _this.handleOnMoveShouldSetPanResponder(e, gs);\n      },\n      onPanResponderMove: function onPanResponderMove(e, gs) {\n        return _this.handlePanResponderMove(e, gs);\n      },\n      onPanResponderRelease: function onPanResponderRelease(e, gs) {\n        return _this.handlePanResponderRelease(e, gs);\n      },\n      onPanResponderTerminate: function onPanResponderTerminate(e, gs) {\n        return _this.handlePanResponderEnd(e, gs);\n      },\n      onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {\n        return false;\n      }\n    });\n    _this._translateX.addListener(function (_ref) {\n      var value = _ref.value;\n      _this.currentTranslateX = value;\n      if (_this.props.onSwipeValueChange) {\n        var direction = _this.previousTrackedDirection;\n        if (value !== _this.previousTrackedTranslateX && Math.abs(value - _this.previousTrackedTranslateX) > 0.5) {\n          direction = value > _this.previousTrackedTranslateX ? 'right' : 'left';\n        }\n        _this.props.onSwipeValueChange && _this.props.onSwipeValueChange({\n          isOpen: _this.isOpen,\n          direction: direction,\n          value: value,\n          key: _this.props.swipeKey\n        });\n        _this.previousTrackedTranslateX = value;\n        _this.previousTrackedDirection = direction;\n      }\n    });\n    if (_this.props.forceCloseToRightThreshold && _this.props.forceCloseToRightThreshold > 0) {\n      _this._translateX.addListener(function (_ref2) {\n        var value = _ref2.value;\n        if (!_this.isForceClosing && Dimensions.get('window').width + value < _this.props.forceCloseToRightThreshold) {\n          _this.isForceClosing = true;\n          _this.forceCloseRow('right');\n          if (_this.props.onForceCloseToRight) {\n            _this.props.onForceCloseToRight();\n          }\n        }\n      });\n    }\n    if (_this.props.forceCloseToLeftThreshold && _this.props.forceCloseToRightThreshold > 0) {\n      _this._translateX.addListener(function (_ref3) {\n        var value = _ref3.value;\n        if (!_this.isForceClosing && Dimensions.get('window').width - value < _this.props.forceCloseToLeftThreshold) {\n          _this.isForceClosing = true;\n          _this.forceCloseRow('left');\n          if (_this.props.onForceCloseToLeft) {\n            _this.props.onForceCloseToLeft();\n          }\n        }\n      });\n    }\n    if (_this.props.onLeftActionStatusChange && _this.props.leftActivationValue && _this.props.leftActivationValue > 0) {\n      _this._translateX.addListener(function (_ref4) {\n        var value = _ref4.value;\n        var absValue = Math.abs(value);\n        var isActivated = absValue > _this.props.leftActivationValue;\n        if (_this.leftActionActivated !== isActivated && value > 0) {\n          _this.props.onLeftActionStatusChange({\n            isActivated: isActivated,\n            value: value,\n            key: _this.props.swipeKey\n          });\n          _this.leftActionActivated = isActivated;\n          _this.setState({\n            leftActionActivated: isActivated\n          });\n        }\n      });\n    }\n    if (_this.props.onRightActionStatusChange && _this.props.rightActivationValue && _this.props.rightActivationValue < 0) {\n      _this._translateX.addListener(function (_ref5) {\n        var value = _ref5.value;\n        var absValue = Math.abs(value);\n        var isActivated = absValue > Math.abs(_this.props.rightActivationValue);\n        if (_this.rightActionActivated !== isActivated && value < 0) {\n          _this.props.onRightActionStatusChange({\n            isActivated: isActivated,\n            value: value,\n            key: _this.props.swipeKey\n          });\n          _this.rightActionActivated = isActivated;\n          _this.setState({\n            rightActionActivated: isActivated\n          });\n        }\n      });\n    }\n    return _this;\n  }\n  _createClass(SwipeRow, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearTimeout(this._ensureScrollEnabledTimer);\n      this._translateX.removeAllListeners();\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.hiddenHeight !== nextState.hiddenHeight || this.state.hiddenWidth !== nextState.hiddenWidth || this.state.leftActionActivated !== nextState.leftActionActivated || this.state.rightActionActivated !== nextState.rightActionActivated || this.state.leftActionState !== nextState.leftActionState || this.state.rightActionState !== nextState.rightActionState || !this.props.shouldItemUpdate || this.props.shouldItemUpdate && this.props.shouldItemUpdate(this.props.item, nextProps.item)) {\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"getPreviewAnimation\",\n    value: function getPreviewAnimation(toValue, delay) {\n      return Animated.timing(this._translateX, {\n        duration: this.props.previewDuration,\n        toValue: toValue,\n        delay: delay,\n        useNativeDriver: this.props.useNativeDriver\n      });\n    }\n  }, {\n    key: \"onContentLayout\",\n    value: function onContentLayout(e) {\n      var _this2 = this;\n      this.setState(_objectSpread({\n        dimensionsSet: !this.props.recalculateHiddenLayout\n      }, !this.props.disableHiddenLayoutCalculation ? {\n        hiddenHeight: e.nativeEvent.layout.height,\n        hiddenWidth: e.nativeEvent.layout.width\n      } : {}));\n      if (this.props.preview && !this.ranPreview) {\n        this.ranPreview = true;\n        this.doFullAnimation();\n        if (this.props.previewRepeat) {\n          this.setState({\n            previewRepeatInterval: setInterval(function () {\n              _this2.doFullAnimation();\n            }, this.state.timeBetweenPreviewRepeats)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"doFullAnimation\",\n    value: function doFullAnimation() {\n      var _this3 = this;\n      var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\n      return this.getPreviewAnimation(previewOpenValue, this.props.previewOpenDelay).start(function () {\n        _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start(function () {\n          _this3.props.onPreviewEnd && _this3.props.onPreviewEnd();\n        });\n      });\n    }\n  }, {\n    key: \"onRowPress\",\n    value: function onRowPress() {\n      if (this.props.onRowPress) {\n        this.props.onRowPress();\n      } else {\n        if (this.props.closeOnRowPress) {\n          this.closeRow();\n        }\n      }\n    }\n  }, {\n    key: \"handleOnMoveShouldSetPanResponder\",\n    value: function handleOnMoveShouldSetPanResponder(e, gs) {\n      var dx = gs.dx;\n      return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(e, gestureState) {\n      if (this.isForceClosing) {\n        return;\n      }\n      var dx = gestureState.dx,\n        dy = gestureState.dy;\n      var absDx = Math.abs(dx);\n      var absDy = Math.abs(dy);\n      if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {\n        if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\n          return;\n        }\n        if (this.parentScrollEnabled) {\n          this.parentScrollEnabled = false;\n          this.props.setScrollEnabled && this.props.setScrollEnabled(false);\n        }\n        if (this.swipeInitialX === null) {\n          this.swipeInitialX = this.currentTranslateX;\n        }\n        if (!this.horizontalSwipeGestureBegan) {\n          this.horizontalSwipeGestureBegan = true;\n          this.props.swipeGestureBegan && this.props.swipeGestureBegan();\n        }\n        var newDX = this.swipeInitialX + dx;\n        if (this.props.disableLeftSwipe && newDX < 0) {\n          newDX = 0;\n        }\n        if (this.props.disableRightSwipe && newDX > 0) {\n          newDX = 0;\n        }\n        if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\n          newDX = this.props.stopLeftSwipe;\n        }\n        if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {\n          newDX = this.props.stopRightSwipe;\n        }\n        this._translateX.setValue(newDX);\n      }\n    }\n  }, {\n    key: \"handlePanResponderRelease\",\n    value: function handlePanResponderRelease(e, gestureState) {\n      this.props.swipeGestureEnded && this.props.swipeGestureEnded(this.props.swipeKey, {\n        translateX: this.currentTranslateX,\n        direction: this.previousTrackedDirection,\n        event: e,\n        gestureState: gestureState\n      });\n      if (!e.defaultPrevented) {\n        this.handlePanResponderEnd(e, gestureState);\n      }\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(e, gestureState) {\n      var _this4 = this;\n      if (this.isForceClosing) {\n        setTimeout(function () {\n          _this4.isForceClosing = false;\n        }, 500);\n      }\n      var swipeToOpenVelocityContribution = this.props.swipeToOpenVelocityContribution;\n      var possibleExtraPixels = this.props.rightOpenValue * swipeToOpenVelocityContribution;\n      var clampedVelocity = Math.min(gestureState.vx, MAX_VELOCITY_CONTRIBUTION);\n      var projectedExtraPixels = possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);\n      this._ensureScrollEnabledTimer = setTimeout(this.ensureScrollEnabled, SCROLL_LOCK_MILLISECONDS);\n      if (this.currentTranslateX >= 0) {\n        this.handleRightSwipe(projectedExtraPixels);\n      } else {\n        if (this.props.disableLeftSwipe) {\n          return;\n        }\n        this.handleLeftSwipe(projectedExtraPixels);\n      }\n    }\n  }, {\n    key: \"handleRightSwipe\",\n    value: function handleRightSwipe(projectedExtraPixels) {\n      var toValue = 0;\n      var actionSide;\n      var leftActionValue = this.props.leftActionValue || 0;\n      if (this.swipeInitialX < this.currentTranslateX) {\n        if (this.currentTranslateX - projectedExtraPixels > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {\n          toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\n        }\n        if (this.currentTranslateX - projectedExtraPixels > this.props.leftActivationValue) {\n          toValue = this.isForceClosing ? 0 : leftActionValue;\n          actionSide = 'left';\n        }\n      } else {\n        if (this.currentTranslateX - projectedExtraPixels > this.props.leftOpenValue * (1 - this.props.swipeToClosePercent / 100)) {\n          toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\n        }\n        if (this.currentTranslateX - projectedExtraPixels > this.props.leftActivationValue) {\n          toValue = this.isForceClosing ? 0 : leftActionValue;\n          actionSide = 'left';\n        }\n      }\n      var action = this.determineAction(actionSide);\n      this.manuallySwipeRow(toValue, action);\n    }\n  }, {\n    key: \"handleLeftSwipe\",\n    value: function handleLeftSwipe(projectedExtraPixels) {\n      var toValue = 0;\n      var actionSide;\n      var rightActionValue = this.props.rightActionValue || 0;\n      if (this.swipeInitialX > this.currentTranslateX) {\n        if (this.currentTranslateX - projectedExtraPixels < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {\n          toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\n        }\n        if (this.currentTranslateX - projectedExtraPixels < this.props.rightActivationValue) {\n          toValue = this.isForceClosing ? 0 : rightActionValue;\n          actionSide = 'right';\n        }\n      } else {\n        if (this.currentTranslateX - projectedExtraPixels < this.props.rightOpenValue) {\n          toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\n        }\n        if (this.currentTranslateX - projectedExtraPixels < this.props.rightActivationValue * (1 - this.props.swipeToClosePercent / 100)) {\n          toValue = this.isForceClosing ? 0 : rightActionValue;\n          actionSide = 'right';\n        }\n      }\n      var action = this.determineAction(actionSide);\n      this.manuallySwipeRow(toValue, action);\n    }\n  }, {\n    key: \"determineAction\",\n    value: function determineAction(actionSide) {\n      var _this5 = this;\n      if (actionSide === 'right') {\n        return function () {\n          _this5.props.onRightAction && _this5.props.onRightAction();\n          _this5.setState({\n            rightActionState: !_this5.state.rightActionState\n          });\n        };\n      }\n      if (actionSide === 'left') {\n        return function () {\n          _this5.props.onLeftAction && _this5.props.onLeftAction();\n          _this5.setState({\n            leftActionState: !_this5.state.leftActionState\n          });\n        };\n      }\n    }\n  }, {\n    key: \"closeRow\",\n    value: function closeRow() {\n      this.manuallySwipeRow(0);\n    }\n  }, {\n    key: \"forceCloseRow\",\n    value: function forceCloseRow(direction) {\n      var _this6 = this;\n      this.manuallySwipeRow(0, function () {\n        if (direction === 'right' && _this6.props.onForceCloseToRightEnd) {\n          _this6.props.onForceCloseToRightEnd();\n        } else if (direction === 'left' && _this6.props.onForceCloseToLeftEnd) {\n          _this6.props.onForceCloseToLeftEnd();\n        }\n      });\n    }\n  }, {\n    key: \"closeRowWithoutAnimation\",\n    value: function closeRowWithoutAnimation() {\n      this._translateX.setValue(0);\n      this.ensureScrollEnabled();\n      this.isOpen = false;\n      this.props.onRowDidClose && this.props.onRowDidClose();\n      this.props.onRowClose && this.props.onRowClose();\n      this.swipeInitialX = null;\n      this.horizontalSwipeGestureBegan = false;\n    }\n  }, {\n    key: \"manuallySwipeRow\",\n    value: function manuallySwipeRow(toValue, onAnimationEnd) {\n      var _this7 = this;\n      Animated.spring(this._translateX, {\n        toValue: toValue,\n        friction: this.props.friction,\n        tension: this.props.tension,\n        restSpeedThreshold: this.props.restSpeedThreshold,\n        restDisplacementThreshold: this.props.restDisplacementThreshold,\n        useNativeDriver: this.props.useNativeDriver\n      }).start(function () {\n        _this7.ensureScrollEnabled();\n        if (toValue === 0) {\n          _this7.isOpen = false;\n          _this7.props.onRowDidClose && _this7.props.onRowDidClose();\n        } else {\n          _this7.isOpen = true;\n          _this7.props.onRowDidOpen && _this7.props.onRowDidOpen(toValue);\n        }\n        if (onAnimationEnd) {\n          onAnimationEnd();\n        }\n      });\n      if (toValue === 0) {\n        this.props.onRowClose && this.props.onRowClose();\n      } else {\n        this.props.onRowOpen && this.props.onRowOpen(toValue);\n      }\n      this.swipeInitialX = null;\n      this.horizontalSwipeGestureBegan = false;\n    }\n  }, {\n    key: \"renderVisibleContent\",\n    value: function renderVisibleContent() {\n      if (!this.props.closeOnRowPress) {\n        return React.cloneElement(this.props.children[1], _objectSpread(_objectSpread({}, this.props.children[1].props), {}, {\n          leftActionActivated: this.state.leftActionActivated,\n          rightActionActivated: this.state.rightActionActivated,\n          leftActionState: this.state.leftActionState,\n          rightActionState: this.state.rightActionState,\n          swipeAnimatedValue: this._translateX\n        }));\n      }\n      var onPress = this.props.children[1].props.onPress;\n      if (onPress) {\n        return React.cloneElement(this.props.children[1], _objectSpread(_objectSpread({}, this.props.children[1].props), {}, {\n          onPress: this.combinedOnPress,\n          leftActionActivated: this.state.leftActionActivated,\n          rightActionActivated: this.state.rightActionActivated,\n          leftActionState: this.state.leftActionState,\n          rightActionState: this.state.rightActionState,\n          swipeAnimatedValue: this._translateX\n        }));\n      }\n      return _jsxDEV(TouchableOpacity, {\n        activeOpacity: 1,\n        onPress: this.combinedOnPress,\n        accessible: false,\n        children: React.cloneElement(this.props.children[1], _objectSpread(_objectSpread({}, this.props.children[1].props), {}, {\n          leftActionActivated: this.state.leftActionActivated,\n          rightActionActivated: this.state.rightActionActivated,\n          leftActionState: this.state.leftActionState,\n          rightActionState: this.state.rightActionState,\n          swipeAnimatedValue: this._translateX\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 13\n      }, this);\n    }\n  }, {\n    key: \"renderRowContent\",\n    value: function renderRowContent() {\n      var _this8 = this;\n      if (this.state.dimensionsSet) {\n        return _jsxDEV(Animated.View, _objectSpread(_objectSpread({\n          manipulationModes: ['translateX']\n        }, this._panResponder.panHandlers), {}, {\n          style: {\n            zIndex: 2,\n            transform: [{\n              translateX: this._translateX\n            }]\n          },\n          children: this.renderVisibleContent()\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 17\n        }, this);\n      } else {\n        return _jsxDEV(Animated.View, _objectSpread(_objectSpread({\n          manipulationModes: ['translateX']\n        }, this._panResponder.panHandlers), {}, {\n          onLayout: function onLayout(e) {\n            return _this8.onContentLayout(e);\n          },\n          style: {\n            zIndex: 2,\n            transform: [{\n              translateX: this._translateX\n            }]\n          },\n          children: this.renderVisibleContent()\n        }), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 17\n        }, this);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _jsxDEV(View, {\n        style: this.props.style ? this.props.style : styles.container,\n        children: [_jsxDEV(View, {\n          style: [styles.hidden, {\n            height: this.state.hiddenHeight,\n            width: this.state.hiddenWidth\n          }],\n          children: React.cloneElement(this.props.children[0], _objectSpread(_objectSpread({}, this.props.children[0].props), {}, {\n            leftActionActivated: this.state.leftActionActivated,\n            rightActionActivated: this.state.rightActionActivated,\n            leftActionState: this.state.leftActionState,\n            rightActionState: this.state.rightActionState,\n            swipeAnimatedValue: this._translateX\n          }))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 17\n        }, this), this.renderRowContent()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 13\n      }, this);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (!nextProps.previewRepeat) {\n        clearInterval(prevState.previewRepeatInterval);\n        prevState.previewRepeatInterval = null;\n      }\n      prevState.timeBetweenPreviewRepeats = nextProps.previewDuration * 2 + nextProps.previewOpenDelay + PREVIEW_CLOSE_DELAY + nextProps.previewRepeatDelay;\n      return prevState;\n    }\n  }]);\n  return SwipeRow;\n}(Component);\nvar styles = StyleSheet.create({\n  container: {},\n  hidden: {\n    zIndex: 1,\n    bottom: 0,\n    left: 0,\n    overflow: 'hidden',\n    position: 'absolute',\n    right: 0,\n    top: 0\n  }\n});\nSwipeRow.propTypes = {\n  setScrollEnabled: PropTypes.func,\n  swipeGestureBegan: PropTypes.func,\n  swipeGestureEnded: PropTypes.func,\n  onRowOpen: PropTypes.func,\n  onRowDidOpen: PropTypes.func,\n  leftOpenValue: PropTypes.number,\n  rightOpenValue: PropTypes.number,\n  leftActivationValue: PropTypes.number,\n  rightActivationValue: PropTypes.number,\n  leftActionValue: PropTypes.number,\n  rightActionValue: PropTypes.number,\n  initialLeftActionState: PropTypes.bool,\n  initialRightActionState: PropTypes.bool,\n  stopLeftSwipe: PropTypes.number,\n  stopRightSwipe: PropTypes.number,\n  friction: PropTypes.number,\n  tension: PropTypes.number,\n  restSpeedThreshold: PropTypes.number,\n  restDisplacementThreshold: PropTypes.number,\n  closeOnRowPress: PropTypes.bool,\n  disableLeftSwipe: PropTypes.bool,\n  disableRightSwipe: PropTypes.bool,\n  recalculateHiddenLayout: PropTypes.bool,\n  disableHiddenLayoutCalculation: PropTypes.bool,\n  onRowClose: PropTypes.func,\n  onRowDidClose: PropTypes.func,\n  onLeftAction: PropTypes.func,\n  onRightAction: PropTypes.func,\n  onLeftActionStatusChange: PropTypes.func,\n  onRightActionStatusChange: PropTypes.func,\n  style: PropTypes.object,\n  preview: PropTypes.bool,\n  previewDuration: PropTypes.number,\n  previewRepeat: PropTypes.bool,\n  previewRepeatDelay: PropTypes.number,\n  previewOpenValue: PropTypes.number,\n  directionalDistanceChangeThreshold: PropTypes.number,\n  swipeToOpenPercent: PropTypes.number,\n  swipeToOpenVelocityContribution: PropTypes.number,\n  swipeToClosePercent: PropTypes.number,\n  shouldItemUpdate: PropTypes.func,\n  onSwipeValueChange: PropTypes.func,\n  forceCloseToLeftThreshold: PropTypes.number,\n  forceCloseToRightThreshold: PropTypes.number,\n  onForceCloseToLeft: PropTypes.func,\n  onForceCloseToRight: PropTypes.func,\n  onForceCloseToLeftEnd: PropTypes.func,\n  onForceCloseToRightEnd: PropTypes.func,\n  useNativeDriver: PropTypes.bool,\n  children: PropTypes.node.isRequired,\n  swipeKey: PropTypes.string,\n  onPreviewEnd: PropTypes.func\n};\nSwipeRow.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowPress: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  disableHiddenLayoutCalculation: false,\n  preview: false,\n  previewDuration: 300,\n  previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50,\n  swipeToOpenVelocityContribution: 0,\n  swipeToClosePercent: 50,\n  item: {},\n  useNativeDriver: true,\n  previewRepeat: false,\n  previewRepeatDelay: 1000\n};\nexport default SwipeRow;","map":{"version":3,"names":["_defineProperty","_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_inherits","_jsxFileName","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_callSuper","_isNativeReflectConstruct","Reflect","construct","constructor","Boolean","prototype","valueOf","call","React","Component","PropTypes","Dimensions","Animated","PanResponder","StyleSheet","TouchableOpacity","View","jsxDEV","_jsxDEV","DEFAULT_PREVIEW_OPEN_DELAY","PREVIEW_CLOSE_DELAY","MAX_VELOCITY_CONTRIBUTION","SCROLL_LOCK_MILLISECONDS","SwipeRow","_Component","props","_this","ensureScrollEnabled","parentScrollEnabled","setScrollEnabled","combinedOnPress","onPress","children","onRowPress","isOpen","leftActionActivated","rightActionActivated","previousTrackedTranslateX","currentTranslateX","previousTrackedDirection","horizontalSwipeGestureBegan","swipeInitialX","ranPreview","_ensureScrollEnabledTimer","isForceClosing","state","leftActionState","initialLeftActionState","rightActionState","initialRightActionState","previewRepeatInterval","timeBetweenPreviewRepeats","dimensionsSet","hiddenHeight","disableHiddenLayoutCalculation","hiddenWidth","_translateX","Value","_panResponder","create","onMoveShouldSetPanResponder","gs","handleOnMoveShouldSetPanResponder","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderRelease","onPanResponderTerminate","handlePanResponderEnd","onShouldBlockNativeResponder","addListener","_ref","value","onSwipeValueChange","direction","Math","abs","key","swipeKey","forceCloseToRightThreshold","_ref2","get","width","forceCloseRow","onForceCloseToRight","forceCloseToLeftThreshold","_ref3","onForceCloseToLeft","onLeftActionStatusChange","leftActivationValue","_ref4","absValue","isActivated","setState","onRightActionStatusChange","rightActivationValue","_ref5","componentWillUnmount","clearTimeout","removeAllListeners","shouldComponentUpdate","nextProps","nextState","shouldItemUpdate","item","getPreviewAnimation","toValue","delay","timing","duration","previewDuration","useNativeDriver","onContentLayout","_this2","recalculateHiddenLayout","nativeEvent","layout","height","preview","doFullAnimation","previewRepeat","setInterval","_this3","previewOpenValue","rightOpenValue","previewOpenDelay","start","onPreviewEnd","closeOnRowPress","closeRow","dx","directionalDistanceChangeThreshold","gestureState","dy","absDx","absDy","swipeGestureBegan","newDX","disableLeftSwipe","disableRightSwipe","stopLeftSwipe","stopRightSwipe","setValue","swipeGestureEnded","translateX","event","defaultPrevented","_this4","setTimeout","swipeToOpenVelocityContribution","possibleExtraPixels","clampedVelocity","min","vx","projectedExtraPixels","handleRightSwipe","handleLeftSwipe","actionSide","leftActionValue","leftOpenValue","swipeToOpenPercent","swipeToClosePercent","action","determineAction","manuallySwipeRow","rightActionValue","_this5","onRightAction","onLeftAction","_this6","onForceCloseToRightEnd","onForceCloseToLeftEnd","closeRowWithoutAnimation","onRowDidClose","onRowClose","onAnimationEnd","_this7","spring","friction","tension","restSpeedThreshold","restDisplacementThreshold","onRowDidOpen","onRowOpen","renderVisibleContent","cloneElement","swipeAnimatedValue","activeOpacity","accessible","fileName","lineNumber","columnNumber","renderRowContent","_this8","manipulationModes","panHandlers","style","zIndex","transform","onLayout","render","styles","container","hidden","getDerivedStateFromProps","prevState","clearInterval","previewRepeatDelay","bottom","left","overflow","position","right","top","propTypes","func","number","bool","object","node","isRequired","string","defaultProps"],"sources":["C:/JsonMobile/frontend/node_modules/react-native-swipe-list-view/components/SwipeRow.js"],"sourcesContent":["'use strict';\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    Dimensions,\r\n    Animated,\r\n    PanResponder,\r\n    StyleSheet,\r\n    TouchableOpacity,\r\n    View,\r\n} from 'react-native';\r\n\r\nconst DEFAULT_PREVIEW_OPEN_DELAY = 700;\r\nconst PREVIEW_CLOSE_DELAY = 300;\r\nconst MAX_VELOCITY_CONTRIBUTION = 5;\r\nconst SCROLL_LOCK_MILLISECONDS = 300;\r\n\r\n/**\r\n * Row that is generally used in a SwipeListView.\r\n * If you are rendering a SwipeRow explicitly you must pass the SwipeRow exactly two children.\r\n * The first will be rendered behind the second.\r\n * e.g.\r\n  <SwipeRow>\r\n      <View style={hiddenRowStyle} />\r\n      <View style={visibleRowStyle} />\r\n  </SwipeRow>\r\n */\r\nclass SwipeRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.isOpen = false;\r\n        this.leftActionActivated = false;\r\n        this.rightActionActivated = false;\r\n        this.previousTrackedTranslateX = 0;\r\n        this.currentTranslateX = 0;\r\n        this.previousTrackedDirection = null;\r\n        this.horizontalSwipeGestureBegan = false;\r\n        this.swipeInitialX = null;\r\n        this.parentScrollEnabled = true;\r\n        this.ranPreview = false;\r\n        this._ensureScrollEnabledTimer = null;\r\n        this.isForceClosing = false;\r\n        this.state = {\r\n            leftActionActivated: false,\r\n            rightActionActivated: false,\r\n            leftActionState: this.props.initialLeftActionState || false,\r\n            rightActionState: this.props.initialRightActionState || false,\r\n            previewRepeatInterval: null,\r\n            timeBetweenPreviewRepeats: null,\r\n            dimensionsSet: false,\r\n            hiddenHeight: this.props.disableHiddenLayoutCalculation\r\n                ? '100%'\r\n                : 0,\r\n            hiddenWidth: this.props.disableHiddenLayoutCalculation ? '100%' : 0,\r\n        };\r\n        this._translateX = new Animated.Value(0);\r\n\r\n        this._panResponder = PanResponder.create({\r\n            onMoveShouldSetPanResponder: (e, gs) =>\r\n                this.handleOnMoveShouldSetPanResponder(e, gs),\r\n            onPanResponderMove: (e, gs) => this.handlePanResponderMove(e, gs),\r\n            onPanResponderRelease: (e, gs) =>\r\n                this.handlePanResponderRelease(e, gs),\r\n            onPanResponderTerminate: (e, gs) =>\r\n                this.handlePanResponderEnd(e, gs),\r\n            onShouldBlockNativeResponder: () => false,\r\n        });\r\n\r\n        this._translateX.addListener(({ value }) => {\r\n            this.currentTranslateX = value;\r\n            if (this.props.onSwipeValueChange) {\r\n                let direction = this.previousTrackedDirection;\r\n                if (\r\n                    value !== this.previousTrackedTranslateX &&\r\n                    Math.abs(value - this.previousTrackedTranslateX) > 0.5\r\n                ) {\r\n                    direction =\r\n                        value > this.previousTrackedTranslateX\r\n                            ? 'right'\r\n                            : 'left';\r\n                }\r\n                this.props.onSwipeValueChange &&\r\n                    this.props.onSwipeValueChange({\r\n                        isOpen: this.isOpen,\r\n                        direction,\r\n                        value,\r\n                        key: this.props.swipeKey,\r\n                    });\r\n                this.previousTrackedTranslateX = value;\r\n                this.previousTrackedDirection = direction;\r\n            }\r\n        });\r\n\r\n        if (\r\n            this.props.forceCloseToRightThreshold &&\r\n            this.props.forceCloseToRightThreshold > 0\r\n        ) {\r\n            this._translateX.addListener(({ value }) => {\r\n                if (\r\n                    !this.isForceClosing &&\r\n                    Dimensions.get('window').width + value <\r\n                        this.props.forceCloseToRightThreshold\r\n                ) {\r\n                    this.isForceClosing = true;\r\n                    this.forceCloseRow('right');\r\n                    if (this.props.onForceCloseToRight) {\r\n                        this.props.onForceCloseToRight();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (\r\n            this.props.forceCloseToLeftThreshold &&\r\n            this.props.forceCloseToRightThreshold > 0\r\n        ) {\r\n            this._translateX.addListener(({ value }) => {\r\n                if (\r\n                    !this.isForceClosing &&\r\n                    Dimensions.get('window').width - value <\r\n                        this.props.forceCloseToLeftThreshold\r\n                ) {\r\n                    this.isForceClosing = true;\r\n                    this.forceCloseRow('left');\r\n                    if (this.props.onForceCloseToLeft) {\r\n                        this.props.onForceCloseToLeft();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        if (\r\n            this.props.onLeftActionStatusChange &&\r\n            this.props.leftActivationValue &&\r\n            this.props.leftActivationValue > 0\r\n        ) {\r\n            this._translateX.addListener(({ value }) => {\r\n                const absValue = Math.abs(value);\r\n                const isActivated = absValue > this.props.leftActivationValue;\r\n                if (this.leftActionActivated !== isActivated && value > 0) {\r\n                    this.props.onLeftActionStatusChange({\r\n                        isActivated,\r\n                        value,\r\n                        key: this.props.swipeKey,\r\n                    });\r\n                    this.leftActionActivated = isActivated;\r\n                    this.setState({\r\n                        leftActionActivated: isActivated,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        if (\r\n            this.props.onRightActionStatusChange &&\r\n            this.props.rightActivationValue &&\r\n            this.props.rightActivationValue < 0\r\n        ) {\r\n            this._translateX.addListener(({ value }) => {\r\n                const absValue = Math.abs(value);\r\n                const isActivated =\r\n                    absValue > Math.abs(this.props.rightActivationValue);\r\n                if (this.rightActionActivated !== isActivated && value < 0) {\r\n                    this.props.onRightActionStatusChange({\r\n                        isActivated,\r\n                        value,\r\n                        key: this.props.swipeKey,\r\n                    });\r\n                    this.rightActionActivated = isActivated;\r\n                    this.setState({\r\n                        rightActionActivated: isActivated,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this._ensureScrollEnabledTimer);\r\n        this._translateX.removeAllListeners();\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (\r\n            this.state.hiddenHeight !== nextState.hiddenHeight ||\r\n            this.state.hiddenWidth !== nextState.hiddenWidth ||\r\n            this.state.leftActionActivated !== nextState.leftActionActivated ||\r\n            this.state.rightActionActivated !==\r\n                nextState.rightActionActivated ||\r\n            this.state.leftActionState !== nextState.leftActionState ||\r\n            this.state.rightActionState !== nextState.rightActionState ||\r\n            !this.props.shouldItemUpdate ||\r\n            (this.props.shouldItemUpdate &&\r\n                this.props.shouldItemUpdate(this.props.item, nextProps.item))\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (!nextProps.previewRepeat) {\r\n            clearInterval(prevState.previewRepeatInterval);\r\n            prevState.previewRepeatInterval = null;\r\n        }\r\n        prevState.timeBetweenPreviewRepeats =\r\n            nextProps.previewDuration * 2 +\r\n            nextProps.previewOpenDelay +\r\n            PREVIEW_CLOSE_DELAY +\r\n            nextProps.previewRepeatDelay;\r\n        return prevState;\r\n    }\r\n\r\n    getPreviewAnimation(toValue, delay) {\r\n        return Animated.timing(this._translateX, {\r\n            duration: this.props.previewDuration,\r\n            toValue,\r\n            delay,\r\n            useNativeDriver: this.props.useNativeDriver,\r\n        });\r\n    }\r\n\r\n    onContentLayout(e) {\r\n        this.setState({\r\n            dimensionsSet: !this.props.recalculateHiddenLayout,\r\n            ...(!this.props.disableHiddenLayoutCalculation\r\n                ? {\r\n                      hiddenHeight: e.nativeEvent.layout.height,\r\n                      hiddenWidth: e.nativeEvent.layout.width,\r\n                  }\r\n                : {}),\r\n        });\r\n\r\n        if (this.props.preview && !this.ranPreview) {\r\n            this.ranPreview = true;\r\n            this.doFullAnimation();\r\n            if (this.props.previewRepeat) {\r\n                this.setState({\r\n                    previewRepeatInterval: setInterval(() => {\r\n                        this.doFullAnimation();\r\n                    }, this.state.timeBetweenPreviewRepeats),\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    doFullAnimation() {\r\n        const previewOpenValue =\r\n            this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\r\n        return this.getPreviewAnimation(\r\n            previewOpenValue,\r\n            this.props.previewOpenDelay\r\n        ).start(() => {\r\n            this.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start(() => {\r\n                this.props.onPreviewEnd && this.props.onPreviewEnd();\r\n            });\r\n        });\r\n    }\r\n\r\n    onRowPress() {\r\n        if (this.props.onRowPress) {\r\n            this.props.onRowPress();\r\n        } else {\r\n            if (this.props.closeOnRowPress) {\r\n                this.closeRow();\r\n            }\r\n        }\r\n    }\r\n\r\n    handleOnMoveShouldSetPanResponder(e, gs) {\r\n        const { dx } = gs;\r\n        return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\r\n    }\r\n\r\n    handlePanResponderMove(e, gestureState) {\r\n        /* If the view is force closing, then ignore Moves. Return */\r\n        if (this.isForceClosing) {\r\n            return;\r\n        }\r\n\r\n        /* Else, do normal job */\r\n        const { dx, dy } = gestureState;\r\n        const absDx = Math.abs(dx);\r\n        const absDy = Math.abs(dy);\r\n\r\n        // this check may not be necessary because we don't capture the move until we pass the threshold\r\n        // just being extra safe here\r\n        if (\r\n            absDx > this.props.directionalDistanceChangeThreshold ||\r\n            absDy > this.props.directionalDistanceChangeThreshold\r\n        ) {\r\n            // we have enough to determine direction\r\n            if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\r\n                // user is moving vertically, do nothing, listView will handle\r\n                return;\r\n            }\r\n\r\n            // user is moving horizontally\r\n            if (this.parentScrollEnabled) {\r\n                // disable scrolling on the listView parent\r\n                this.parentScrollEnabled = false;\r\n                this.props.setScrollEnabled &&\r\n                    this.props.setScrollEnabled(false);\r\n            }\r\n\r\n            if (this.swipeInitialX === null) {\r\n                // set tranlateX value when user started swiping\r\n                this.swipeInitialX = this.currentTranslateX;\r\n            }\r\n            if (!this.horizontalSwipeGestureBegan) {\r\n                this.horizontalSwipeGestureBegan = true;\r\n                this.props.swipeGestureBegan && this.props.swipeGestureBegan();\r\n            }\r\n\r\n            let newDX = this.swipeInitialX + dx;\r\n            if (this.props.disableLeftSwipe && newDX < 0) {\r\n                newDX = 0;\r\n            }\r\n            if (this.props.disableRightSwipe && newDX > 0) {\r\n                newDX = 0;\r\n            }\r\n\r\n            if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\r\n                newDX = this.props.stopLeftSwipe;\r\n            }\r\n            if (\r\n                this.props.stopRightSwipe &&\r\n                newDX < this.props.stopRightSwipe\r\n            ) {\r\n                newDX = this.props.stopRightSwipe;\r\n            }\r\n\r\n            this._translateX.setValue(newDX);\r\n        }\r\n    }\r\n\r\n    ensureScrollEnabled = () => {\r\n        if (!this.parentScrollEnabled) {\r\n            this.parentScrollEnabled = true;\r\n            this.props.setScrollEnabled && this.props.setScrollEnabled(true);\r\n        }\r\n    };\r\n\r\n    handlePanResponderRelease(e, gestureState) {\r\n        this.props.swipeGestureEnded &&\r\n            this.props.swipeGestureEnded(this.props.swipeKey, {\r\n                translateX: this.currentTranslateX,\r\n                direction: this.previousTrackedDirection,\r\n                event: e,\r\n                gestureState,\r\n            });\r\n\r\n        // If preventDefault() called on the event, do not handle responder end.\r\n        if (!e.defaultPrevented) {\r\n            this.handlePanResponderEnd(e, gestureState);\r\n        }\r\n    }\r\n\r\n    handlePanResponderEnd(e, gestureState) {\r\n        /* PanEnd will reset the force-closing state when it's true. */\r\n        if (this.isForceClosing) {\r\n            setTimeout(() => {\r\n                this.isForceClosing = false;\r\n            }, 500); // 500 is the default Animated.spring's duration used in manuallySwipeRow\r\n        }\r\n        // decide how much the velocity will affect the final position that the list item settles in.\r\n        const swipeToOpenVelocityContribution = this.props\r\n            .swipeToOpenVelocityContribution;\r\n        const possibleExtraPixels =\r\n            this.props.rightOpenValue * swipeToOpenVelocityContribution;\r\n        const clampedVelocity = Math.min(\r\n            gestureState.vx,\r\n            MAX_VELOCITY_CONTRIBUTION\r\n        );\r\n        const projectedExtraPixels =\r\n            possibleExtraPixels * (clampedVelocity / MAX_VELOCITY_CONTRIBUTION);\r\n\r\n        // re-enable scrolling on listView parent\r\n        this._ensureScrollEnabledTimer = setTimeout(\r\n            this.ensureScrollEnabled,\r\n            SCROLL_LOCK_MILLISECONDS\r\n        );\r\n\r\n        // finish up the animation\r\n        if (this.currentTranslateX >= 0) {\r\n            // trying to swipe right\r\n            // if (this.props.disableRightSwipe) {\r\n            //    return;\r\n            // }\r\n\r\n            this.handleRightSwipe(projectedExtraPixels);\r\n        } else {\r\n            // trying to swipe left\r\n            if (this.props.disableLeftSwipe) {\r\n                return;\r\n            }\r\n\r\n            this.handleLeftSwipe(projectedExtraPixels);\r\n        }\r\n    }\r\n\r\n    handleRightSwipe(projectedExtraPixels) {\r\n        let toValue = 0;\r\n        let actionSide;\r\n        const leftActionValue = this.props.leftActionValue || 0;\r\n        if (this.swipeInitialX < this.currentTranslateX) {\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels >\r\n                this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)\r\n            ) {\r\n                // we're more than halfway\r\n                toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\r\n            }\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels >\r\n                this.props.leftActivationValue\r\n            ) {\r\n                // we've passed the threshold to trigger the leftActionValue\r\n                toValue = this.isForceClosing ? 0 : leftActionValue;\r\n                actionSide = 'left';\r\n            }\r\n        } else {\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels >\r\n                this.props.leftOpenValue *\r\n                    (1 - this.props.swipeToClosePercent / 100)\r\n            ) {\r\n                toValue = this.isForceClosing ? 0 : this.props.leftOpenValue;\r\n            }\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels >\r\n                this.props.leftActivationValue\r\n            ) {\r\n                toValue = this.isForceClosing ? 0 : leftActionValue;\r\n                actionSide = 'left';\r\n            }\r\n        }\r\n\r\n        const action = this.determineAction(actionSide);\r\n        this.manuallySwipeRow(toValue, action);\r\n    }\r\n\r\n    handleLeftSwipe(projectedExtraPixels) {\r\n        let toValue = 0;\r\n        let actionSide;\r\n        const rightActionValue = this.props.rightActionValue || 0;\r\n        if (this.swipeInitialX > this.currentTranslateX) {\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels <\r\n                this.props.rightOpenValue *\r\n                    (this.props.swipeToOpenPercent / 100)\r\n            ) {\r\n                // we're more than halfway\r\n                toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\r\n            }\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels <\r\n                this.props.rightActivationValue\r\n            ) {\r\n                // we've passed the threshold to trigger the rightActionValue\r\n                toValue = this.isForceClosing ? 0 : rightActionValue;\r\n                actionSide = 'right';\r\n            }\r\n        } else {\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels <\r\n                this.props.rightOpenValue\r\n            ) {\r\n                toValue = this.isForceClosing ? 0 : this.props.rightOpenValue;\r\n            }\r\n            if (\r\n                this.currentTranslateX - projectedExtraPixels <\r\n                this.props.rightActivationValue *\r\n                    (1 - this.props.swipeToClosePercent / 100)\r\n            ) {\r\n                toValue = this.isForceClosing ? 0 : rightActionValue;\r\n                actionSide = 'right';\r\n            }\r\n        }\r\n        const action = this.determineAction(actionSide);\r\n        this.manuallySwipeRow(toValue, action);\r\n    }\r\n\r\n    determineAction(actionSide) {\r\n        if (actionSide === 'right') {\r\n            return () => {\r\n                this.props.onRightAction && this.props.onRightAction();\r\n                this.setState({\r\n                    rightActionState: !this.state.rightActionState,\r\n                });\r\n            };\r\n        }\r\n        if (actionSide === 'left') {\r\n            return () => {\r\n                this.props.onLeftAction && this.props.onLeftAction();\r\n                this.setState({\r\n                    leftActionState: !this.state.leftActionState,\r\n                });\r\n            };\r\n        }\r\n    }\r\n\r\n    /*\r\n     * This method is called by SwipeListView\r\n     */\r\n    closeRow() {\r\n        this.manuallySwipeRow(0);\r\n    }\r\n\r\n    /**\r\n     * Force close the row toward the end of the given direction.\r\n     * @param  {String} direction The direction to force close.\r\n     */\r\n    forceCloseRow(direction) {\r\n        this.manuallySwipeRow(0, () => {\r\n            if (direction === 'right' && this.props.onForceCloseToRightEnd) {\r\n                this.props.onForceCloseToRightEnd();\r\n            } else if (\r\n                direction === 'left' &&\r\n                this.props.onForceCloseToLeftEnd\r\n            ) {\r\n                this.props.onForceCloseToLeftEnd();\r\n            }\r\n        });\r\n    }\r\n\r\n    closeRowWithoutAnimation() {\r\n        this._translateX.setValue(0);\r\n\r\n        this.ensureScrollEnabled();\r\n        this.isOpen = false;\r\n        this.props.onRowDidClose && this.props.onRowDidClose();\r\n\r\n        this.props.onRowClose && this.props.onRowClose();\r\n\r\n        this.swipeInitialX = null;\r\n        this.horizontalSwipeGestureBegan = false;\r\n    }\r\n\r\n    manuallySwipeRow(toValue, onAnimationEnd) {\r\n        Animated.spring(this._translateX, {\r\n            toValue,\r\n            friction: this.props.friction,\r\n            tension: this.props.tension,\r\n            restSpeedThreshold: this.props.restSpeedThreshold,\r\n            restDisplacementThreshold: this.props.restDisplacementThreshold,\r\n            useNativeDriver: this.props.useNativeDriver,\r\n        }).start(() => {\r\n            this.ensureScrollEnabled();\r\n            if (toValue === 0) {\r\n                this.isOpen = false;\r\n                this.props.onRowDidClose && this.props.onRowDidClose();\r\n            } else {\r\n                this.isOpen = true;\r\n                this.props.onRowDidOpen && this.props.onRowDidOpen(toValue);\r\n            }\r\n            if (onAnimationEnd) {\r\n                onAnimationEnd();\r\n            }\r\n        });\r\n\r\n        if (toValue === 0) {\r\n            this.props.onRowClose && this.props.onRowClose();\r\n        } else {\r\n            this.props.onRowOpen && this.props.onRowOpen(toValue);\r\n        }\r\n\r\n        // reset everything\r\n        this.swipeInitialX = null;\r\n        this.horizontalSwipeGestureBegan = false;\r\n    }\r\n\r\n    combinedOnPress = (...args) => {\r\n        const onPress = this.props.children[1].props.onPress;\r\n        this.onRowPress();\r\n        onPress && onPress(...args);\r\n    };\r\n\r\n    renderVisibleContent() {\r\n        if (!this.props.closeOnRowPress) {\r\n            return React.cloneElement(this.props.children[1], {\r\n                ...this.props.children[1].props,\r\n                leftActionActivated: this.state.leftActionActivated,\r\n                rightActionActivated: this.state.rightActionActivated,\r\n                leftActionState: this.state.leftActionState,\r\n                rightActionState: this.state.rightActionState,\r\n                swipeAnimatedValue: this._translateX,\r\n            });\r\n        }\r\n\r\n        // handle touchables\r\n        const onPress = this.props.children[1].props.onPress;\r\n\r\n        if (onPress) {\r\n            return React.cloneElement(this.props.children[1], {\r\n                ...this.props.children[1].props,\r\n                onPress: this.combinedOnPress,\r\n                leftActionActivated: this.state.leftActionActivated,\r\n                rightActionActivated: this.state.rightActionActivated,\r\n                leftActionState: this.state.leftActionState,\r\n                rightActionState: this.state.rightActionState,\r\n                swipeAnimatedValue: this._translateX,\r\n            });\r\n        }\r\n\r\n        return (\r\n            <TouchableOpacity\r\n                activeOpacity={1}\r\n                onPress={this.combinedOnPress}\r\n                accessible={false}\r\n            >\r\n                {React.cloneElement(this.props.children[1], {\r\n                    ...this.props.children[1].props,\r\n                    leftActionActivated: this.state.leftActionActivated,\r\n                    rightActionActivated: this.state.rightActionActivated,\r\n                    leftActionState: this.state.leftActionState,\r\n                    rightActionState: this.state.rightActionState,\r\n                    swipeAnimatedValue: this._translateX,\r\n                })}\r\n            </TouchableOpacity>\r\n        );\r\n    }\r\n\r\n    renderRowContent() {\r\n        // We do this annoying if statement for performance.\r\n        // We don't want the onLayout func to run after it runs once.\r\n        if (this.state.dimensionsSet) {\r\n            return (\r\n                <Animated.View\r\n                    manipulationModes={['translateX']}\r\n                    {...this._panResponder.panHandlers}\r\n                    style={{\r\n                        zIndex: 2,\r\n                        transform: [{ translateX: this._translateX }],\r\n                    }}\r\n                >\r\n                    {this.renderVisibleContent()}\r\n                </Animated.View>\r\n            );\r\n        } else {\r\n            return (\r\n                <Animated.View\r\n                    manipulationModes={['translateX']}\r\n                    {...this._panResponder.panHandlers}\r\n                    onLayout={e => this.onContentLayout(e)}\r\n                    style={{\r\n                        zIndex: 2,\r\n                        transform: [{ translateX: this._translateX }],\r\n                    }}\r\n                >\r\n                    {this.renderVisibleContent()}\r\n                </Animated.View>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <View\r\n                style={this.props.style ? this.props.style : styles.container}\r\n            >\r\n                <View\r\n                    style={[\r\n                        styles.hidden,\r\n                        {\r\n                            height: this.state.hiddenHeight,\r\n                            width: this.state.hiddenWidth,\r\n                        },\r\n                    ]}\r\n                >\r\n                    {React.cloneElement(this.props.children[0], {\r\n                        ...this.props.children[0].props,\r\n                        leftActionActivated: this.state.leftActionActivated,\r\n                        rightActionActivated: this.state.rightActionActivated,\r\n                        leftActionState: this.state.leftActionState,\r\n                        rightActionState: this.state.rightActionState,\r\n                        swipeAnimatedValue: this._translateX,\r\n                    })}\r\n                </View>\r\n                {this.renderRowContent()}\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        // As of RN 0.29 flex: 1 is causing all rows to be the same height\r\n        // flex: 1\r\n    },\r\n    hidden: {\r\n        zIndex: 1,\r\n        bottom: 0,\r\n        left: 0,\r\n        overflow: 'hidden',\r\n        position: 'absolute',\r\n        right: 0,\r\n        top: 0,\r\n    },\r\n});\r\n\r\nSwipeRow.propTypes = {\r\n    /**\r\n     * Used by the SwipeListView to close rows on scroll events.\r\n     * You shouldn't need to use this prop explicitly.\r\n     */\r\n    setScrollEnabled: PropTypes.func,\r\n    /**\r\n     * Called when it has been detected that a row should be swiped open.\r\n     */\r\n    swipeGestureBegan: PropTypes.func,\r\n    /**\r\n     * Called when user has ended their swipe gesture\r\n     */\r\n    swipeGestureEnded: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row is animating open. Used by the SwipeListView\r\n     * to keep references to open rows.\r\n     */\r\n    onRowOpen: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row has animated open.\r\n     */\r\n    onRowDidOpen: PropTypes.func,\r\n    /**\r\n     * TranslateX value for opening the row to the left (positive number)\r\n     */\r\n    leftOpenValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for opening the row to the right (negative number)\r\n     */\r\n    rightOpenValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for firing onLeftActionStatusChange (positive number)\r\n     */\r\n    leftActivationValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for firing onRightActionStatusChange (negative number)\r\n     */\r\n    rightActivationValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for left action to which the row will be shifted after gesture release\r\n     */\r\n    leftActionValue: PropTypes.number,\r\n    /**\r\n     * TranslateX value for right action to which the row will be shifted after gesture release\r\n     */\r\n    rightActionValue: PropTypes.number,\r\n    /**\r\n     * Initial value for left action state (default is false)\r\n     */\r\n    initialLeftActionState: PropTypes.bool,\r\n    /**\r\n     * Initial value for right action state (default is false)\r\n     */\r\n    initialRightActionState: PropTypes.bool,\r\n    /**\r\n     * TranslateX value for stop the row to the left (positive number)\r\n     */\r\n    stopLeftSwipe: PropTypes.number,\r\n    /**\r\n     * TranslateX value for stop the row to the right (negative number)\r\n     */\r\n    stopRightSwipe: PropTypes.number,\r\n    /**\r\n     * Friction for the open / close animation\r\n     */\r\n    friction: PropTypes.number,\r\n    /**\r\n     * Tension for the open / close animation\r\n     */\r\n    tension: PropTypes.number,\r\n    /**\r\n     * RestSpeedThreshold for the open / close animation\r\n     */\r\n    restSpeedThreshold: PropTypes.number,\r\n    /**\r\n     * RestDisplacementThreshold for the open / close animation\r\n     */\r\n    restDisplacementThreshold: PropTypes.number,\r\n    /**\r\n     * Should the row be closed when it is tapped\r\n     */\r\n    closeOnRowPress: PropTypes.bool,\r\n    /**\r\n     * Disable ability to swipe the row left\r\n     */\r\n    disableLeftSwipe: PropTypes.bool,\r\n    /**\r\n     * Disable ability to swipe the row right\r\n     */\r\n    disableRightSwipe: PropTypes.bool,\r\n    /**\r\n     * Enable hidden row onLayout calculations to run always\r\n     */\r\n    recalculateHiddenLayout: PropTypes.bool,\r\n    /**\r\n     * Disable hidden row onLayout calculations\r\n     */\r\n    disableHiddenLayoutCalculation: PropTypes.bool,\r\n    /**\r\n     * Called when a swipe row is animating closed\r\n     */\r\n    onRowClose: PropTypes.func,\r\n    /**\r\n     * Called when a swipe row has animated closed\r\n     */\r\n    onRowDidClose: PropTypes.func,\r\n    /**\r\n     * Called when row shifted to leftActivationValue\r\n     */\r\n    onLeftAction: PropTypes.func,\r\n    /**\r\n     * Called when row shifted to rightActivationValue\r\n     */\r\n    onRightAction: PropTypes.func,\r\n    /**\r\n     * Called once when swipe value crosses the leftActivationValue\r\n     */\r\n    onLeftActionStatusChange: PropTypes.func,\r\n    /**\r\n     * Called once when swipe value crosses the rightActivationValue\r\n     */\r\n    onRightActionStatusChange: PropTypes.func,\r\n    /**\r\n     * Styles for the parent wrapper View of the SwipeRow\r\n     */\r\n    style: PropTypes.object,\r\n    /**\r\n     * Should the row do a slide out preview to show that it is swipeable\r\n     */\r\n    preview: PropTypes.bool,\r\n    /**\r\n     * Duration of the slide out preview animation\r\n     */\r\n    previewDuration: PropTypes.number,\r\n    /**\r\n     * Should the animation repeat until false is provided\r\n     */\r\n    previewRepeat: PropTypes.bool,\r\n    /**\r\n     * Time between each full completed animation in milliseconds\r\n     * Default: 1000 (1 second)\r\n     */\r\n    previewRepeatDelay: PropTypes.number,\r\n    /**\r\n     * TranslateX value for the slide out preview animation\r\n     * Default: 0.5 * props.rightOpenValue\r\n     */\r\n    previewOpenValue: PropTypes.number,\r\n    /**\r\n     * The dx value used to detect when a user has begun a swipe gesture\r\n     */\r\n    directionalDistanceChangeThreshold: PropTypes.number,\r\n    /**\r\n     * What % of the left/right openValue does the user need to swipe\r\n     * past to trigger the row opening.\r\n     */\r\n    swipeToOpenPercent: PropTypes.number,\r\n    /**\r\n     * Describes how much the ending velocity of the gesture contributes to whether the swipe will result in the item being closed or open.\r\n     * A velocity factor of 0 means that the velocity will have no bearing on whether the swipe settles on a closed or open position\r\n     * and it'll just take into consideration the swipeToOpenPercent.\r\n     */\r\n    swipeToOpenVelocityContribution: PropTypes.number,\r\n    /**\r\n     * What % of the left/right openValue does the user need to swipe\r\n     * past to trigger the row closing.\r\n     */\r\n    swipeToClosePercent: PropTypes.number,\r\n    /**\r\n     * callback to determine whether component should update (currentItem, newItem)\r\n     */\r\n    shouldItemUpdate: PropTypes.func,\r\n    /**\r\n     * Callback invoked any time the swipe value of the row is changed\r\n     */\r\n    onSwipeValueChange: PropTypes.func,\r\n    /**\r\n     * TranslateX amount(not value!) threshold that triggers force-closing the row to the Left End (positive number)\r\n     */\r\n    forceCloseToLeftThreshold: PropTypes.number,\r\n    /**\r\n     * TranslateX amount(not value!) threshold that triggers force-closing the row to the Right End (positive number)\r\n     */\r\n    forceCloseToRightThreshold: PropTypes.number,\r\n    /**\r\n     * Callback invoked when row is force closing to the Left End\r\n     */\r\n    onForceCloseToLeft: PropTypes.func,\r\n    /**\r\n     * Callback invoked when row is force closing to the Right End\r\n     */\r\n    onForceCloseToRight: PropTypes.func,\r\n    /**\r\n     * Callback invoked when row has finished force closing to the Left End\r\n     */\r\n    onForceCloseToLeftEnd: PropTypes.func,\r\n    /**\r\n     * Callback invoked when row has finished force closing to the Right End\r\n     */\r\n    onForceCloseToRightEnd: PropTypes.func,\r\n    /**\r\n     * useNativeDriver: true for all animations where possible\r\n     */\r\n    useNativeDriver: PropTypes.bool,\r\n    /**\r\n     * Children\r\n     */\r\n    children: PropTypes.node.isRequired,\r\n    /**\r\n     * Key used to identify rows on swipe value changes\r\n     */\r\n    swipeKey: PropTypes.string,\r\n    /**\r\n     * Callback that runs after row swipe preview is finished\r\n     */\r\n    onPreviewEnd: PropTypes.func,\r\n};\r\n\r\nSwipeRow.defaultProps = {\r\n    leftOpenValue: 0,\r\n    rightOpenValue: 0,\r\n    closeOnRowPress: true,\r\n    disableLeftSwipe: false,\r\n    disableRightSwipe: false,\r\n    recalculateHiddenLayout: false,\r\n    disableHiddenLayoutCalculation: false,\r\n    preview: false,\r\n    previewDuration: 300,\r\n    previewOpenDelay: DEFAULT_PREVIEW_OPEN_DELAY,\r\n    directionalDistanceChangeThreshold: 2,\r\n    swipeToOpenPercent: 50,\r\n    swipeToOpenVelocityContribution: 0,\r\n    swipeToClosePercent: 50,\r\n    item: {},\r\n    useNativeDriver: true,\r\n    previewRepeat: false,\r\n    previewRepeatDelay: 1000,\r\n};\r\n\r\nexport default SwipeRow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}