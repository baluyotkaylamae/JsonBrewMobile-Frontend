{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n  _excluded2 = [\"openByDefault\", \"lazy\", \"drawerContentOptions\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from '../views/DrawerView';\nfunction DrawerNavigator(_ref) {\n  var id = _ref.id,\n    initialRouteName = _ref.initialRouteName,\n    customDefaultStatus = _ref.defaultStatus,\n    backBehavior = _ref.backBehavior,\n    children = _ref.children,\n    screenListeners = _ref.screenListeners,\n    screenOptions = _ref.screenOptions,\n    restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n  var openByDefault = restWithDeprecated.openByDefault,\n    lazy = restWithDeprecated.lazy,\n    drawerContentOptions = restWithDeprecated.drawerContentOptions,\n    rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n  var defaultScreenOptions = {};\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(defaultScreenOptions, null, 2)}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`);\n  }\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`);\n  }\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`);\n  }\n  var defaultStatus = customDefaultStatus !== undefined ? customDefaultStatus : openByDefault ? 'open' : 'closed';\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n      id: id,\n      initialRouteName: initialRouteName,\n      defaultStatus: defaultStatus,\n      backBehavior: backBehavior,\n      children: children,\n      screenListeners: screenListeners,\n      screenOptions: screenOptions,\n      defaultScreenOptions: defaultScreenOptions\n    }),\n    state = _useNavigationBuilder.state,\n    descriptors = _useNavigationBuilder.descriptors,\n    navigation = _useNavigationBuilder.navigation,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"names":["createNavigatorFactory","DrawerRouter","useNavigationBuilder","React","warnOnce","DrawerView","DrawerNavigator","_ref","id","initialRouteName","customDefaultStatus","defaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","_objectWithoutProperties","_excluded","openByDefault","lazy","drawerContentOptions","rest","_excluded2","defaultScreenOptions","Object","assign","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","_useNavigationBuilder","state","descriptors","navigation","NavigationContent","createElement","_extends"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\@react-navigation\\drawer\\src\\navigators\\createDrawerNavigator.tsx"],"sourcesContent":["import {\r\n  createNavigatorFactory,\r\n  DefaultNavigatorOptions,\r\n  DrawerActionHelpers,\r\n  DrawerNavigationState,\r\n  DrawerRouter,\r\n  DrawerRouterOptions,\r\n  DrawerStatus,\r\n  ParamListBase,\r\n  useNavigationBuilder,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\nimport warnOnce from 'warn-once';\r\n\r\nimport type {\r\n  DrawerNavigationConfig,\r\n  DrawerNavigationEventMap,\r\n  DrawerNavigationOptions,\r\n} from '../types';\r\nimport DrawerView from '../views/DrawerView';\r\n\r\ntype Props = DefaultNavigatorOptions<\r\n  ParamListBase,\r\n  DrawerNavigationState<ParamListBase>,\r\n  DrawerNavigationOptions,\r\n  DrawerNavigationEventMap\r\n> &\r\n  DrawerRouterOptions &\r\n  DrawerNavigationConfig;\r\n\r\nfunction DrawerNavigator({\r\n  id,\r\n  initialRouteName,\r\n  defaultStatus: customDefaultStatus,\r\n  backBehavior,\r\n  children,\r\n  screenListeners,\r\n  screenOptions,\r\n  ...restWithDeprecated\r\n}: Props) {\r\n  const {\r\n    // @ts-expect-error: openByDefault is deprecated\r\n    openByDefault,\r\n    // @ts-expect-error: lazy is deprecated\r\n    lazy,\r\n    // @ts-expect-error: drawerContentOptions is deprecated\r\n    drawerContentOptions,\r\n    ...rest\r\n  } = restWithDeprecated;\r\n\r\n  let defaultScreenOptions: DrawerNavigationOptions = {};\r\n\r\n  if (drawerContentOptions) {\r\n    Object.assign(defaultScreenOptions, {\r\n      drawerPosition: drawerContentOptions.drawerPosition,\r\n      drawerType: drawerContentOptions.drawerType,\r\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\r\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\r\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\r\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\r\n      overlayColor: drawerContentOptions.overlayColor,\r\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\r\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\r\n    });\r\n\r\n    (\r\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\r\n    ).forEach((key) => {\r\n      if (defaultScreenOptions[key] === undefined) {\r\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\r\n        delete defaultScreenOptions[key];\r\n      }\r\n    });\r\n\r\n    warnOnce(\r\n      drawerContentOptions,\r\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\r\n        defaultScreenOptions,\r\n        null,\r\n        2\r\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\r\n    );\r\n  }\r\n\r\n  if (typeof lazy === 'boolean') {\r\n    defaultScreenOptions.lazy = lazy;\r\n\r\n    warnOnce(\r\n      true,\r\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\r\n    );\r\n  }\r\n\r\n  if (typeof openByDefault === 'boolean') {\r\n    warnOnce(\r\n      true,\r\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\r\n    );\r\n  }\r\n\r\n  const defaultStatus: DrawerStatus =\r\n    customDefaultStatus !== undefined\r\n      ? customDefaultStatus\r\n      : openByDefault\r\n      ? 'open'\r\n      : 'closed';\r\n\r\n  const { state, descriptors, navigation, NavigationContent } =\r\n    useNavigationBuilder<\r\n      DrawerNavigationState<ParamListBase>,\r\n      DrawerRouterOptions,\r\n      DrawerActionHelpers<ParamListBase>,\r\n      DrawerNavigationOptions,\r\n      DrawerNavigationEventMap\r\n    >(DrawerRouter, {\r\n      id,\r\n      initialRouteName,\r\n      defaultStatus,\r\n      backBehavior,\r\n      children,\r\n      screenListeners,\r\n      screenOptions,\r\n      defaultScreenOptions,\r\n    });\r\n\r\n  return (\r\n    <NavigationContent>\r\n      <DrawerView\r\n        {...rest}\r\n        defaultStatus={defaultStatus}\r\n        state={state}\r\n        descriptors={descriptors}\r\n        navigation={navigation}\r\n      />\r\n    </NavigationContent>\r\n  );\r\n}\r\n\r\nexport default createNavigatorFactory<\r\n  DrawerNavigationState<ParamListBase>,\r\n  DrawerNavigationOptions,\r\n  DrawerNavigationEventMap,\r\n  typeof DrawerNavigator\r\n>(DrawerNavigator);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}