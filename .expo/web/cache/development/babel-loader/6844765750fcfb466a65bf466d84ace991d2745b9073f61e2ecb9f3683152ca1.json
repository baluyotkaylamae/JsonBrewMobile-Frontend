{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"navigation\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport { addCancelListener } from '../utils/addCancelListener';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    defaultStatus = _ref2.defaultStatus,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n    _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n    useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  var Drawer = useLegacyImplementation ? require('./legacy/Drawer').default : require('./modern/Drawer').default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n    _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.getConstants().isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n    _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n    drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _descriptors$focusedR5,\n    gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n    _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n    keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n    _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n    _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n    swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n    _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n    _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n    swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10,\n    overlayAccessibilityLabel = _descriptors$focusedR.overlayAccessibilityLabel;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var dimensions = useSafeAreaFrame();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    return addCancelListener(handleHardwareBack);\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$l = _descriptor$options.lazy,\n        lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n        unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options2 = descriptor.options,\n        freezeOnBlur = _descriptor$options2.freezeOnBlur,\n        _descriptor$options2$ = _descriptor$options2.header,\n        header = _descriptor$options2$ === void 0 ? function (_ref3) {\n          var _options$headerLeft;\n          var layout = _ref3.layout,\n            options = _ref3.options;\n          return React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: (_options$headerLeft = options.headerLeft) != null ? _options$headerLeft : function (props) {\n              return React.createElement(DrawerToggleButton, props);\n            }\n          }));\n        } : _descriptor$options2$,\n        headerShown = _descriptor$options2.headerShown,\n        headerStatusBarHeight = _descriptor$options2.headerStatusBarHeight,\n        headerTransparent = _descriptor$options2.headerTransparent,\n        sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    overlayAccessibilityLabel: overlayAccessibilityLabel,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n    rest = _objectWithoutProperties(_ref4, _excluded);\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","I18nManager","Platform","StyleSheet","View","Reanimated","useSafeAreaFrame","addCancelListener","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerViewBase","_ref2","_Reanimated$isConfigu","state","navigation","descriptors","defaultStatus","_ref2$drawerContent","drawerContent","props","createElement","_ref2$detachInactiveS","detachInactiveScreens","_ref2$useLegacyImplem","useLegacyImplementation","isConfigured","call","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","_descriptors$focusedR","options","_descriptors$focusedR2","drawerHideStatusBarOnOpen","_descriptors$focusedR3","drawerPosition","getConstants","isRTL","_descriptors$focusedR4","drawerStatusBarAnimation","drawerStyle","_descriptors$focusedR5","drawerType","select","ios","gestureHandlerProps","_descriptors$focusedR6","keyboardDismissMode","_descriptors$focusedR7","overlayColor","_descriptors$focusedR8","swipeEdgeWidth","_descriptors$focusedR9","swipeEnabled","_descriptors$focusedR10","swipeMinDistance","overlayAccessibilityLabel","_React$useState","useState","_React$useState2","_slicedToArray","loaded","setLoaded","includes","concat","_toConsumableArray","dimensions","_useTheme","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","_objectSpread","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","renderDrawerContent","Provider","value","renderSceneContent","enabled","hasTwoStates","style","styles","content","map","route","descriptor","_descriptor$options","_descriptor$options$l","lazy","unmountOnBlur","_descriptor$options2","freezeOnBlur","_descriptor$options2$","header","_ref3","_options$headerLeft","layout","_extends","title","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","absoluteFill","zIndex","visible","focused","render","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","_ref4","rest","_objectWithoutProperties","_excluded","create","flex"],"sources":["C:\\JsonMobile\\frontend\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerView.tsx"],"sourcesContent":["import {\r\n  getHeaderTitle,\r\n  Header,\r\n  SafeAreaProviderCompat,\r\n  Screen,\r\n} from '@react-navigation/elements';\r\nimport {\r\n  DrawerActions,\r\n  DrawerNavigationState,\r\n  DrawerStatus,\r\n  ParamListBase,\r\n  useTheme,\r\n} from '@react-navigation/native';\r\nimport * as React from 'react';\r\nimport { I18nManager, Platform, StyleSheet, View } from 'react-native';\r\nimport * as Reanimated from 'react-native-reanimated';\r\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\r\n\r\nimport type {\r\n  DrawerContentComponentProps,\r\n  DrawerDescriptorMap,\r\n  DrawerHeaderProps,\r\n  DrawerNavigationConfig,\r\n  DrawerNavigationHelpers,\r\n  DrawerNavigationProp,\r\n  DrawerProps,\r\n} from '../types';\r\nimport { addCancelListener } from '../utils/addCancelListener';\r\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\r\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\r\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\r\nimport DrawerContent from './DrawerContent';\r\nimport DrawerToggleButton from './DrawerToggleButton';\r\nimport { GestureHandlerRootView } from './GestureHandler';\r\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\r\n\r\ntype Props = DrawerNavigationConfig & {\r\n  defaultStatus: DrawerStatus;\r\n  state: DrawerNavigationState<ParamListBase>;\r\n  navigation: DrawerNavigationHelpers;\r\n  descriptors: DrawerDescriptorMap;\r\n};\r\n\r\nconst getDefaultDrawerWidth = ({\r\n  height,\r\n  width,\r\n}: {\r\n  height: number;\r\n  width: number;\r\n}) => {\r\n  /*\r\n   * Default drawer width is screen width - header height\r\n   * with a max width of 280 on mobile and 320 on tablet\r\n   * https://material.io/components/navigation-drawer\r\n   */\r\n  const smallerAxisSize = Math.min(height, width);\r\n  const isLandscape = width > height;\r\n  const isTablet = smallerAxisSize >= 600;\r\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\r\n  const maxWidth = isTablet ? 320 : 280;\r\n\r\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\r\n};\r\n\r\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\r\n\r\nfunction DrawerViewBase({\r\n  state,\r\n  navigation,\r\n  descriptors,\r\n  defaultStatus,\r\n  drawerContent = (props: DrawerContentComponentProps) => (\r\n    <DrawerContent {...props} />\r\n  ),\r\n  detachInactiveScreens = Platform.OS === 'web' ||\r\n    Platform.OS === 'android' ||\r\n    Platform.OS === 'ios',\r\n  // Reanimated 2 is not configured\r\n  // @ts-expect-error: the type definitions are incomplete\r\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\r\n}: Props) {\r\n  // Reanimated v3 dropped legacy v1 syntax\r\n  const legacyImplemenationNotAvailable =\r\n    require('react-native-reanimated').abs === undefined;\r\n\r\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\r\n    throw new Error(\r\n      'The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.'\r\n    );\r\n  }\r\n\r\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\r\n    ? require('./legacy/Drawer').default\r\n    : require('./modern/Drawer').default;\r\n\r\n  const focusedRouteKey = state.routes[state.index].key;\r\n  const {\r\n    drawerHideStatusBarOnOpen = false,\r\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\r\n    drawerStatusBarAnimation = 'slide',\r\n    drawerStyle,\r\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\r\n    gestureHandlerProps,\r\n    keyboardDismissMode = 'on-drag',\r\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\r\n    swipeEdgeWidth = 32,\r\n    swipeEnabled = Platform.OS !== 'web' &&\r\n      Platform.OS !== 'windows' &&\r\n      Platform.OS !== 'macos',\r\n    swipeMinDistance = 60,\r\n    overlayAccessibilityLabel,\r\n  } = descriptors[focusedRouteKey].options;\r\n\r\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\r\n\r\n  if (!loaded.includes(focusedRouteKey)) {\r\n    setLoaded([...loaded, focusedRouteKey]);\r\n  }\r\n\r\n  const dimensions = useSafeAreaFrame();\r\n\r\n  const { colors } = useTheme();\r\n\r\n  const drawerStatus = getDrawerStatusFromState(state);\r\n\r\n  const handleDrawerOpen = React.useCallback(() => {\r\n    navigation.dispatch({\r\n      ...DrawerActions.openDrawer(),\r\n      target: state.key,\r\n    });\r\n  }, [navigation, state.key]);\r\n\r\n  const handleDrawerClose = React.useCallback(() => {\r\n    navigation.dispatch({\r\n      ...DrawerActions.closeDrawer(),\r\n      target: state.key,\r\n    });\r\n  }, [navigation, state.key]);\r\n\r\n  React.useEffect(() => {\r\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\r\n      return;\r\n    }\r\n\r\n    const handleHardwareBack = () => {\r\n      // We shouldn't handle the back button if the parent screen isn't focused\r\n      // This will avoid the drawer overriding event listeners from a focused screen\r\n      if (!navigation.isFocused()) {\r\n        return false;\r\n      }\r\n\r\n      if (defaultStatus === 'open') {\r\n        handleDrawerOpen();\r\n      } else {\r\n        handleDrawerClose();\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    // We only add the listeners when drawer opens\r\n    // This way we can make sure that the listener is added as late as possible\r\n    // This will make sure that our handler will run first when back button is pressed\r\n    return addCancelListener(handleHardwareBack);\r\n  }, [\r\n    defaultStatus,\r\n    drawerStatus,\r\n    drawerType,\r\n    handleDrawerClose,\r\n    handleDrawerOpen,\r\n    navigation,\r\n  ]);\r\n\r\n  const renderDrawerContent = () => {\r\n    return (\r\n      <DrawerPositionContext.Provider value={drawerPosition}>\r\n        {drawerContent({\r\n          state: state,\r\n          navigation: navigation,\r\n          descriptors: descriptors,\r\n        })}\r\n      </DrawerPositionContext.Provider>\r\n    );\r\n  };\r\n\r\n  const renderSceneContent = () => {\r\n    return (\r\n      <MaybeScreenContainer\r\n        enabled={detachInactiveScreens}\r\n        hasTwoStates\r\n        style={styles.content}\r\n      >\r\n        {state.routes.map((route, index) => {\r\n          const descriptor = descriptors[route.key];\r\n          const { lazy = true, unmountOnBlur } = descriptor.options;\r\n          const isFocused = state.index === index;\r\n\r\n          if (unmountOnBlur && !isFocused) {\r\n            return null;\r\n          }\r\n\r\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\r\n            // Don't render a lazy screen if we've never navigated to it\r\n            return null;\r\n          }\r\n\r\n          const {\r\n            freezeOnBlur,\r\n            header = ({ layout, options }: DrawerHeaderProps) => (\r\n              <Header\r\n                {...options}\r\n                layout={layout}\r\n                title={getHeaderTitle(options, route.name)}\r\n                headerLeft={\r\n                  options.headerLeft ??\r\n                  ((props) => <DrawerToggleButton {...props} />)\r\n                }\r\n              />\r\n            ),\r\n            headerShown,\r\n            headerStatusBarHeight,\r\n            headerTransparent,\r\n            sceneContainerStyle,\r\n          } = descriptor.options;\r\n\r\n          return (\r\n            <MaybeScreen\r\n              key={route.key}\r\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\r\n              visible={isFocused}\r\n              enabled={detachInactiveScreens}\r\n              freezeOnBlur={freezeOnBlur}\r\n            >\r\n              <Screen\r\n                focused={isFocused}\r\n                route={descriptor.route}\r\n                navigation={descriptor.navigation}\r\n                headerShown={headerShown}\r\n                headerStatusBarHeight={headerStatusBarHeight}\r\n                headerTransparent={headerTransparent}\r\n                header={header({\r\n                  layout: dimensions,\r\n                  route: descriptor.route,\r\n                  navigation:\r\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\r\n                  options: descriptor.options,\r\n                })}\r\n                style={sceneContainerStyle}\r\n              >\r\n                {descriptor.render()}\r\n              </Screen>\r\n            </MaybeScreen>\r\n          );\r\n        })}\r\n      </MaybeScreenContainer>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <DrawerStatusContext.Provider value={drawerStatus}>\r\n      <Drawer\r\n        open={drawerStatus !== 'closed'}\r\n        onOpen={handleDrawerOpen}\r\n        onClose={handleDrawerClose}\r\n        gestureHandlerProps={gestureHandlerProps}\r\n        swipeEnabled={swipeEnabled}\r\n        swipeEdgeWidth={swipeEdgeWidth}\r\n        swipeVelocityThreshold={500}\r\n        swipeDistanceThreshold={swipeMinDistance}\r\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\r\n        statusBarAnimation={drawerStatusBarAnimation}\r\n        keyboardDismissMode={keyboardDismissMode}\r\n        drawerType={drawerType}\r\n        overlayAccessibilityLabel={overlayAccessibilityLabel}\r\n        drawerPosition={drawerPosition}\r\n        drawerStyle={[\r\n          {\r\n            width: getDefaultDrawerWidth(dimensions),\r\n            backgroundColor: colors.card,\r\n          },\r\n          drawerType === 'permanent' &&\r\n            (drawerPosition === 'left'\r\n              ? {\r\n                  borderRightColor: colors.border,\r\n                  borderRightWidth: StyleSheet.hairlineWidth,\r\n                }\r\n              : {\r\n                  borderLeftColor: colors.border,\r\n                  borderLeftWidth: StyleSheet.hairlineWidth,\r\n                }),\r\n          drawerStyle,\r\n        ]}\r\n        overlayStyle={{ backgroundColor: overlayColor }}\r\n        renderDrawerContent={renderDrawerContent}\r\n        renderSceneContent={renderSceneContent}\r\n        dimensions={dimensions}\r\n      />\r\n    </DrawerStatusContext.Provider>\r\n  );\r\n}\r\n\r\nexport default function DrawerView({ navigation, ...rest }: Props) {\r\n  return (\r\n    <SafeAreaProviderCompat>\r\n      <GestureHandlerWrapper style={styles.content}>\r\n        <DrawerViewBase navigation={navigation} {...rest} />\r\n      </GestureHandlerWrapper>\r\n    </SafeAreaProviderCompat>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  content: {\r\n    flex: 1,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}